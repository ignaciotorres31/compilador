package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;

class MiParser;

action code {:

  Hashtable ht = new Hashtable();

:};

parser code
{:

    public void tabla_simbolos(Hashtable ht){
            ht.forEach((k, v) -> {  
            System.out.println("Tabla de simbolos: " + k.toString() + " " + v.toString());
        });
            
    }
    
    public void syntax_error(Symbol s){
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

:};


terminal SUMA, RESTA, MULTIPLICACION, DIVISION, IGUAL_IGUAL, DESIGUAL, MAYOR, MAYOR_IGUAL, MENOR,
MENOR_IGUAL, PARENTESISA, PARENTESISC, CORCHETESA, CORCHETESC,  COMA, PUNTOCOMA, DOS_PUNTOS,
ASIGNACION;

terminal String IDENTIFICADOR, BOOLEAN_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL,SUMAIMPAR, INTEGER, FLOAT, BOOLEAN, 
INPUT_INT, INPUT_FLOAT, INPUT_BOOL, AND, OR, NOT, WHILE, DO, END,IF, THEN, ELSE, DISPLAY, DECLARE_SECTION, 
ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION, STRING;

nonterminal String programa, bloque_declaraciones, bloque_programa, declaraciones,declaracion, tipos, tipos_datos_id,
bloque_sentencias, sentencia, sentencia_while, sentencia_if, sentencia_asignacion, sentencia_display, factor, 
expresion_or, expresion_and, expresion_not, comparacion, expresion_sr, expresion_md, menos_unario, funcion_especial,
numeros_dentro_corchete, input, display, input_int, input_float, input_bool;

start with programa;

programa ::= bloque_declaraciones:bd bloque_programa: bp{:
            System.out.println("REGLA 0: programa -> bd bp");
            System.out.printf("REGLA 0: programa -> %s%n%n%s%n%n", bd,bp);
            RESULT = bd + bp;
        :}
        |
        bloque_declaraciones:bd {:
            System.out.println("REGLA 0.1: programa -> bd");
            System.out.printf("REGLA 0.1: programa -> %s%n%n", bd);
            RESULT = bd;
        :}
        |
        bloque_programa: bp{:
            System.out.println("REGLA 0.2: programa -> bp");
            System.out.printf("REGLA 0.2: programa -> %s%n%n", bp);
            RESULT = bp;
        :};

bloque_declaraciones ::= DECLARE_SECTION declaraciones:d ENDDECLARE_SECTION{:
            System.out.println("REGLA 1: bloque_declaraciones -> DECLARE_SECTION d ENDDECLARE_SECTION");
            System.out.printf("REGLA 1: bloque_declaraciones -> DECLARE_SECTION %s%n%n ENDDECLARE_SECTION", d);
            RESULT = "DECLARE_SECTION" + d + "ENDDECLARE_SECTION";
        :};

declaraciones ::= declaracion:dec declaraciones:decs{:
            System.out.println("REGLA 1.1: declaraciones -> dec decs");
            System.out.printf("REGLA 1.1: declaraciones -> %s %s%n%n",dec,decs);
            RESULT = dec + decs;
        :}
        |
        declaracion:dec{:
            System.out.println("REGLA 1.1: declaraciones -> dec");
            System.out.printf("REGLA 1.1: declaraciones -> %s %n%n",dec);
            RESULT = dec;
        :};


declaracion ::= tipos:t DOS_PUNTOS tipos_datos_id:tdi PUNTOCOMA{:
            ht.put(t,tdi);
            System.out.println("REGLA 1.2: declaracion -> t DOS_PUNTOS tdi PUNTOCOMA");
            System.out.printf("REGLA 1.2: declaracion -> %s : %s ;",t,tdi);
            RESULT = t +"DOS_PUNTOS"+ tdi +"PUNTOCOMA";
        :};

tipos ::= FLOAT{:
            System.out.println("REGLA 2: tipos -> FLOAT");
            System.out.printf("REGLA 2: tipos -> FLOAT");
            RESULT = "FLOAT";        
        :};

tipos ::= INTEGER{:
            System.out.println("REGLA 2: tipos -> INTEGER");
            System.out.printf("REGLA 2: tipos -> INTEGER");
            RESULT = "INTEGER";        
        :};

tipos ::= BOOLEAN{:
            System.out.println("REGLA 2: tipos -> BOOLEAN");
            System.out.printf("REGLA 2: tipos -> BOOLEAN");
            RESULT = "BOOLEAN";        
        :};

tipos_datos_id ::= IDENTIFICADOR:id{:
            System.out.println("REGLA 2.1: tipos_datos_id -> id ");
            System.out.printf("REGLA 2.1: tipos_datos_id -> %s%n%n",id);
            RESULT = id;
        :}
        |
        tipos_datos_id: tdi COMA IDENTIFICADOR:id {:
            System.out.println("REGLA 2.1: tipos_datos_id -> tdi COMA id");
            System.out.printf("REGLA 2.1: tipos_datos_id -> %s , %s", tdi,id);
            RESULT = tdi + "COMA" +id;
        :};

bloque_programa ::= PROGRAM_SECTION bloque_sentencias:bs ENDPROGRAM_SECTION{:
            System.out.println("REGLA 3: bloque_programa -> PROGRAM_SECTION bs ENDPROGRAM_SECTION");
            System.out.printf("REGLA 3: bloque_programa -> PROGRAM_SECTION%n%n %s%n%n ENDPROGRAM_SECTION", bs);
            RESULT = "PROGRAM_SECTION" + bs + "ENDPROGRAM_SECTION";
        :};

bloque_sentencias ::= bloque_sentencias:bs sentencia:s {:
            System.out.println("REGLA 3.1: bloque_sentencias -> bs s");
            System.out.printf("REGLA 3.1: bloque_sentencias -> %s %s%n%n", bs, s);
            RESULT =bs + s;
        :}
        | 
        sentencia:s {:
            System.out.println("REGLA 3.1: bloque_sentencias -> s");
            System.out.printf("REGLA 3.1: bloque_sentencias -> %s%n%n", s);
            RESULT = s;
        :};  

sentencia ::= sentencia_while: sw{:
            System.out.println("REGLA 3.2: sentencia -> sw");
            System.out.printf("REGLA 3.2: sentencia -> %s%n%n", sw);
            RESULT = sw;
        :}
        |
        sentencia_if: si{:
            System.out.println("REGLA 3.2: sentencia -> si");
            System.out.printf("REGLA 3.2: sentencia -> %s%n%n", si);
            RESULT = si;
        :}
        |
        sentencia_asignacion: sa{:
            System.out.println("REGLA 3.2: sentencia -> sa");
            System.out.printf("REGLA 3.2: sentencia -> %s%n%n", sa);
            RESULT = sa;
        :}
        |   
        sentencia_display: sd{:
            System.out.println("REGLA 3.2: sentencia -> sd");
            System.out.printf("REGLA 3.2: sentencia -> %s%n%n", sd);
            RESULT = sd;
        :};

sentencia_asignacion ::= IDENTIFICADOR:id ASIGNACION expresion_or: eo {:
            System.out.println("REGLA 4: sentencia_asignacion -> id ASIGNACION eo ");
            System.out.printf("REGLA 4: sentencia_asignacion -> %s := %s%n%n",id,eo);
            RESULT = id +":=" + eo ;
        :};

expresion_or ::= expresion_or: eo OR expresion_and :ea{:
            System.out.println("REGLA 4.1: expresion_or -> eo OR ea ");
            System.out.printf("REGLA 4.1: expresion_or ->  %s OR %s%n%n",eo, ea);
            RESULT =eo +"OR"+ ea ;
        :}
        |
        expresion_and :ea{:
            System.out.println("REGLA 4.1: expresion_or -> ea ");
            System.out.printf("REGLA 4.1: expresion_or ->  %s%n%n",ea);
            RESULT = ea;
        :};

expresion_and ::= expresion_and: ea AND expresion_not :en{:
            System.out.println("REGLA 4.2: expresion_and -> ea AND en ");
            System.out.printf("REGLA 4.2: expresion_and ->  %s AND %s%n%n",ea, en);
            RESULT =ea +"AND"+ en;
        :}
        |
        expresion_not :en{:
            System.out.println("REGLA 4.2: expresion_and -> en");
            System.out.printf("REGLA 4.2: expresion_and ->  %s%n%n",en);
            RESULT = en;
        :};

expresion_not ::= NOT expresion_not :en{:
            System.out.println("REGLA 4.3: expresion_not -> NOT en ");
            System.out.printf("REGLA 4.3: expresion_not ->  NOT %s%n%n",en);
            RESULT ="NOT"+ en;
        :}
        |
        comparacion:c{:
            System.out.println("REGLA 4.3: expresion_not -> c");
            System.out.printf("REGLA 4.3: expresion_not ->  %s%n%n",c);
            RESULT = c;
        :};

comparacion ::= expresion_sr :esr1 MAYOR expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 MAYOR esr2");
            System.out.printf("REGLA 5: comparacion -> %s > %s%n%n",esr1,esr2);
            RESULT = esr1+">"+ esr2;
        :}
        |
        expresion_sr :esr1 MAYOR_IGUAL expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 MAYOR_IGUAL esr2");
            System.out.printf("REGLA 5: comparacion ->  %s >= %s%n%n",esr1,esr2);
            RESULT = esr1 + ">=" + esr2;
        :}
        |
        expresion_sr :esr1 MENOR expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 MENOR esr2");
            System.out.printf("REGLA 5: comparacion -> %s < %s%n%n",esr1,esr2);
            RESULT = esr1+"<"+ esr2;
        :}
        |
        expresion_sr :esr1 MENOR_IGUAL expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 MENOR_IGUAL esr2");
            System.out.printf("REGLA 5: comparacion ->  %s <= %s%n%n",esr1,esr2);
            RESULT = esr1 + "<=" + esr2;
        :}
        |
        expresion_sr :esr1 IGUAL_IGUAL expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 IGUAL_IGUAL esr2");
            System.out.printf("REGLA 5: comparacion -> %s == %s%n%n",esr1,esr2);
            RESULT = esr1+"=="+ esr2;
        :}
        |
        expresion_sr :esr1 DESIGUAL expresion_sr: esr2{:
            System.out.println("REGLA 5: comparacion -> esr1 DESIGUAL esr2");
            System.out.printf("REGLA 5: comparacion ->  %s != %s%n%n",esr1,esr2);
            RESULT = esr1 + "!=" + esr2;
        :}
        |
        expresion_sr :esr{:
            System.out.println("REGLA 5: comparacion -> esr");
            System.out.printf("REGLA 5: comparacion ->  %s%n%n",esr);
            RESULT = esr;
        :};

expresion_sr ::= expresion_sr :esr SUMA expresion_md: emd{:
            System.out.println("REGLA 5.1: expresion_sr -> esr SUMA emd");
            System.out.printf("REGLA 5.1: expresion_sr-> %s + %s%n%n",esr,emd);
            RESULT = esr+"+"+ emd;
        :}
        |
        expresion_sr :esr RESTA expresion_md: emd{:
            System.out.println("REGLA 5.1: expresion_sr -> esr RESTA esr");
            System.out.printf("REGLA 5.1: expresion_sr ->  %s - %s%n%n",esr,emd);
            RESULT = esr + "-" + emd;
        :}
        |
        expresion_md :emd{:
            System.out.println("REGLA 5.1: expresion_sr -> emd");
            System.out.printf("REGLA 5.1: expresion_sr ->  %s%n%n",emd);
            RESULT = emd;
        :};

expresion_md ::= expresion_md :emd MULTIPLICACION menos_unario:mu{:
            System.out.println("REGLA 5.2: expresion_md -> emd MULTIPLICACION mu");
            System.out.printf("REGLA 5.2: expresion_md -> %s * %s%n%n",emd,mu);
            RESULT = emd + "*" + mu ;
        :}
        |
        expresion_md :emd DIVISION menos_unario:mu{:
            System.out.println("REGLA 5.2: expresion_md -> emd DIVISION mu");
            System.out.printf("REGLA 5.2: expresion_md ->  %s / %s%n%n",emd,mu);
            RESULT = emd + "/" + mu ;
        :}
        |
        menos_unario:mu{:
            System.out.println("REGLA 5.2: expresion_md -> mu");
            System.out.printf("REGLA 5.2: expresion_md ->  %s%n%n",mu);
            RESULT = mu;
        :};

menos_unario ::= RESTA menos_unario:mu{:
            System.out.println("REGLA 5.3: menos_unario -> RESTA mu");
            System.out.printf("REGLA 5.3: menos_unario -> - %s%n%n",mu);
            RESULT = "-" + mu ;
        :}
        |
        factor:f {:
            System.out.println("REGLA 5.3: menos_unario -> f");
            System.out.printf("REGLA 5.3: menos_unario ->  %s%n%n",f);
            RESULT = f ;
        :};

factor ::= BOOLEAN_LITERAL:bl{:
            System.out.println("REGLA 5.4: factor -> bl");
            System.out.printf("REGLA 5.4: factor -> %s%n%n",bl);
            RESULT = bl;
        :}
        |
        INTEGER_LITERAL:il{:
            System.out.println("REGLA 5.4: factor -> il");
            System.out.printf("REGLA 5.4: factor ->  %s%n%n",il);
            RESULT = il;
        :}
        |
        FLOAT_LITERAL:fl{:
            System.out.println("REGLA 5.4: factor -> fl");
            System.out.printf("REGLA 5.4: factor -> %s%n%n",fl);
            RESULT = fl;
        :}
        |
        funcion_especial:fe{:
            System.out.println("REGLA 5.4: factor -> fe");
            System.out.printf("REGLA 5.4: factor -> %s%n%n",fe);
            RESULT = fe;
        :}
        |
        PARENTESISA expresion_or:eo PARENTESISC{:
            System.out.println("REGLA 5.4: factor -> PARENTESISA eo PARENTESISC");
            System.out.printf("REGLA 5.4: factor ->(%s) %n%n",eo);
            RESULT = "(" + eo + ")";
        :}
        |
        IDENTIFICADOR:id{:
            System.out.println("REGLA 5.4: factor -> id");
            System.out.printf("REGLA 5.4: factor ->  %s%n%n",id);
            RESULT = id;
        :};

funcion_especial ::= SUMAIMPAR:sim PARENTESISA INTEGER_LITERAL:il PUNTOCOMA CORCHETESA numeros_dentro_corchete:ndc CORCHETESC PARENTESISC{:
            System.out.println("REGLA 6: funcion_especial -> sim PARENTESISA il PUNTOCOMA CORCHETESA ndc CORCHETESC PARENTESISC");
            System.out.printf("REGLA 6: funcion_especial -> %s ( %s ; [%s])%n%n",sim,il,ndc);
            RESULT = sim + "(" + il + ";"+ "[" + ndc + "]" + ")";
        :};

numeros_dentro_corchete ::= numeros_dentro_corchete:ndc COMA INTEGER_LITERAL:il{:
            System.out.println("REGLA 6.1: numeros_dentro_corchete -> ndc COMA il");
            System.out.printf("REGLA 6.1: numeros_dentro_corchete -> %s , %s%n%n",ndc,il);
            RESULT = ndc + ","+ il;
        :}
        |
        INTEGER_LITERAL:il{:
            System.out.println("REGLA 6.1: factor -> il");
            System.out.printf("REGLA 6.1: factor ->  %s%n%n",il);
            RESULT = il ;
        :};

sentencia_while ::= WHILE PARENTESISA expresion_or:eo PARENTESISC DO bloque_sentencias:bs END{:
            System.out.println("REGLA 7: sentencia_while -> WHILE PARENTESISA eo PARENTESISC DO bs END");
            System.out.printf("REGLA 7: sentencia_while -> WHILE (%s)DO %s%n%n END",eo,bs);
            RESULT = "WHILE" + "("+ eo + ")"+"DO"+bs+"END";
        :};

sentencia_display ::= display:d {:
            System.out.println("REGLA 8: sentencia_display -> d ");
            System.out.printf("REGLA 8: sentencia_display -> %s%n%n",d);
            RESULT = d;
        :}
        |
        input:i {:
            System.out.println("REGLA 8: sentencia_display -> i ");
            System.out.printf("REGLA 8: sentencia_display -> %s%n%n",i);
            RESULT = i;
        :};

display ::= DISPLAY PARENTESISA STRING:str PARENTESISC{:
            System.out.println("REGLA 8.1: display -> DISPLAY PARENTESISA str PARENTESISC");
            System.out.printf("REGLA 8.1: display -> DISPLAY(%s) %n%n",str);
            RESULT = "DISPLAY" +"("+str+")";
        :}
        |
        DISPLAY PARENTESISA INTEGER_LITERAL:il PARENTESISC{:
            System.out.println("REGLA 8.1: display -> DISPLAY PARENTESISA il PARENTESISC");
            System.out.printf("REGLA 8.1: display -> DISPLAY(%s) %n%n",il);
            RESULT = "DISPLAY" +"("+il+")";
        :}
        |
        DISPLAY PARENTESISA FLOAT_LITERAL:fl PARENTESISC{:
            System.out.println("REGLA 8.1: display -> DISPLAY PARENTESISA fl PARENTESISC");
            System.out.printf("REGLA 8.1: display -> DISPLAY(%s) %n%n",fl);
            RESULT = "DISPLAY" +"("+fl+")";
        :}
        |
        DISPLAY PARENTESISA BOOLEAN_LITERAL:bl PARENTESISC{:
            System.out.println("REGLA 8.1: display -> DISPLAY PARENTESISA bl PARENTESISC");
            System.out.printf("REGLA 8.1: display -> DISPLAY(%s) %n%n",bl);
            RESULT = "DISPLAY" +"("+bl+")";
        :};

input ::= input_int:ii {:
            System.out.println("REGLA 8.2: input -> ii ");
            System.out.printf("REGLA 8.2: input -> %s%n%n",ii);
            RESULT = ii;
        :}
        |
        input_float:ifl {:
            System.out.println("REGLA 8.2: input -> ifl ");
            System.out.printf("REGLA 8.2: input -> %s%n%n",ifl);
            RESULT = ifl;
        :}
        |
        input_bool:ib {:
            System.out.println("REGLA 8.2: input -> ib ");
            System.out.printf("REGLA 8.2: input -> %s%n%n",ib);
            RESULT = ib;
        :};

input_int ::= INPUT_INT PARENTESISA INTEGER_LITERAL:il PARENTESISC {:
            System.out.println("REGLA 8.3: input_int -> INPUT_INT PARENTESISA il PARENTESISC ");
            System.out.printf("REGLA 8.3: input_int -> INTPUT_INT (%s)%n%n",il);
            RESULT = "INPUT_INT"+"("+ il +")";
        :}
        |
        INPUT_INT PARENTESISA IDENTIFICADOR:id PARENTESISC {:
            System.out.println("REGLA 8.3: input_int -> INPUT_INT PARENTESISA id PARENTESISC ");
            System.out.printf("REGLA 8.3: input_int -> INTPUT_INT (%s)%n%n",id);
            RESULT = "INPUT_INT"+"("+ id +")";
        :};

input_float ::= INPUT_FLOAT PARENTESISA FLOAT_LITERAL:fl PARENTESISC {:
            System.out.println("REGLA 8.4: input_float -> INPUT_FLOAT PARENTESISA fl PARENTESISC ");
            System.out.printf("REGLA 8.4: input_float -> INTPUT_FLOAT (%s)%n%n",fl);
            RESULT = "INPUT_FLOAT"+"("+ fl +")";
        :}
        |
        INPUT_FLOAT PARENTESISA IDENTIFICADOR:id PARENTESISC {:
            System.out.println("REGLA 8.4: input_float -> INPUT_FLOAT PARENTESISA id PARENTESISC ");
            System.out.printf("REGLA 8.4: input_float -> INTPUT_FLOAT (%s)%n%n",id);
            RESULT = "INPUT_FLOAT"+"("+ id +")";
        :};

input_bool ::= INPUT_BOOL PARENTESISA BOOLEAN_LITERAL:bl PARENTESISC {:
            System.out.println("REGLA 8.5: input_bool -> INPUT_BOOL PARENTESISA bl PARENTESISC ");
            System.out.printf("REGLA 8.5: input_bool -> INTPUT_BOOL (%s)%n%n",bl);
            RESULT = "INPUT_BOOL"+"("+ bl +")";
        :}
        |
        INPUT_BOOL PARENTESISA IDENTIFICADOR:id PARENTESISC {:
            System.out.println("REGLA 8.5: input_bool -> INPUT_BOOL PARENTESISA id PARENTESISC ");
            System.out.printf("REGLA 8.5: input_bool -> INTPUT_BOOL (%s)%n%n",id);
            RESULT = "INPUT_BOOL"+"("+ id +")";
        :};

sentencia_if ::= IF PARENTESISA expresion_or:eo PARENTESISC THEN bloque_sentencias:bs END{:
            System.out.println("REGLA 9: sentencia_if -> IF PARENTESISA eo PARENTESISC THEN bs END");
            System.out.printf("REGLA 9: sentencia_if -> IF (%s)THEN %s%n%n END",eo,bs);
            RESULT = "IF" + "("+ eo + ")"+"THEN"+bs+"END";
        :}
        |
        IF PARENTESISA expresion_or:eo PARENTESISC THEN bloque_sentencias:bs1 ELSE bloque_sentencias:bs2 END{:
            System.out.println("REGLA 9: sentencia_if -> IF PARENTESISA eo PARENTESISC THEN bs1 ELSE bs2 END");
            System.out.printf("REGLA 9: sentencia_if -> IF (%s)THEN %s%n%n ELSE %s%n%n END",eo,bs1,bs2);
            RESULT = "IF" + "("+ eo + ")"+"THEN"+bs1+"ELSE"+bs2+"END";
        :};