package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.expresiones.*;
import compilador.ast.expresiones.binarias.*;
import compilador.ast.expresiones.factor.*;
import compilador.ast.expresiones.unarias.*;
import compilador.ast.sentencias.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.util.*;


class MiParser;


parser code
{:
    public Hashtable ht = new Hashtable();
    public void tabla_simbolos(Hashtable ht){
            ht.forEach((k, v) -> {  
            System.out.println("Tabla de simbolos: " + k.toString() + " " + v.toString());
        });
            
    }
    
    public void syntax_error(Symbol s){
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public NombreIncremental ni = new NombreIncremental(); 
    public String incrementar() {
        return ni.incrementar().toString();
    }

    public ArrayList<String> variablesString = new ArrayList<>();

:};


terminal SUMA, RESTA, MULTIPLICACION, DIVISION,IGUAL, IGUAL_IGUAL, DESIGUAL, MAYOR, MAYOR_IGUAL, MENOR,
MENOR_IGUAL, PARENTESISA, PARENTESISC, CORCHETESA, CORCHETESC,  COMA, PUNTOCOMA, DOS_PUNTOS;

terminal String IDENTIFICADOR, SUMAIMPAR, INTEGER, FLOAT, BOOLEAN, STRING_LITERAL,
INPUT_INT, INPUT_FLOAT, INPUT_BOOL, AND, OR, NOT, WHILE, DO, END,IF, THEN, ELSE, DISPLAY, DECLARE_SECTION, 
ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION;
terminal String BOOLEAN_LITERAL;
terminal String INTEGER_LITERAL;
terminal String FLOAT_LITERAL;

nonterminal Sentencia sentencia_while, sentencia_if,display;
nonterminal Expresion comparacion,expresion_or, expresion_md,expresion_and,expresion_not,menos_unario,input;
nonterminal ArrayList<Expresion> lista_expresiones;
nonterminal Expresion expresion_sr;
nonterminal Expresion funcion_especial;
nonterminal Asignacion sentencia_asignacion;
nonterminal Sentencia sentencia_display;
nonterminal ProgramaCompleto programa;
nonterminal Bloque bloque_declaraciones;
nonterminal ArrayList<ArrayList<Declaracion>> declaraciones;
nonterminal ArrayList<Declaracion> declaracion;
nonterminal Programa bloque_programa;
nonterminal ArrayList<Sentencia> bloque_sentencias;
nonterminal Sentencia sentencia;
nonterminal Constante constante;
nonterminal Expresion factor;

nonterminal List<String>  tipos_datos_id;

start with programa;

programa ::= bloque_declaraciones:bd bloque_programa: bp{:
            RESULT = new ProgramaCompleto(bd,bp,ht, variablesString);
        :}
        |
        bloque_declaraciones:bd {:
            RESULT = new ProgramaCompleto(bd,ht, variablesString);
        :}
        |
        bloque_programa: bp{:
            RESULT = new ProgramaCompleto(bp,ht, variablesString);
        :};

bloque_declaraciones ::= DECLARE_SECTION declaraciones:d ENDDECLARE_SECTION{:
            ArrayList<Sentencia> declaracionesFinales = new ArrayList<>();
            for(ArrayList<Declaracion> declaracion : d){
                for(Declaracion dec : declaracion){
                    declaracionesFinales.add(dec);
                }
            }
            RESULT = new Bloque(declaracionesFinales);
        :};

declaraciones ::= declaracion:dec declaraciones:decs{:
            decs.add(dec);
            RESULT = decs;
        :}
        |
        declaracion:dec{:
            ArrayList<ArrayList<Declaracion>> declaraciones = new ArrayList<>();
            declaraciones.add(dec);
            RESULT = declaraciones;
        :};


declaracion ::= FLOAT DOS_PUNTOS tipos_datos_id:tdi PUNTOCOMA{:
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"FLOAT");
                declaraciones.add(new Declaracion(Tipo.FLOAT, new Identificador(i, Tipo.FLOAT)));
            }
            RESULT = declaraciones;
        :}
        | 
        INTEGER DOS_PUNTOS tipos_datos_id:tdi PUNTOCOMA{:
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"INTEGER");
                declaraciones.add(new Declaracion(Tipo.INTEGER, new Identificador(i, Tipo.INTEGER)));
            }
            RESULT = declaraciones;
        :}
        | 
        BOOLEAN DOS_PUNTOS tipos_datos_id:tdi PUNTOCOMA{:
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"BOOLEAN");
                declaraciones.add(new Declaracion(Tipo.BOOLEAN, new Identificador(i, Tipo.BOOLEAN)));
            }
            RESULT = declaraciones;
        :};

tipos_datos_id ::= IDENTIFICADOR:id{:
            List<String> ident = new ArrayList<String>();
            ident.add(id);
            RESULT = ident;
        :}
        |
        tipos_datos_id: tdi COMA IDENTIFICADOR:id {:
            tdi.add(id);
            RESULT = tdi;

        :};

bloque_programa ::= PROGRAM_SECTION bloque_sentencias:bs ENDPROGRAM_SECTION{:
            RESULT = new Programa(bs);
        :};

bloque_sentencias ::= bloque_sentencias:bs sentencia:s {:
            bs.add(s);
            RESULT =bs;
        :}
        | 
        sentencia:s {:
            ArrayList<Sentencia> sentencias = new ArrayList<>();
            sentencias.add(s);
            RESULT = sentencias;
        :};  

sentencia ::= sentencia_while: sw{:
            RESULT = sw;
        :}
        |
        sentencia_if: si{:
            RESULT = si;
        :}
        |
        sentencia_asignacion: sa{:
            RESULT = sa;
        :}
        |   
        sentencia_display: sd{:
            RESULT = sd;
        :};

sentencia_asignacion ::= IDENTIFICADOR:id IGUAL expresion_or: eo {:
            Object valueId = ht.get(id);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + id);
            } 
            if(valueId.toString() == "INTEGER"){
                RESULT = new Asignacion(new Identificador(id, Tipo.INTEGER),eo) ;
            }
            else if(valueId.toString() == "BOOLEAN"){
                RESULT = new Asignacion(new Identificador(id, Tipo.BOOLEAN),eo) ;
            }
            else if(valueId.toString() == "FLOAT"){
                if(eo.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(eo);
                    RESULT = new Asignacion(new Identificador(id, Tipo.FLOAT),flotante) ;
                }
                else{
                    RESULT = new Asignacion(new Identificador(id, Tipo.FLOAT),eo) ;
                }
            }
            else{
                RESULT = new Asignacion(new Identificador(id, Tipo.UNKNOWN),eo) ;
            }
        :}|
        IDENTIFICADOR:id IGUAL input: fe {:
            Identificador nodoId;
            Object valueId = ht.get(id);            
            if(valueId == null) {
                throw new Error("No se encuentra el id en tabla de simbolos : " + id);
            } 
            if(valueId.toString() == "INTEGER"){
                nodoId = new Identificador(id, Tipo.INTEGER);
            }
            else if(valueId.toString() == "BOOLEAN"){
                nodoId = new Identificador(id, Tipo.BOOLEAN);
            }
            else if(valueId.toString() == "FLOAT"){
                nodoId = new Identificador(id, Tipo.FLOAT);
            }
            else{
                nodoId = new Identificador(id, Tipo.UNKNOWN);
            }
            RESULT = new Asignacion(nodoId, fe);
        :};

expresion_or ::= expresion_or: eo OR expresion_and :ea{:
            RESULT =new Conjuncion(eo,ea) ;
        :}
        |
        expresion_and :ea{:
            RESULT = ea;
        :};

expresion_and ::= expresion_and: ea AND expresion_not :en{:
            RESULT = new Disyuncion(ea,en);
        :}
        |
        expresion_not :en{:
            RESULT = en;
        :};

expresion_not ::= NOT expresion_not :en{:
            RESULT =new NegacionLogica(en);
        :}
        |
        comparacion:c{:
            RESULT = c;
        :};

comparacion ::= expresion_sr :esr1 MAYOR expresion_sr: esr2{:
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Mayor(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Mayor(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Mayor(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Mayor(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr1 MAYOR_IGUAL expresion_sr: esr2{:
                if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new MayorIgual(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new MayorIgual(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new MayorIgual(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new MayorIgual(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr1 MENOR expresion_sr: esr2{:
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Menor(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Menor(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Menor(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Menor(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr1 MENOR_IGUAL expresion_sr: esr2{:
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new MenorIgual(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new MenorIgual(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new MenorIgual(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new MenorIgual(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr1 IGUAL_IGUAL expresion_sr: esr2{:
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Igualdad(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Igualdad(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Igualdad(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Igualdad(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr1 DESIGUAL expresion_sr: esr2{:
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Desigualdad(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Desigualdad(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Desigualdad(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Desigualdad(esr1,esr2);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr1.getTipo().toString()+" y una variable de tipo "+esr2.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr{:
            RESULT = esr;
        :};

expresion_sr ::= expresion_sr :esr SUMA expresion_md: emd{:
            if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.INTEGER){
                    RESULT = new Suma(esr,emd , Tipo.INTEGER);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Suma(esr,flotante, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr);
                    RESULT = new Suma(flotante,emd, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.FLOAT){
                    RESULT = new Suma(esr,emd, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr.getTipo().toString()+" y una variable de tipo "+emd.getTipo().toString());
                }
        :}
        |
        expresion_sr :esr RESTA expresion_md: emd{:
                if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.INTEGER){
                    RESULT = new Resta(esr,emd , Tipo.INTEGER);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Resta(esr,flotante, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr);
                    RESULT = new Resta(flotante,emd, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.FLOAT){
                    RESULT = new Resta(esr,emd, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr.getTipo().toString()+" y una variable de tipo "+emd.getTipo().toString());
                }
        :}
        |
        expresion_md :emd{:
            RESULT = emd;
        :};

expresion_md ::= expresion_md :emd MULTIPLICACION menos_unario:mu{:
            if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.INTEGER){
                    RESULT = new Multiplicacion(emd,mu, Tipo.INTEGER);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(mu);
                    RESULT = new Multiplicacion(emd,flotante, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Multiplicacion(flotante,mu, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.FLOAT){
                    RESULT = new Multiplicacion(emd,mu, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede multiplicar entre una variable de tipo "+emd.getTipo().toString()+" y una variable de tipo "+mu.getTipo().toString());
                }
        :}
        |
        expresion_md :emd DIVISION menos_unario:mu{:
            if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.INTEGER){
                    RESULT = new Division(emd,mu, Tipo.INTEGER);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(mu);
                    RESULT = new Division(emd,flotante, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Division(flotante,mu, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.FLOAT){
                    RESULT = new Division(emd,mu, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede dividir entre una variable de tipo "+emd.getTipo().toString()+" y una variable de tipo "+mu.getTipo().toString());
                }
        :}
        |
        menos_unario:mu{:
            RESULT = mu;
        :};

menos_unario ::= RESTA menos_unario:mu{:
            if(mu.getTipo() == Tipo.INTEGER){
                RESULT =  new NegacionAritmetica(mu,"sub",Tipo.INTEGER);
            }else if(mu.getTipo() == Tipo.FLOAT){
                RESULT =  new NegacionAritmetica(mu,"fsub",Tipo.FLOAT);
            }
            else{
                throw new Exception("No se puede negar una variable de tipo "+mu.getTipo().toString());
            }
        :}
        |
        factor:f {:
            RESULT = f ;
        :};

factor ::= constante: c{:
            RESULT = c;
        :}
        |
        funcion_especial:fe{:
            RESULT = fe;
        :}
        |
        PARENTESISA expresion_or:eo PARENTESISC{:
            RESULT = eo ;
        :};

constante::= BOOLEAN_LITERAL:bl{:
            RESULT = new Booleano(Boolean.parseBoolean(bl));
        :}
        |
        INTEGER_LITERAL:il{:
            RESULT = new Entero(Integer.parseInt(il));
        :}
        |
        FLOAT_LITERAL:fl{:
            RESULT = new Flotante(Float.parseFloat(fl));
        :}
        |
        IDENTIFICADOR:id{:
            Object valueId = ht.get(id);            
            if(valueId == null) {
                throw new Error("No se encuentra el id en tabla de simbolos : " + id);
            } 
            if(valueId.toString() == "INTEGER"){
                RESULT = new Identificador(id, Tipo.INTEGER);
            }
            else if(valueId.toString() == "BOOLEAN"){
                RESULT = new Identificador(id, Tipo.BOOLEAN);
            }
            else if(valueId.toString() == "FLOAT"){
                RESULT = new Identificador(id, Tipo.FLOAT);
            }
            else{
                RESULT = new Identificador(id, Tipo.UNKNOWN);
            }
        :};

funcion_especial ::= SUMAIMPAR:sim PARENTESISA INTEGER_LITERAL:il PUNTOCOMA CORCHETESA lista_expresiones:le CORCHETESC PARENTESISC{:
            String nombreId = incrementar();
            String nombreAux = "_aux"+nombreId;
            String nombreSuma = "_suma"+nombreId;
            String nombreTemp = "_temp"+nombreId;
            ht.put(nombreAux, Tipo.INTEGER);
            ht.put(nombreSuma, Tipo.INTEGER);
            ht.put(nombreTemp, Tipo.INTEGER);
            
            ArrayList<Sentencia> then1 = new ArrayList<>();
            ArrayList<Sentencia> else1 = new ArrayList<>();
            Igualdad condicionListaVacia = new Igualdad(new Entero(le.size()), new Entero(0));
            StringLiteral str = new StringLiteral("La lista esta vacia");
            variablesString.add(str.generarCodigo());
            Display listaVacia = new Display(str, str.getValor().length());
            then1.add(listaVacia);


            ArrayList<Sentencia> then2 = new ArrayList<>();
            ArrayList<Sentencia> else2 = new ArrayList<>();
            MenorIgual condicionPivotNegativo = new MenorIgual(new Entero(Integer.parseInt(il)), new Entero(0));

            StringLiteral str2 = new StringLiteral("El valor debe ser >=1");
            variablesString.add(str2.generarCodigo());
            Display pivotNegativo = new Display(str2, str2.getValor().length());
            then2.add(pivotNegativo);


            ArrayList<Sentencia> then3 = new ArrayList<>();
            ArrayList<Sentencia> else3 = new ArrayList<>();
            Mayor condicionPivotSize = new Mayor(new Entero(Integer.parseInt(il)), new Entero(le.size()));

            StringLiteral str3 = new StringLiteral("La lista tiene menos elementos que el indicado");
            variablesString.add(str3.generarCodigo());
            Display pivotSize = new Display(str3, str3.getValor().length());
            then3.add(pivotSize);


            for(Expresion elemento : le){
                if(elemento.getTipo() != Tipo.INTEGER){
                    throw new Exception("El identificador no es una variable de tipo entero");
                }


                MenorIgual cantidadContada = new MenorIgual(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
                
                Asignacion elementoTemp = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER), elemento);
                
                
                Mayor condicionWhile = new Mayor(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(1));
                ArrayList<Sentencia> thenWhile = new ArrayList<>();
                Asignacion asignacionWhile = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER),new Resta(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(2), Tipo.INTEGER));
                thenWhile.add(asignacionWhile);
                Mientras whileInterno = new Mientras(condicionWhile, new Bloque(thenWhile));

                Igualdad condicionFor = new Igualdad(new Identificador(nombreTemp, Tipo.INTEGER), new Entero(1));
                
                ArrayList<Sentencia> thenFor = new ArrayList<>();   
                Expresion elemento2 = elemento.clonar();
                Suma sumaFor = new Suma(new Identificador(nombreSuma, Tipo.INTEGER), elemento2, Tipo.INTEGER);
                Asignacion asignacion = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), sumaFor);
                thenFor.add(asignacion);
                Suma sumaAux = new Suma(new Identificador(nombreAux, Tipo.INTEGER), new Entero(1), Tipo.INTEGER);
                Asignacion asignacionAux = new Asignacion(new Identificador(nombreAux, Tipo.INTEGER), sumaAux);
                thenFor.add(asignacionAux);
                SiEntonces nodoIfImpar = new SiEntonces(condicionFor, new Bloque(thenFor));

                ArrayList<Sentencia> thenFor2 = new ArrayList<>();
                thenFor2.add(elementoTemp);
                thenFor2.add(whileInterno);
                thenFor2.add(nodoIfImpar);

                SiEntonces nodoIf = new SiEntonces(cantidadContada, new Bloque(thenFor2));
                else3.add(nodoIf);
            }

            Menor condicionUltimo = new Menor(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
            ArrayList<Sentencia> thenUltimo = new ArrayList<>();
            StringLiteral str4 = new StringLiteral("No existen suficientes elementos impares para el calculo");
            variablesString.add(str4.generarCodigo());
            Display displayUltimo = new Display(str4, str4.getValor().length());
            Asignacion sumaUltimo = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), new Entero(0));
            thenUltimo.add(displayUltimo);
            thenUltimo.add(sumaUltimo);
            SiEntonces ifUltimo = new SiEntonces(condicionUltimo, new Bloque(thenUltimo));
            else3.add(ifUltimo);

            SiEntonces if3 = new SiEntonces(condicionPivotSize, new Bloque(then3), new Bloque(else3));
            else2.add(if3);
            
            SiEntonces if2 = new SiEntonces(condicionPivotNegativo, new Bloque(then2), new Bloque(else2));
            else1.add(if2);

            SiEntonces if1 = new SiEntonces(condicionListaVacia, new Bloque(then1), new Bloque(else1));
            ArrayList<Sentencia> lista1 = new ArrayList<>();
            lista1.add(if1);

            RESULT = new SumaImpar(new Entero(Integer.parseInt(il)), lista1, nombreAux, nombreSuma, new Asignacion(new Identificador(nombreAux, Tipo.INTEGER),new Entero(1)), new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER),new Entero(0)));
        
        :}
        |        
        SUMAIMPAR:sim PARENTESISA IDENTIFICADOR:il PUNTOCOMA CORCHETESA lista_expresiones:le CORCHETESC PARENTESISC{:
            String nombreId = incrementar();
            String nombreAux = "_aux"+nombreId;
            String nombreSuma = "_suma"+nombreId;
            String nombreTemp = "_temp"+nombreId;
            ht.put(nombreAux, Tipo.INTEGER);
            ht.put(nombreSuma, Tipo.INTEGER);
            ht.put(nombreTemp, Tipo.INTEGER);

            ArrayList<Sentencia> then1 = new ArrayList<>();
            ArrayList<Sentencia> else1 = new ArrayList<>();
            Igualdad condicionListaVacia = new Igualdad(new Entero(le.size()), new Entero(0));

            StringLiteral str = new StringLiteral("La lista esta vacia");
            variablesString.add(str.generarCodigo());
            Display listaVacia = new Display(str, str.getValor().length());
            then1.add(listaVacia);


            ArrayList<Sentencia> then2 = new ArrayList<>();
            ArrayList<Sentencia> else2 = new ArrayList<>();
            MenorIgual condicionPivotNegativo = new MenorIgual(new Entero(Integer.parseInt(il)), new Entero(0));

            StringLiteral str2 = new StringLiteral("El valor debe ser >=1");
            variablesString.add(str2.generarCodigo());
            Display pivotNegativo = new Display(str2, str2.getValor().length());
            then2.add(pivotNegativo);


            ArrayList<Sentencia> then3 = new ArrayList<>();
            ArrayList<Sentencia> else3 = new ArrayList<>();
            Mayor condicionPivotSize = new Mayor(new Entero(Integer.parseInt(il)), new Entero(le.size()));

            StringLiteral str3 = new StringLiteral("La lista tiene menos elementos que el indicado");
            variablesString.add(str3.generarCodigo());
            Display pivotSize = new Display(str3, str3.getValor().length());
            then3.add(pivotSize);


            for(Expresion elemento : le){
                if(elemento.getTipo() != Tipo.INTEGER){
                    throw new Exception("El identificador no es una variable de tipo entero");
                }


                MenorIgual cantidadContada = new MenorIgual(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
                
                Asignacion elementoTemp = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER), elemento);
                
                
                Mayor condicionWhile = new Mayor(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(1));
                ArrayList<Sentencia> thenWhile = new ArrayList<>();
                Asignacion asignacionWhile = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER),new Resta(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(2), Tipo.INTEGER));
                thenWhile.add(asignacionWhile);
                Mientras whileInterno = new Mientras(condicionWhile, new Bloque(thenWhile));

                Igualdad condicionFor = new Igualdad(new Identificador(nombreTemp, Tipo.INTEGER), new Entero(1));
                
                ArrayList<Sentencia> thenFor = new ArrayList<>();   
                Expresion elemento2 = elemento.clonar();
                Suma sumaFor = new Suma(new Identificador(nombreSuma, Tipo.INTEGER), elemento2, Tipo.INTEGER);
                Asignacion asignacion = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), sumaFor);
                thenFor.add(asignacion);
                Suma sumaAux = new Suma(new Identificador(nombreAux, Tipo.INTEGER), new Entero(1), Tipo.INTEGER);
                Asignacion asignacionAux = new Asignacion(new Identificador(nombreAux, Tipo.INTEGER), sumaAux);
                thenFor.add(asignacionAux);
                SiEntonces nodoIfImpar = new SiEntonces(condicionFor, new Bloque(thenFor));

                ArrayList<Sentencia> thenFor2 = new ArrayList<>();
                thenFor2.add(elementoTemp);
                thenFor2.add(whileInterno);
                thenFor2.add(nodoIfImpar);

                SiEntonces nodoIf = new SiEntonces(cantidadContada, new Bloque(thenFor2));
                else3.add(nodoIf);
            }

            Menor condicionUltimo = new Menor(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
            ArrayList<Sentencia> thenUltimo = new ArrayList<>();
            StringLiteral str4= new StringLiteral("No existen suficientes elementos impares para el calculo");
            variablesString.add(str4.generarCodigo());
            Display displayUltimo = new Display(str4, str4.getValor().length());
            Asignacion sumaUltimo = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), new Entero(0));
            thenUltimo.add(displayUltimo);
            thenUltimo.add(sumaUltimo);
            SiEntonces ifUltimo = new SiEntonces(condicionUltimo, new Bloque(thenUltimo));
            else3.add(ifUltimo);

            SiEntonces if3 = new SiEntonces(condicionPivotSize, new Bloque(then3), new Bloque(else3));
            else2.add(if3);
            
            SiEntonces if2 = new SiEntonces(condicionPivotNegativo, new Bloque(then2), new Bloque(else2));
            else1.add(if2);

            SiEntonces if1 = new SiEntonces(condicionListaVacia, new Bloque(then1), new Bloque(else1));
            ArrayList<Sentencia> lista1 = new ArrayList<>();
            lista1.add(if1);

            Object valueId = ht.get(il);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + il);
            }
            if(valueId != Tipo.INTEGER.toString()){
                throw new Exception("El identificador no es una variable de tipo entero.");
            }
            RESULT = new SumaImpar(new Identificador(il, Tipo.INTEGER), lista1, nombreAux, nombreSuma, new Asignacion(new Identificador(nombreAux, Tipo.INTEGER),new Entero(1)), new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER),new Entero(0)));
        
        :}
        |
        SUMAIMPAR:sim PARENTESISA INTEGER_LITERAL:il PUNTOCOMA CORCHETESA CORCHETESC PARENTESISC{:
            ArrayList<Sentencia> sentenciaDisplay = new ArrayList<>();
            StringLiteral str = new StringLiteral("La lista esta vacia");
            variablesString.add(str.generarCodigo());
            Display displayListaVacia = new Display(str, str.getValor().length());
            sentenciaDisplay.add(displayListaVacia);
            RESULT = new SumaImpar(new Entero(Integer.parseInt(il)), sentenciaDisplay);
        :}
        |        
        SUMAIMPAR:sim PARENTESISA IDENTIFICADOR:il PUNTOCOMA CORCHETESA CORCHETESC PARENTESISC{:
            Object valueId = ht.get(il);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + il);
            }
            if(valueId != Tipo.INTEGER.toString()){
                throw new Exception("El identificador no es una variable de tipo entero.");
            }		
            ArrayList<Sentencia> sentenciaDisplay = new ArrayList<>();
            StringLiteral str = new StringLiteral("La lista esta vacia");
            variablesString.add(str.generarCodigo());
            Display displayListaVacia = new Display(str, str.getValor().length());
            sentenciaDisplay.add(displayListaVacia);
            RESULT = new SumaImpar(new Identificador(il, Tipo.INTEGER), sentenciaDisplay);        
        :};

lista_expresiones ::= lista_expresiones:le COMA expresion_sr:esr{:
            le.add(esr);
            RESULT = le;
        :}
        |
        expresion_sr:esr{:
            ArrayList<Expresion> expresiones = new ArrayList<>();
            expresiones.add(esr);
            RESULT = expresiones;
        :};

sentencia_while ::= WHILE PARENTESISA expresion_or:c PARENTESISC DO bloque_sentencias:bs END{:
            RESULT = new Mientras(c,new Bloque(bs));
        :};

sentencia_display ::= display:d {:
            RESULT = d;
        :};

display ::= DISPLAY PARENTESISA expresion_or:eo PARENTESISC{:
            RESULT = new Display(eo);
        :}
        |
         DISPLAY PARENTESISA STRING_LITERAL:sl PARENTESISC{:
            StringLiteral str = new StringLiteral(sl);
            variablesString.add(str.generarCodigo());
            RESULT = new Display(str, str.getValor().length());
        :}  ;

input ::= INPUT_INT PARENTESISA PARENTESISC {:
            RESULT = new Input(Tipo.INTEGER);
        :}
        |
        INPUT_FLOAT PARENTESISA PARENTESISC {:
            RESULT = new Input(Tipo.FLOAT);
        :}
        |
        INPUT_BOOL PARENTESISA PARENTESISC {:
            RESULT = new Input(Tipo.BOOLEAN);
        :};

sentencia_if ::= IF PARENTESISA expresion_or:eo PARENTESISC THEN bloque_sentencias:bs END{:
            RESULT = new SiEntonces(eo,new Bloque(bs));
        :}
        |
        IF PARENTESISA expresion_or:eo PARENTESISC THEN bloque_sentencias:bs1 ELSE bloque_sentencias:bs2 END{:
            RESULT = new SiEntonces(eo,new Bloque(bs1),new Bloque(bs2));
        :};