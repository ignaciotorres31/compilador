
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.expresiones.*;
import compilador.ast.expresiones.binarias.*;
import compilador.ast.expresiones.factor.*;
import compilador.ast.expresiones.unarias.*;
import compilador.ast.sentencias.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\034\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\005" +
    "\000\002\005\004\000\002\005\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\035\003\000\002" +
    "\035\005\000\002\004\005\000\002\007\004\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\013\005\000\002\013\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\003\000\002\020\004\000\002\020\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\004\000\002\024\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\003\000" +
    "\002\025\012\000\002\026\005\000\002\026\003\000\002" +
    "\026\002\000\002\011\011\000\002\014\003\000\002\014" +
    "\003\000\002\030\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\031\005\000\002\032\005\000" +
    "\002\033\005\000\002\012\011\000\002\012\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\053\011\055\006\001\002\000\006\002" +
    "\ufffe\055\006\001\002\000\004\002\000\001\002\000\020" +
    "\026\053\036\043\037\056\040\057\044\040\047\044\052" +
    "\055\001\002\000\004\002\ufffd\001\002\000\004\002\035" +
    "\001\002\000\010\033\012\034\016\035\015\001\002\000" +
    "\004\025\032\001\002\000\004\054\031\001\002\000\012" +
    "\033\012\034\016\035\015\054\ufffa\001\002\000\004\025" +
    "\025\001\002\000\004\025\017\001\002\000\004\026\021" +
    "\001\002\000\006\023\022\024\023\001\002\000\006\023" +
    "\ufff6\024\ufff6\001\002\000\004\026\024\001\002\000\012" +
    "\033\ufff9\034\ufff9\035\ufff9\054\ufff9\001\002\000\006\023" +
    "\ufff5\024\ufff5\001\002\000\004\026\021\001\002\000\006" +
    "\023\022\024\027\001\002\000\012\033\ufff7\034\ufff7\035" +
    "\ufff7\054\ufff7\001\002\000\004\054\ufffb\001\002\000\006" +
    "\002\ufffc\055\ufffc\001\002\000\004\026\021\001\002\000" +
    "\006\023\022\024\034\001\002\000\012\033\ufff8\034\ufff8" +
    "\035\ufff8\054\ufff8\001\002\000\004\002\001\001\002\000" +
    "\026\026\uffc8\036\uffc8\037\uffc8\040\uffc8\044\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\056\uffc8\001\002\000\026\026" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\044\uffc7\046\uffc7\047\uffc7" +
    "\051\uffc7\052\uffc7\056\uffc7\001\002\000\004\017\174\001" +
    "\002\000\026\026\ufff0\036\ufff0\037\ufff0\040\ufff0\044\ufff0" +
    "\046\ufff0\047\ufff0\051\ufff0\052\ufff0\056\ufff0\001\002\000" +
    "\022\026\053\036\043\037\056\040\057\044\040\047\044" +
    "\052\055\056\173\001\002\000\004\017\171\001\002\000" +
    "\004\017\157\001\002\000\026\026\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\044\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\056" +
    "\uffc9\001\002\000\026\026\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\044\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\056\uffcb\001" +
    "\002\000\026\026\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2" +
    "\046\ufff2\047\ufff2\051\ufff2\052\ufff2\056\ufff2\001\002\000" +
    "\026\026\uffee\036\uffee\037\uffee\040\uffee\044\uffee\046\uffee" +
    "\047\uffee\051\uffee\052\uffee\056\uffee\001\002\000\026\026" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\044\uffcc\046\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\056\uffcc\001\002\000\026\026\uffef\036" +
    "\uffef\037\uffef\040\uffef\044\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\056\uffef\001\002\000\004\010\141\001\002\000" +
    "\026\026\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\052\ufff1\056\ufff1\001\002\000\004\017" +
    "\064\001\002\000\004\017\062\001\002\000\004\017\060" +
    "\001\002\000\004\020\061\001\002\000\026\026\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\044\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\052\uffc4\056\uffc4\001\002\000\004\020\063\001\002\000" +
    "\026\026\uffc5\036\uffc5\037\uffc5\040\uffc5\044\uffc5\046\uffc5" +
    "\047\uffc5\051\uffc5\052\uffc5\056\uffc5\001\002\000\020\005" +
    "\100\017\070\026\102\027\066\030\103\031\076\043\077" +
    "\001\002\000\054\004\124\005\121\011\122\012\123\013" +
    "\126\014\130\015\125\016\127\020\uffdf\026\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\046\uffdf\047" +
    "\uffdf\051\uffdf\052\uffdf\056\uffdf\001\002\000\064\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6\023\uffd6\026\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\046" +
    "\uffd6\047\uffd6\051\uffd6\052\uffd6\056\uffd6\001\002\000\034" +
    "\020\uffe6\026\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\056\uffe6" +
    "\001\002\000\020\005\100\017\070\026\102\027\066\030" +
    "\103\031\076\043\077\001\002\000\034\020\uffe8\026\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\056\uffe8\001\002\000\006" +
    "\020\114\042\115\001\002\000\064\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\056\uffd9\001\002\000\034\020\uffea\026" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\112\042\uffea\044\uffea" +
    "\046\uffea\047\uffea\051\uffea\052\uffea\056\uffea\001\002\000" +
    "\064\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\056\uffd7\001" +
    "\002\000\064\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\022" +
    "\uffd4\023\uffd4\026\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\044\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\056" +
    "\uffd4\001\002\000\020\005\100\017\070\026\102\027\066" +
    "\030\103\031\076\043\077\001\002\000\016\005\100\017" +
    "\070\026\102\027\066\030\103\031\076\001\002\000\064" +
    "\004\uffdc\005\uffdc\006\104\007\105\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\022\uffdc\023\uffdc" +
    "\026\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\056\uffdc\001\002" +
    "\000\064\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\026\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\044\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\056\uffd2" +
    "\001\002\000\064\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\022\uffd5\023\uffd5\026\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\056\uffd5\001\002\000\016\005\100\017\070\026\102\027" +
    "\066\030\103\031\076\001\002\000\016\005\100\017\070" +
    "\026\102\027\066\030\103\031\076\001\002\000\064\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\020\uffda\022\uffda\023\uffda\026" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda" +
    "\046\uffda\047\uffda\051\uffda\052\uffda\056\uffda\001\002\000" +
    "\064\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\026\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\056\uffdb\001" +
    "\002\000\064\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022" +
    "\uffd8\023\uffd8\026\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\056" +
    "\uffd8\001\002\000\034\020\uffe7\026\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\044\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\052\uffe7\056\uffe7\001\002\000\020\005\100\017\070" +
    "\026\102\027\066\030\103\031\076\043\077\001\002\000" +
    "\034\020\uffe9\026\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\044\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\056" +
    "\uffe9\001\002\000\026\026\uffca\036\uffca\037\uffca\040\uffca" +
    "\044\uffca\046\uffca\047\uffca\051\uffca\052\uffca\056\uffca\001" +
    "\002\000\020\005\100\017\070\026\102\027\066\030\103" +
    "\031\076\043\077\001\002\000\034\020\uffeb\026\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\112\042\uffeb\044\uffeb\046\uffeb" +
    "\047\uffeb\051\uffeb\052\uffeb\056\uffeb\001\002\000\006\020" +
    "\120\042\115\001\002\000\064\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\026\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\044\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\052\uffd3\056\uffd3\001\002\000\016\005\100\017\070" +
    "\026\102\027\066\030\103\031\076\001\002\000\016\005" +
    "\100\017\070\026\102\027\066\030\103\031\076\001\002" +
    "\000\016\005\100\017\070\026\102\027\066\030\103\031" +
    "\076\001\002\000\016\005\100\017\070\026\102\027\066" +
    "\030\103\031\076\001\002\000\016\005\100\017\070\026" +
    "\102\027\066\030\103\031\076\001\002\000\016\005\100" +
    "\017\070\026\102\027\066\030\103\031\076\001\002\000" +
    "\016\005\100\017\070\026\102\027\066\030\103\031\076" +
    "\001\002\000\016\005\100\017\070\026\102\027\066\030" +
    "\103\031\076\001\002\000\040\004\124\005\121\020\uffe4" +
    "\026\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\056\uffe4\001\002" +
    "\000\040\004\124\005\121\020\uffe2\026\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\046\uffe2\047\uffe2" +
    "\051\uffe2\052\uffe2\056\uffe2\001\002\000\040\004\124\005" +
    "\121\020\uffe5\026\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\044\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\056" +
    "\uffe5\001\002\000\040\004\124\005\121\020\uffe3\026\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\046" +
    "\uffe3\047\uffe3\051\uffe3\052\uffe3\056\uffe3\001\002\000\064" +
    "\004\uffde\005\uffde\006\104\007\105\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\020\uffde\022\uffde\023\uffde" +
    "\026\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044" +
    "\uffde\046\uffde\047\uffde\051\uffde\052\uffde\056\uffde\001\002" +
    "\000\040\004\124\005\121\020\uffe0\026\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0" +
    "\051\uffe0\052\uffe0\056\uffe0\001\002\000\040\004\124\005" +
    "\121\020\uffe1\026\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\044\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\056" +
    "\uffe1\001\002\000\064\004\uffdd\005\uffdd\006\104\007\105" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020" +
    "\uffdd\022\uffdd\023\uffdd\026\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\046\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\056\uffdd\001\002\000\022\005\100\017\070\026\102" +
    "\027\066\030\103\031\076\032\144\043\077\001\002\000" +
    "\026\026\uffec\036\uffec\037\uffec\040\uffec\044\uffec\046\uffec" +
    "\047\uffec\051\uffec\052\uffec\056\uffec\001\002\000\030\026" +
    "\uffed\036\uffed\037\uffed\040\uffed\042\115\044\uffed\046\uffed" +
    "\047\uffed\051\uffed\052\uffed\056\uffed\001\002\000\004\017" +
    "\145\001\002\000\004\030\146\001\002\000\004\024\147" +
    "\001\002\000\004\021\150\001\002\000\022\005\100\017" +
    "\070\022\uffce\023\uffce\026\102\027\066\030\103\031\076" +
    "\001\002\000\012\004\124\005\121\022\uffcf\023\uffcf\001" +
    "\002\000\006\022\154\023\153\001\002\000\016\005\100" +
    "\017\070\026\102\027\066\030\103\031\076\001\002\000" +
    "\004\020\155\001\002\000\026\026\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\044\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\056" +
    "\uffd1\001\002\000\012\004\124\005\121\022\uffd0\023\uffd0" +
    "\001\002\000\020\005\100\017\070\026\102\027\066\030" +
    "\103\031\076\043\077\001\002\000\006\020\161\042\115" +
    "\001\002\000\004\050\162\001\002\000\020\026\053\036" +
    "\043\037\056\040\057\044\040\047\044\052\055\001\002" +
    "\000\024\026\053\036\043\037\056\040\057\044\040\046" +
    "\165\047\044\051\164\052\055\001\002\000\020\026\053" +
    "\036\043\037\056\040\057\044\040\047\044\052\055\001" +
    "\002\000\026\026\uffc3\036\uffc3\037\uffc3\040\uffc3\044\uffc3" +
    "\046\uffc3\047\uffc3\051\uffc3\052\uffc3\056\uffc3\001\002\000" +
    "\026\026\ufff3\036\ufff3\037\ufff3\040\ufff3\044\ufff3\046\ufff3" +
    "\047\ufff3\051\ufff3\052\ufff3\056\ufff3\001\002\000\022\026" +
    "\053\036\043\037\056\040\057\044\040\046\170\047\044" +
    "\052\055\001\002\000\026\026\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\044\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\056\uffc2" +
    "\001\002\000\004\020\172\001\002\000\026\026\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\044\uffc6\046\uffc6\047\uffc6\051\uffc6" +
    "\052\uffc6\056\uffc6\001\002\000\004\002\ufff4\001\002\000" +
    "\020\005\100\017\070\026\102\027\066\030\103\031\076" +
    "\043\077\001\002\000\006\020\176\042\115\001\002\000" +
    "\004\045\177\001\002\000\020\026\053\036\043\037\056" +
    "\040\057\044\040\047\044\052\055\001\002\000\022\026" +
    "\053\036\043\037\056\040\057\044\040\046\201\047\044" +
    "\052\055\001\002\000\026\026\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\044\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\056\uffcd" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\012\002\004\003\003\004\006\034\007\001" +
    "\001\000\004\004\201\001\001\000\002\001\001\000\030" +
    "\007\041\010\046\011\053\012\040\013\051\014\047\027" +
    "\045\030\050\031\044\032\035\033\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\012\006\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\027" +
    "\006\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\165\011\053\012\040\013\051" +
    "\014\047\027\045\030\050\031\044\032\035\033\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\074\016\071\017\073\020" +
    "\070\021\066\022\064\023\100\024\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\074\016\116\017\073\020\070\021\066\022\064\023\100" +
    "\024\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\074\020\110\021\066\022\064\023" +
    "\100\024\072\001\001\000\006\015\074\024\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\074\024\106\001\001\000\006\015\074\024\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\074\020\112\021\066" +
    "\022\064\023\100\024\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\074\017\115\020\070\021\066" +
    "\022\064\023\100\024\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\074\023\137" +
    "\024\072\001\001\000\012\015\074\022\136\023\100\024" +
    "\072\001\001\000\012\015\074\022\135\023\100\024\072" +
    "\001\001\000\010\015\074\023\134\024\072\001\001\000" +
    "\012\015\074\022\133\023\100\024\072\001\001\000\012" +
    "\015\074\022\132\023\100\024\072\001\001\000\012\015" +
    "\074\022\131\023\100\024\072\001\001\000\012\015\074" +
    "\022\130\023\100\024\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\074\016\142\017\073\020\070\021\066" +
    "\022\064\023\100\024\072\025\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\074\022" +
    "\150\023\100\024\072\026\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\074\022\155\023\100\024" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\074\016\157\017\073\020\070\021" +
    "\066\022\064\023\100\024\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\162\010\046\011\053\012" +
    "\040\013\051\014\047\027\045\030\050\031\044\032\035" +
    "\033\036\001\001\000\026\010\165\011\053\012\040\013" +
    "\051\014\047\027\045\030\050\031\044\032\035\033\036" +
    "\001\001\000\030\007\166\010\046\011\053\012\040\013" +
    "\051\014\047\027\045\030\050\031\044\032\035\033\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\165\011\053\012\040\013\051\014\047\027\045\030\050" +
    "\031\044\032\035\033\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\074\016\174\017\073\020\070\021\066\022\064\023" +
    "\100\024\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\177\010\046\011\053\012\040\013\051\014" +
    "\047\027\045\030\050\031\044\032\035\033\036\001\001" +
    "\000\026\010\165\011\053\012\040\013\051\014\047\027" +
    "\045\030\050\031\044\032\035\033\036\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Hashtable ht = new Hashtable();
    public void tabla_simbolos(Hashtable ht){
            ht.forEach((k, v) -> {  
            System.out.println("Tabla de simbolos: " + k.toString() + " " + v.toString());
        });
            
    }
    
    public void syntax_error(Symbol s){
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= impresion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // impresion ::= programa 
            {
              String RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String prog = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        RESULT = new Impresion(prog);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("impresion",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_declaraciones bloque_programa 
            {
              String RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String bp = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bd,bp);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= bloque_declaraciones 
            {
              String RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String bd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Bloque(bd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= bloque_programa 
            {
              String RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String bp = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Programa(bp);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_declaraciones ::= DECLARE_SECTION declaraciones ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = "DECLARE_SECTION" + d + "ENDDECLARE_SECTION";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion declaraciones 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = dec + decs;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = dec;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= FLOAT DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              String RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            for(String i : tdi){
                ht.put(i,f);}
            RESULT = Tipo.FLOAT +"DOS_PUNTOS"+ tdi +"PUNTOCOMA";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= INTEGER DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              String RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            for(String i : tdi){
                ht.put(i,in);}
            RESULT = Tipo.INTEGER +"DOS_PUNTOS"+ tdi +"PUNTOCOMA";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= BOOLEAN DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              String RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            for(String i : tdi){
                ht.put(i,b);}
            RESULT = Tipo.BOOLEAN +"DOS_PUNTOS"+ tdi +"PUNTOCOMA";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos_datos_id ::= IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            List<String> ident = new ArrayList<String>();
            ident.add(id);
            RESULT = ident;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos_datos_id ::= tipos_datos_id COMA IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            tdi.add(id);
            RESULT = tdi;

        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_programa ::= PROGRAM_SECTION bloque_sentencias ENDPROGRAM_SECTION 
            {
              String RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = "PROGRAM_SECTION" + bs + "ENDPROGRAM_SECTION";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_programa",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_sentencias ::= bloque_sentencias sentencia 
            {
              String RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =bs + s;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_sentencias ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_while 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sw;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_if 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = si;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_asignacion 
            {
              String RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sa = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_display 
            {
              String RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_asignacion ::= IDENTIFICADOR IGUAL expresion_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Asignacion(id,eo) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_asignacion ::= IDENTIFICADOR IGUAL funcion_especial 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Asignacion(id,fe) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_or ::= expresion_or OR expresion_and 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =new Conjuncion(eo,ea) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_or ::= expresion_and 
            {
              String RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ea;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_and ::= expresion_and AND expresion_not 
            {
              String RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Disyuncion(ea,en);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_and ::= expresion_not 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = en;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_not ::= NOT expresion_not 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =new NegacionLogica(en);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_not ::= comparacion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparacion ::= expresion_sr MAYOR expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Mayor(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion_sr MAYOR_IGUAL expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new MayorIgual(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion_sr MENOR expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Menor(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparacion ::= expresion_sr MENOR_IGUAL expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new MenorIgual(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion_sr IGUAL_IGUAL expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Igualdad(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= expresion_sr DESIGUAL expresion_sr 
            {
              String RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Desigualdad(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion_sr 
            {
              String RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = esr;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_sr ::= expresion_sr SUMA expresion_md 
            {
              String RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String emd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Suma(esr,emd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_sr ::= expresion_sr RESTA expresion_md 
            {
              String RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String esr = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String emd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Resta(esr,emd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_sr ::= expresion_md 
            {
              String RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String emd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = emd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_md ::= expresion_md MULTIPLICACION menos_unario 
            {
              String RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String emd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Multiplicacion(emd,mu);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_md ::= expresion_md DIVISION menos_unario 
            {
              String RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String emd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Division(emd,mu) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_md ::= menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = mu;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // menos_unario ::= RESTA menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =  new NegacionAritmetica(mu) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // menos_unario ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = f ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Booleano(bl);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Entero(il);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= FLOAT_LITERAL 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Flotante(fl);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= PARENTESISA expresion_or PARENTESISC 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = "(" + eo + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = id;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion_especial ::= SUMAIMPAR PARENTESISA INTEGER_LITERAL PUNTOCOMA CORCHETESA lista_expresiones CORCHETESC PARENTESISC 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            RESULT = sim + "(" + il + ";"+ "[" + le + "]" + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_expresiones ::= lista_expresiones COMA expresion_sr 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = le + ","+ esr;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_expresiones ::= expresion_sr 
            {
              String RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String esr = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = esr ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_expresiones ::= 
            {
              String RESULT =null;
		
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_while ::= WHILE PARENTESISA expresion_or PARENTESISC DO bloque_sentencias END 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Mientras(c,bs);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_display ::= display 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_display ::= input 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = i;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // display ::= DISPLAY PARENTESISA expresion_or PARENTESISC 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = "DISPLAY" +"("+eo+")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("display",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // input ::= input_int 
            {
              String RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ii;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // input ::= input_float 
            {
              String RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ifl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ifl;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // input ::= input_bool 
            {
              String RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ib = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ib;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // input_int ::= INPUT_INT PARENTESISA PARENTESISC 
            {
              String RESULT =null;
		
            RESULT = "INPUT_INT"+"(" +")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_int",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // input_float ::= INPUT_FLOAT PARENTESISA PARENTESISC 
            {
              String RESULT =null;
		
            RESULT = "INPUT_FLOAT"+"("+")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_float",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // input_bool ::= INPUT_BOOL PARENTESISA PARENTESISC 
            {
              String RESULT =null;
		
            RESULT = "INPUT_BOOL"+"("+")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_bool",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias END 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntonces("IF",eo,bs);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias ELSE bloque_sentencias END 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int bs1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		String bs1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String bs2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntoncesSino(eo,bs1,bs2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
