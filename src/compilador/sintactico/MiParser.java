
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.expresiones.*;
import compilador.ast.expresiones.binarias.*;
import compilador.ast.expresiones.factor.*;
import compilador.ast.expresiones.unarias.*;
import compilador.ast.sentencias.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.util.*;
import java.text.Normalizer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\021\004\000\002\021" +
    "\003\000\002\021\003\000\002\022\005\000\002\023\004" +
    "\000\002\023\003\000\002\024\006\000\002\024\006\000" +
    "\002\024\006\000\002\032\003\000\002\032\005\000\002" +
    "\025\005\000\002\026\004\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\017\005\000\002\006\005\000\002\006\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\004\000\002" +
    "\011\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\012\004\000\002\012\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\005\000\002\031\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\016\012\000\002\016\013\000\002" +
    "\016\012\000\002\016\011\000\002\016\011\000\002\014" +
    "\005\000\002\014\003\000\002\002\011\000\002\020\003" +
    "\000\002\004\006\000\002\004\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\003\011\000\002" +
    "\003\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\051\010\053\006\001\002\000\006\002" +
    "\uffff\053\006\001\002\000\004\002\221\001\002\000\012" +
    "\026\046\042\034\045\042\050\037\001\002\000\004\002" +
    "\ufffe\001\002\000\010\030\012\031\015\032\014\001\002" +
    "\000\004\052\033\001\002\000\004\025\030\001\002\000" +
    "\012\030\012\031\015\032\014\052\ufffb\001\002\000\004" +
    "\025\024\001\002\000\004\025\016\001\002\000\004\026" +
    "\020\001\002\000\006\023\021\024\022\001\002\000\006" +
    "\023\ufff7\024\ufff7\001\002\000\004\026\023\001\002\000" +
    "\012\030\ufffa\031\ufffa\032\ufffa\052\ufffa\001\002\000\006" +
    "\023\ufff6\024\ufff6\001\002\000\004\026\020\001\002\000" +
    "\006\023\021\024\026\001\002\000\012\030\ufff8\031\ufff8" +
    "\032\ufff8\052\ufff8\001\002\000\004\052\ufffc\001\002\000" +
    "\004\026\020\001\002\000\006\023\021\024\032\001\002" +
    "\000\012\030\ufff9\031\ufff9\032\ufff9\052\ufff9\001\002\000" +
    "\006\002\ufffd\053\ufffd\001\002\000\004\017\213\001\002" +
    "\000\020\026\ufff2\042\ufff2\044\ufff2\045\ufff2\047\ufff2\050" +
    "\ufff2\054\ufff2\001\002\000\020\026\ufff3\042\ufff3\044\ufff3" +
    "\045\ufff3\047\ufff3\050\ufff3\054\ufff3\001\002\000\004\017" +
    "\206\001\002\000\020\026\ufff0\042\ufff0\044\ufff0\045\ufff0" +
    "\047\ufff0\050\ufff0\054\ufff0\001\002\000\020\026\uffef\042" +
    "\uffef\044\uffef\045\uffef\047\uffef\050\uffef\054\uffef\001\002" +
    "\000\004\017\175\001\002\000\014\026\046\042\034\045" +
    "\042\050\037\054\173\001\002\000\020\026\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\001\002\000" +
    "\020\026\ufff1\042\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1" +
    "\054\ufff1\001\002\000\004\010\047\001\002\000\030\005" +
    "\075\017\072\026\066\027\055\034\054\035\071\036\074" +
    "\041\052\055\051\056\067\057\070\001\002\000\022\026" +
    "\uffee\040\103\042\uffee\044\uffee\045\uffee\047\uffee\050\uffee" +
    "\054\uffee\001\002\000\056\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\020\uffd4\022\uffd4\023\uffd4\026\uffd4\037\uffd4\040\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\054\uffd4\001\002" +
    "\000\030\005\075\017\072\026\066\027\055\034\054\035" +
    "\071\036\074\041\052\055\051\056\067\057\070\001\002" +
    "\000\056\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\037\uffd8\040\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\047\uffd8\050\uffd8\054\uffd8\001\002\000\004\017\170" +
    "\001\002\000\004\017\135\001\002\000\026\020\uffec\026" +
    "\uffec\037\105\040\uffec\042\uffec\044\uffec\045\uffec\047\uffec" +
    "\050\uffec\054\uffec\001\002\000\046\004\120\005\115\011" +
    "\116\012\117\013\122\014\124\015\121\016\123\020\uffe1" +
    "\026\uffe1\037\uffe1\040\uffe1\042\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\050\uffe1\054\uffe1\001\002\000\056\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\022\uffd5\023\uffd5\026\uffd5\037\uffd5" +
    "\040\uffd5\042\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054" +
    "\uffd5\001\002\000\056\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\026\uffdb\037\uffdb\040\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb\001\002\000" +
    "\056\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\023" +
    "\uffd9\026\uffd9\037\uffd9\040\uffd9\042\uffd9\044\uffd9\045\uffd9" +
    "\047\uffd9\050\uffd9\054\uffd9\001\002\000\026\020\uffea\026" +
    "\uffea\037\uffea\040\uffea\042\uffea\044\uffea\045\uffea\047\uffea" +
    "\050\uffea\054\uffea\001\002\000\056\004\uffde\005\uffde\006" +
    "\111\007\112\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\020\uffde\022\uffde\023\uffde\026\uffde\037\uffde\040" +
    "\uffde\042\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde" +
    "\001\002\000\026\020\uffe8\026\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\054\uffe8\001\002" +
    "\000\056\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\022\uffd1" +
    "\023\uffd1\026\uffd1\037\uffd1\040\uffd1\042\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\054\uffd1\001\002\000\056\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\022\uffd3\023\uffd3\026\uffd3" +
    "\037\uffd3\040\uffd3\042\uffd3\044\uffd3\045\uffd3\047\uffd3\050" +
    "\uffd3\054\uffd3\001\002\000\056\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\020\uffd2\022\uffd2\023\uffd2\026\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\054\uffd2\001" +
    "\002\000\004\017\107\001\002\000\030\005\075\017\072" +
    "\026\066\027\055\034\054\035\071\036\074\041\052\055" +
    "\051\056\067\057\070\001\002\000\056\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\020\uffd7\022\uffd7\023\uffd7\026\uffd7\037\uffd7" +
    "\040\uffd7\042\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054" +
    "\uffd7\001\002\000\004\017\077\001\002\000\026\005\075" +
    "\017\072\026\066\027\055\034\054\035\071\036\074\055" +
    "\051\056\067\057\070\001\002\000\056\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\020\uffda\022\uffda\023\uffda\026\uffda\037\uffda" +
    "\040\uffda\042\uffda\044\uffda\045\uffda\047\uffda\050\uffda\054" +
    "\uffda\001\002\000\004\020\100\001\002\000\056\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\023\uffc3\026\uffc3" +
    "\037\uffc3\040\uffc3\042\uffc3\044\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\054\uffc3\001\002\000\006\020\102\040\103\001\002" +
    "\000\056\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6" +
    "\023\uffd6\026\uffd6\037\uffd6\040\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\054\uffd6\001\002\000\030\005\075" +
    "\017\072\026\066\027\055\034\054\035\071\036\074\041" +
    "\052\055\051\056\067\057\070\001\002\000\026\020\uffed" +
    "\026\uffed\037\105\040\uffed\042\uffed\044\uffed\045\uffed\047" +
    "\uffed\050\uffed\054\uffed\001\002\000\030\005\075\017\072" +
    "\026\066\027\055\034\054\035\071\036\074\041\052\055" +
    "\051\056\067\057\070\001\002\000\026\020\uffeb\026\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\054\uffeb\001\002\000\004\020\110\001\002\000\056" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\023\uffc4" +
    "\026\uffc4\037\uffc4\040\uffc4\042\uffc4\044\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\054\uffc4\001\002\000\026\005\075\017\072" +
    "\026\066\027\055\034\054\035\071\036\074\055\051\056" +
    "\067\057\070\001\002\000\026\005\075\017\072\026\066" +
    "\027\055\034\054\035\071\036\074\055\051\056\067\057" +
    "\070\001\002\000\056\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\026\uffdc\037\uffdc\040\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\001\002\000" +
    "\056\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\037\uffdd\040\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\001\002\000\026\005\075\017" +
    "\072\026\066\027\055\034\054\035\071\036\074\055\051" +
    "\056\067\057\070\001\002\000\026\005\075\017\072\026" +
    "\066\027\055\034\054\035\071\036\074\055\051\056\067" +
    "\057\070\001\002\000\026\005\075\017\072\026\066\027" +
    "\055\034\054\035\071\036\074\055\051\056\067\057\070" +
    "\001\002\000\026\005\075\017\072\026\066\027\055\034" +
    "\054\035\071\036\074\055\051\056\067\057\070\001\002" +
    "\000\026\005\075\017\072\026\066\027\055\034\054\035" +
    "\071\036\074\055\051\056\067\057\070\001\002\000\026" +
    "\005\075\017\072\026\066\027\055\034\054\035\071\036" +
    "\074\055\051\056\067\057\070\001\002\000\026\005\075" +
    "\017\072\026\066\027\055\034\054\035\071\036\074\055" +
    "\051\056\067\057\070\001\002\000\026\005\075\017\072" +
    "\026\066\027\055\034\054\035\071\036\074\055\051\056" +
    "\067\057\070\001\002\000\032\004\120\005\115\020\uffe6" +
    "\026\uffe6\037\uffe6\040\uffe6\042\uffe6\044\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\054\uffe6\001\002\000\032\004\120\005\115" +
    "\020\uffe4\026\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4\045" +
    "\uffe4\047\uffe4\050\uffe4\054\uffe4\001\002\000\032\004\120" +
    "\005\115\020\uffe7\026\uffe7\037\uffe7\040\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\001\002\000\032" +
    "\004\120\005\115\020\uffe5\026\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054\uffe5\001\002" +
    "\000\056\004\uffe0\005\uffe0\006\111\007\112\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\037\uffe0\040\uffe0\042\uffe0\044\uffe0\045" +
    "\uffe0\047\uffe0\050\uffe0\054\uffe0\001\002\000\032\004\120" +
    "\005\115\020\uffe2\026\uffe2\037\uffe2\040\uffe2\042\uffe2\044" +
    "\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\001\002\000\032" +
    "\004\120\005\115\020\uffe3\026\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\054\uffe3\001\002" +
    "\000\056\004\uffdf\005\uffdf\006\111\007\112\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\037\uffdf\040\uffdf\042\uffdf\044\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\054\uffdf\001\002\000\010\005\136" +
    "\026\140\056\137\001\002\000\004\056\162\001\002\000" +
    "\004\024\153\001\002\000\004\024\141\001\002\000\004" +
    "\021\142\001\002\000\030\005\075\017\072\022\145\026" +
    "\066\027\055\034\054\035\071\036\074\055\051\056\067" +
    "\057\070\001\002\000\006\022\150\023\147\001\002\000" +
    "\012\004\120\005\115\022\uffca\023\uffca\001\002\000\004" +
    "\020\146\001\002\000\056\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\026\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\054\uffcc\001\002" +
    "\000\026\005\075\017\072\026\066\027\055\034\054\035" +
    "\071\036\074\055\051\056\067\057\070\001\002\000\004" +
    "\020\151\001\002\000\056\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\020\uffce\022\uffce\023\uffce\026\uffce\037\uffce\040\uffce\042" +
    "\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054\uffce\001\002" +
    "\000\012\004\120\005\115\022\uffcb\023\uffcb\001\002\000" +
    "\004\021\154\001\002\000\030\005\075\017\072\022\156" +
    "\026\066\027\055\034\054\035\071\036\074\055\051\056" +
    "\067\057\070\001\002\000\006\022\160\023\147\001\002" +
    "\000\004\020\157\001\002\000\056\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\020\uffcd\022\uffcd\023\uffcd\026\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\054\uffcd" +
    "\001\002\000\004\020\161\001\002\000\056\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\020\uffd0\022\uffd0\023\uffd0\026\uffd0\037" +
    "\uffd0\040\uffd0\042\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\054\uffd0\001\002\000\004\024\163\001\002\000\004\021" +
    "\164\001\002\000\026\005\075\017\072\026\066\027\055" +
    "\034\054\035\071\036\074\055\051\056\067\057\070\001" +
    "\002\000\006\022\166\023\147\001\002\000\004\020\167" +
    "\001\002\000\056\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf" +
    "\022\uffcf\023\uffcf\026\uffcf\037\uffcf\040\uffcf\042\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\054\uffcf\001\002\000\004" +
    "\020\171\001\002\000\056\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\020\uffc5\022\uffc5\023\uffc5\026\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054\uffc5\001\002" +
    "\000\026\020\uffe9\026\uffe9\037\uffe9\040\uffe9\042\uffe9\044" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9\001\002\000\004" +
    "\002\ufff5\001\002\000\020\026\ufff4\042\ufff4\044\ufff4\045" +
    "\ufff4\047\ufff4\050\ufff4\054\ufff4\001\002\000\030\005\075" +
    "\017\072\026\066\027\055\034\054\035\071\036\074\041" +
    "\052\055\051\056\067\057\070\001\002\000\006\020\177" +
    "\040\103\001\002\000\004\046\200\001\002\000\012\026" +
    "\046\042\034\045\042\050\037\001\002\000\016\026\046" +
    "\042\034\044\203\045\042\047\202\050\037\001\002\000" +
    "\012\026\046\042\034\045\042\050\037\001\002\000\020" +
    "\026\uffc2\042\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\054" +
    "\uffc2\001\002\000\014\026\046\042\034\044\205\045\042" +
    "\050\037\001\002\000\020\026\uffc1\042\uffc1\044\uffc1\045" +
    "\uffc1\047\uffc1\050\uffc1\054\uffc1\001\002\000\032\005\075" +
    "\017\072\026\066\027\055\033\210\034\054\035\071\036" +
    "\074\041\052\055\051\056\067\057\070\001\002\000\006" +
    "\020\212\040\103\001\002\000\004\020\211\001\002\000" +
    "\020\026\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6" +
    "\054\uffc6\001\002\000\020\026\uffc7\042\uffc7\044\uffc7\045" +
    "\uffc7\047\uffc7\050\uffc7\054\uffc7\001\002\000\030\005\075" +
    "\017\072\026\066\027\055\034\054\035\071\036\074\041" +
    "\052\055\051\056\067\057\070\001\002\000\006\020\215" +
    "\040\103\001\002\000\004\043\216\001\002\000\012\026" +
    "\046\042\034\045\042\050\037\001\002\000\014\026\046" +
    "\042\034\044\220\045\042\050\037\001\002\000\020\026" +
    "\uffc9\042\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\054\uffc9" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\021\004\022\003\025\006\001\001\000" +
    "\004\025\221\001\001\000\002\001\001\000\020\002\034" +
    "\003\044\004\043\017\037\020\040\026\042\027\035\001" +
    "\001\000\002\001\001\000\006\023\010\024\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\026\024" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\034\003\044\004\043\017\037\020\040\027\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\064\006\047\007\063\010\055\011\062\012\060" +
    "\013\057\015\056\016\072\030\052\031\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\064\007\063" +
    "\011\171\012\060\013\057\015\056\016\072\030\052\031" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\064\006\100\007\063\010\055\011\062\012\060\013" +
    "\057\015\056\016\072\030\052\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\075\013\057\016" +
    "\072\030\052\031\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\064\007\063\010\103\011\062\012\060" +
    "\013\057\015\056\016\072\030\052\031\061\001\001\000" +
    "\002\001\001\000\024\005\064\007\063\011\105\012\060" +
    "\013\057\015\056\016\072\030\052\031\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\113\013\057\016\072\030\052\031\061\001\001\000" +
    "\014\012\112\013\057\016\072\030\052\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\133\012" +
    "\060\013\057\016\072\030\052\031\061\001\001\000\020" +
    "\007\063\012\060\013\057\015\132\016\072\030\052\031" +
    "\061\001\001\000\020\007\063\012\060\013\057\015\131" +
    "\016\072\030\052\031\061\001\001\000\016\007\130\012" +
    "\060\013\057\016\072\030\052\031\061\001\001\000\020" +
    "\007\063\012\060\013\057\015\127\016\072\030\052\031" +
    "\061\001\001\000\020\007\063\012\060\013\057\015\126" +
    "\016\072\030\052\031\061\001\001\000\020\007\063\012" +
    "\060\013\057\015\125\016\072\030\052\031\061\001\001" +
    "\000\020\007\063\012\060\013\057\015\124\016\072\030" +
    "\052\031\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\063\012\060\013\057" +
    "\014\142\015\143\016\072\030\052\031\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\063\012\060\013\057\015\151\016" +
    "\072\030\052\031\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\063\012\060\013\057\014\154\015\143\016\072\030\052" +
    "\031\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\063\012\060\013" +
    "\057\014\164\015\143\016\072\030\052\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\064\006\175\007" +
    "\063\010\055\011\062\012\060\013\057\015\056\016\072" +
    "\030\052\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\034\003\044\004\043\017\037\020\040" +
    "\026\200\027\035\001\001\000\016\002\034\003\044\004" +
    "\043\017\037\020\040\027\173\001\001\000\020\002\034" +
    "\003\044\004\043\017\037\020\040\026\203\027\035\001" +
    "\001\000\002\001\001\000\016\002\034\003\044\004\043" +
    "\017\037\020\040\027\173\001\001\000\002\001\001\000" +
    "\030\005\064\006\206\007\063\010\055\011\062\012\060" +
    "\013\057\015\056\016\072\030\052\031\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\064\006\213\007\063\010\055\011" +
    "\062\012\060\013\057\015\056\016\072\030\052\031\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\034\003\044\004\043\017\037\020\040\026\216\027\035" +
    "\001\001\000\016\002\034\003\044\004\043\017\037\020" +
    "\040\027\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Hashtable ht = new Hashtable();
    public void tabla_simbolos(Hashtable ht){
            ht.forEach((k, v) -> {  
            System.out.println("Tabla de simbolos: " + k.toString() + " " + v.toString());
        });
            
    }
    
    public void syntax_error(Symbol s){
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public NombreIncremental ni = new NombreIncremental(); 
    public String incrementar() {
        return ni.incrementar().toString();
    }

    public ArrayList<String> variablesString = new ArrayList<>();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= bloque_declaraciones bloque_programa 
            {
              ProgramaCompleto RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Bloque bd = (Bloque)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa bp = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bd,bp,ht, variablesString);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_declaraciones 
            {
              ProgramaCompleto RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Bloque bd = (Bloque)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bd,ht, variablesString);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= bloque_programa 
            {
              ProgramaCompleto RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa bp = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bp,ht, variablesString);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_declaraciones ::= DECLARE_SECTION declaraciones ENDDECLARE_SECTION 
            {
              Bloque RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<ArrayList<Declaracion>> d = (ArrayList<ArrayList<Declaracion>>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Sentencia> declaracionesFinales = new ArrayList<>();
            for(ArrayList<Declaracion> declaracion : d){
                for(Declaracion dec : declaracion){
                    declaracionesFinales.add(dec);
                }
            }
            RESULT = new Bloque(declaracionesFinales);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion declaraciones 
            {
              ArrayList<ArrayList<Declaracion>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Declaracion> dec = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ArrayList<ArrayList<Declaracion>> decs = (ArrayList<ArrayList<Declaracion>>)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            decs.add(dec);
            RESULT = decs;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              ArrayList<ArrayList<Declaracion>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ArrayList<Declaracion> dec = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<ArrayList<Declaracion>> declaraciones = new ArrayList<>();
            declaraciones.add(dec);
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= FLOAT DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                if(ht.containsKey(i)){
                    throw new Exception("El elemento"+ i +"ya fue declarado en la tabla de simbolos");
                }
                ht.put(i,"FLOAT");
                declaraciones.add(new Declaracion(Tipo.FLOAT, new Identificador(i, Tipo.FLOAT)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= INTEGER DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
               if(ht.containsKey(i)){
                    throw new Exception("El elemento"+ i +"ya fue declarado en la tabla de simbolos");
                }
                ht.put(i,"INTEGER");
                declaraciones.add(new Declaracion(Tipo.INTEGER, new Identificador(i, Tipo.INTEGER)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= BOOLEAN DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                if(ht.containsKey(i)){
                    throw new Exception("El elemento"+ i +"ya fue declarado en la tabla de simbolos");
                }
                ht.put(i,"BOOLEAN");
                declaraciones.add(new Declaracion(Tipo.BOOLEAN, new Identificador(i, Tipo.BOOLEAN)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipos_datos_id ::= IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            List<String> ident = new ArrayList<String>();
            ident.add(id);
            RESULT = ident;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos_datos_id ::= tipos_datos_id COMA IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            tdi.add(id);
            RESULT = tdi;

        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque_programa ::= PROGRAM_SECTION bloque_sentencias ENDPROGRAM_SECTION 
            {
              Programa RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Sentencia> bs = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Programa(bs);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_programa",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_sentencias ::= bloque_sentencias sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Sentencia> bs = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            bs.add(s);
            RESULT =bs;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_sentencias ::= sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<Sentencia> sentencias = new ArrayList<>();
            sentencias.add(s);
            RESULT = sentencias;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sw;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia si = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = si;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_asignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_display 
            {
              Sentencia RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sd = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_asignacion ::= IDENTIFICADOR IGUAL expresion_or 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Object valueId = ht.get(id);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + id);
            } 
            if(valueId.toString() == "INTEGER"){
                RESULT = new Asignacion(new Identificador(id, Tipo.INTEGER),eo) ;
            }
            else if(valueId.toString() == "BOOLEAN"){
                RESULT = new Asignacion(new Identificador(id, Tipo.BOOLEAN),eo) ;
            }
            else if(valueId.toString() == "FLOAT"){
                if(eo.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(eo);
                    RESULT = new Asignacion(new Identificador(id, Tipo.FLOAT),flotante) ;
                }
                else{
                    RESULT = new Asignacion(new Identificador(id, Tipo.FLOAT),eo) ;
                }
            }
            else{
                RESULT = new Asignacion(new Identificador(id, Tipo.UNKNOWN),eo) ;
            }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_or ::= expresion_or OR expresion_and 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                if(eo.getTipo() == Tipo.BOOLEAN && ea.getTipo() == Tipo.BOOLEAN){
                    RESULT =new Disyuncion(eo,ea) ;
                }
                else{
                    throw new Exception("No se puede realizar una disyuncion entre una variable de tipo "+eo.getTipo().toString()+" y una variable de tipo "+ea.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_or ::= expresion_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ea;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_and ::= expresion_and AND expresion_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(ea.getTipo() == Tipo.BOOLEAN && en.getTipo() == Tipo.BOOLEAN){
                RESULT = new Conjuncion(ea,en);
            }
            else{
                throw new Exception("No se puede realizar una conjuncion entre una variable de tipo "+ea.getTipo().toString()+" y una variable de tipo "+en.getTipo().toString());
            }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_and ::= expresion_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = en;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_not ::= NOT expresion_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(en.getTipo() == Tipo.BOOLEAN){
                RESULT =new NegacionLogica(en);
            }
            else{
                throw new Exception("No puede negar logicamente una expresion de tipo: " + en.getTipo().toString());
            }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparacion ::= expresion_sr MAYOR expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Mayor(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Mayor(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Mayor(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Mayor(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser mayor a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparacion ::= expresion_sr MAYOR_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new MayorIgual(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new MayorIgual(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new MayorIgual(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new MayorIgual(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser mayor igual a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparacion ::= expresion_sr MENOR expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Menor(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Menor(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Menor(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Menor(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser menor a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion_sr MENOR_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new MenorIgual(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new MenorIgual(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new MenorIgual(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new MenorIgual(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser menor igual a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion_sr IGUAL_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Igualdad(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Igualdad(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Igualdad(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Igualdad(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser igual a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparacion ::= expresion_sr DESIGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.INTEGER){
                    RESULT = new Desigualdad(esr1,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr2);
                    RESULT = new Desigualdad(esr1,flotante);
                }
                else if(esr1.getTipo() == Tipo.INTEGER && esr2.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr1);
                    RESULT = new Desigualdad(flotante,esr2);
                }
                else if(esr1.getTipo() == Tipo.FLOAT && esr2.getTipo() == Tipo.FLOAT){
                    RESULT = new Desigualdad(esr1,esr2);
                }
                else{
                    throw new Exception("La variable de tipo "+esr1.getTipo().toString()+" no puede ser desigual a una variable de tipo "+esr2.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion_sr 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = esr;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_sr ::= expresion_sr SUMA expresion_md 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.INTEGER){
                    RESULT = new Suma(esr,emd , Tipo.INTEGER);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Suma(esr,flotante, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr);
                    RESULT = new Suma(flotante,emd, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.FLOAT){
                    RESULT = new Suma(esr,emd, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede sumar entre una variable de tipo "+esr.getTipo().toString()+" y una variable de tipo "+emd.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_sr ::= expresion_sr RESTA expresion_md 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.INTEGER){
                    RESULT = new Resta(esr,emd , Tipo.INTEGER);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Resta(esr,flotante, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.INTEGER && emd.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(esr);
                    RESULT = new Resta(flotante,emd, Tipo.FLOAT);
                }
                else if(esr.getTipo() == Tipo.FLOAT && emd.getTipo() == Tipo.FLOAT){
                    RESULT = new Resta(esr,emd, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede restar entre una variable de tipo "+esr.getTipo().toString()+" y una variable de tipo "+emd.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_sr ::= expresion_md 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = emd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_md ::= expresion_md MULTIPLICACION menos_unario 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.INTEGER){
                    RESULT = new Multiplicacion(emd,mu, Tipo.INTEGER);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(mu);
                    RESULT = new Multiplicacion(emd,flotante, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Multiplicacion(flotante,mu, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.FLOAT){
                    RESULT = new Multiplicacion(emd,mu, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede multiplicar entre una variable de tipo "+emd.getTipo().toString()+" y una variable de tipo "+mu.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_md ::= expresion_md DIVISION menos_unario 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.INTEGER){
                    RESULT = new Division(emd,mu, Tipo.INTEGER);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.INTEGER){
                    EnteroAFlotante flotante = new EnteroAFlotante(mu);
                    RESULT = new Division(emd,flotante, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.INTEGER && mu.getTipo() == Tipo.FLOAT){
                    EnteroAFlotante flotante = new EnteroAFlotante(emd);
                    RESULT = new Division(flotante,mu, Tipo.FLOAT);
                }
                else if(emd.getTipo() == Tipo.FLOAT && mu.getTipo() == Tipo.FLOAT){
                    RESULT = new Division(emd,mu, Tipo.FLOAT);
                }
                else{
                    throw new Exception("No se puede dividir entre una variable de tipo "+emd.getTipo().toString()+" y una variable de tipo "+mu.getTipo().toString());
                }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_md ::= menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = mu;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // menos_unario ::= RESTA menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            if(mu.getTipo() == Tipo.INTEGER){
                RESULT =  new NegacionAritmetica(mu,"sub",Tipo.INTEGER);
            }else if(mu.getTipo() == Tipo.FLOAT){
                RESULT =  new NegacionAritmetica(mu,"fsub",Tipo.FLOAT);
            }
            else{
                throw new Exception("No se puede negar una variable de tipo "+mu.getTipo().toString());
            }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // menos_unario ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = f ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= constante 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Constante c = (Constante)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= funcion_especial 
            {
              Expresion RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion fe = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = fe;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= PARENTESISA expresion_or PARENTESISC 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = eo ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= input 
            {
              Expresion RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion in = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = in;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constante ::= BOOLEAN_LITERAL 
            {
              Constante RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Booleano(Boolean.parseBoolean(bl));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constante ::= INTEGER_LITERAL 
            {
              Constante RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Entero(Integer.parseInt(il));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constante ::= FLOAT_LITERAL 
            {
              Constante RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Flotante(Float.parseFloat(fl));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constante ::= IDENTIFICADOR 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Object valueId = ht.get(id);            
            if(valueId == null) {
                throw new Error("No se encuentra el id en tabla de simbolos : " + id);
            } 
            if(valueId.toString() == "INTEGER"){
                RESULT = new Identificador(id, Tipo.INTEGER);
            }
            else if(valueId.toString() == "BOOLEAN"){
                RESULT = new Identificador(id, Tipo.BOOLEAN);
            }
            else if(valueId.toString() == "FLOAT"){
                RESULT = new Identificador(id, Tipo.FLOAT);
            }
            else{
                RESULT = new Identificador(id, Tipo.UNKNOWN);
            }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcion_especial ::= SUMAIMPAR PARENTESISA INTEGER_LITERAL PUNTOCOMA CORCHETESA lista_expresiones CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            String nombreId = incrementar();
            String nombreAux = "_aux"+nombreId;
            String nombreSuma = "_suma"+nombreId;
            String nombreTemp = "_temp"+nombreId;
            ht.put(nombreAux, Tipo.INTEGER);
            ht.put(nombreSuma, Tipo.INTEGER);
            ht.put(nombreTemp, Tipo.INTEGER);
            
            ArrayList<Sentencia> then1 = new ArrayList<>();
            ArrayList<Sentencia> else1 = new ArrayList<>();
            Igualdad condicionListaVacia = new Igualdad(new Entero(le.size()), new Entero(0));
            StringLiteral str = new StringLiteral("La lista esta vacia");
            str.setIdVar(".listavacia");
            
            Display listaVacia = new Display(str, str.getValor().length());
            then1.add(listaVacia);


            ArrayList<Sentencia> then2 = new ArrayList<>();
            ArrayList<Sentencia> else2 = new ArrayList<>();
            MenorIgual condicionPivotNegativo = new MenorIgual(new Entero(Integer.parseInt(il)), new Entero(0));

            StringLiteral str2 = new StringLiteral("El valor debe ser >=1");
            str2.setIdVar(".pivotpositivo");
            
            Display pivotNegativo = new Display(str2, str2.getValor().length());
            then2.add(pivotNegativo);


            ArrayList<Sentencia> then3 = new ArrayList<>();
            ArrayList<Sentencia> else3 = new ArrayList<>();
            Mayor condicionPivotSize = new Mayor(new Entero(Integer.parseInt(il)), new Entero(le.size()));

            StringLiteral str3 = new StringLiteral("La lista tiene menos elementos que el indicado");
            str3.setIdVar(".cantinsuficiente");
            
            Display pivotSize = new Display(str3, str3.getValor().length());
            then3.add(pivotSize);


            for(Expresion elemento : le){
                if(elemento.getTipo() != Tipo.INTEGER){
                    throw new Exception("El identificador no es una variable de tipo entero");
                }


                MenorIgual cantidadContada = new MenorIgual(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
                
                Asignacion elementoTemp = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER), elemento);
                
                
                Mayor condicionWhile = new Mayor(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(1));
                ArrayList<Sentencia> thenWhile = new ArrayList<>();
                Asignacion asignacionWhile = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER),new Resta(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(2), Tipo.INTEGER));
                thenWhile.add(asignacionWhile);
                Mientras whileInterno = new Mientras(condicionWhile, new Bloque(thenWhile));

                Igualdad condicionFor = new Igualdad(new Identificador(nombreTemp, Tipo.INTEGER), new Entero(1));
                
                ArrayList<Sentencia> thenFor = new ArrayList<>();   
                Expresion elemento2 = elemento.clonar();
                Suma sumaFor = new Suma(new Identificador(nombreSuma, Tipo.INTEGER), elemento2, Tipo.INTEGER);
                Asignacion asignacion = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), sumaFor);
                thenFor.add(asignacion);
                Suma sumaAux = new Suma(new Identificador(nombreAux, Tipo.INTEGER), new Entero(1), Tipo.INTEGER);
                Asignacion asignacionAux = new Asignacion(new Identificador(nombreAux, Tipo.INTEGER), sumaAux);
                thenFor.add(asignacionAux);
                SiEntonces nodoIfImpar = new SiEntonces(condicionFor, new Bloque(thenFor));

                ArrayList<Sentencia> thenFor2 = new ArrayList<>();
                thenFor2.add(elementoTemp);
                thenFor2.add(whileInterno);
                thenFor2.add(nodoIfImpar);

                SiEntonces nodoIf = new SiEntonces(cantidadContada, new Bloque(thenFor2));
                else3.add(nodoIf);
            }

            Menor condicionUltimo = new Menor(new Identificador(nombreAux, Tipo.INTEGER), new Entero(Integer.parseInt(il)));
            ArrayList<Sentencia> thenUltimo = new ArrayList<>();
            StringLiteral str4 = new StringLiteral("No existen suficientes elementos impares para el calculo");
            str4.setIdVar(".cantidadimpares");
            
            Display displayUltimo = new Display(str4, str4.getValor().length());
            Asignacion sumaUltimo = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), new Entero(0));
            thenUltimo.add(displayUltimo);
            thenUltimo.add(sumaUltimo);
            SiEntonces ifUltimo = new SiEntonces(condicionUltimo, new Bloque(thenUltimo));
            else3.add(ifUltimo);

            SiEntonces if3 = new SiEntonces(condicionPivotSize, new Bloque(then3), new Bloque(else3));
            else2.add(if3);
            
            SiEntonces if2 = new SiEntonces(condicionPivotNegativo, new Bloque(then2), new Bloque(else2));
            else1.add(if2);

            SiEntonces if1 = new SiEntonces(condicionListaVacia, new Bloque(then1), new Bloque(else1));
            ArrayList<Sentencia> lista1 = new ArrayList<>();
            lista1.add(if1);

            RESULT = new SumaImpar(new Entero(Integer.parseInt(il)), lista1, nombreAux, nombreSuma, new Asignacion(new Identificador(nombreAux, Tipo.INTEGER),new Entero(1)), new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER),new Entero(0)));
        
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funcion_especial ::= SUMAIMPAR PARENTESISA RESTA INTEGER_LITERAL PUNTOCOMA CORCHETESA lista_expresiones CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            StringLiteral str = new StringLiteral("El valor debe ser >=1");
            str.setIdVar(".pivotpositivo");
            
            Display pivotSize = new Display(str, str.getValor().length());
            ArrayList<Sentencia> lista1 = new ArrayList<>();
            lista1.add(pivotSize);

            RESULT = new SumaImpar(lista1);
        
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcion_especial ::= SUMAIMPAR PARENTESISA IDENTIFICADOR PUNTOCOMA CORCHETESA lista_expresiones CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            String nombreId = incrementar();
            String nombreAux = "_aux"+nombreId;
            String nombreSuma = "_suma"+nombreId;
            String nombreTemp = "_temp"+nombreId;
            ht.put(nombreAux, Tipo.INTEGER);
            ht.put(nombreSuma, Tipo.INTEGER);
            ht.put(nombreTemp, Tipo.INTEGER);

            ArrayList<Sentencia> then1 = new ArrayList<>();
            ArrayList<Sentencia> else1 = new ArrayList<>();
            Igualdad condicionListaVacia = new Igualdad(new Entero(le.size()), new Entero(0));

            StringLiteral str = new StringLiteral("La lista esta vacia");
            str.setIdVar(".listavacia");
            
            Display listaVacia = new Display(str, str.getValor().length());
            then1.add(listaVacia);


            ArrayList<Sentencia> then2 = new ArrayList<>();
            ArrayList<Sentencia> else2 = new ArrayList<>();
            MenorIgual condicionPivotNegativo = new MenorIgual(new Identificador(il, Tipo.INTEGER), new Entero(0));

            StringLiteral str2 = new StringLiteral("El valor debe ser >=1");
            str2.setIdVar(".pivotpositivo");
            
            Display pivotNegativo = new Display(str2, str2.getValor().length());
            then2.add(pivotNegativo);


            ArrayList<Sentencia> then3 = new ArrayList<>();
            ArrayList<Sentencia> else3 = new ArrayList<>();
            Mayor condicionPivotSize = new Mayor(new Identificador(il, Tipo.INTEGER), new Entero(le.size()));

            StringLiteral str3 = new StringLiteral("La lista tiene menos elementos que el indicado");
            str3.setIdVar(".cantinsuficiente");
            
            Display pivotSize = new Display(str3, str3.getValor().length());
            then3.add(pivotSize);


            for(Expresion elemento : le){
                if(elemento.getTipo() != Tipo.INTEGER){
                    throw new Exception("El identificador no es una variable de tipo entero");
                }


                MenorIgual cantidadContada = new MenorIgual(new Identificador(nombreAux, Tipo.INTEGER), new Identificador(il, Tipo.INTEGER));
                
                Asignacion elementoTemp = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER), elemento);
                
                
                Mayor condicionWhile = new Mayor(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(1));
                ArrayList<Sentencia> thenWhile = new ArrayList<>();
                Asignacion asignacionWhile = new Asignacion(new Identificador(nombreTemp, Tipo.INTEGER),new Resta(new Identificador(nombreTemp, Tipo.INTEGER),new Entero(2), Tipo.INTEGER));
                thenWhile.add(asignacionWhile);
                Mientras whileInterno = new Mientras(condicionWhile, new Bloque(thenWhile));

                Igualdad condicionFor = new Igualdad(new Identificador(nombreTemp, Tipo.INTEGER), new Entero(1));
                
                ArrayList<Sentencia> thenFor = new ArrayList<>();   
                Expresion elemento2 = elemento.clonar();
                Suma sumaFor = new Suma(new Identificador(nombreSuma, Tipo.INTEGER), elemento2, Tipo.INTEGER);
                Asignacion asignacion = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), sumaFor);
                thenFor.add(asignacion);
                Suma sumaAux = new Suma(new Identificador(nombreAux, Tipo.INTEGER), new Entero(1), Tipo.INTEGER);
                Asignacion asignacionAux = new Asignacion(new Identificador(nombreAux, Tipo.INTEGER), sumaAux);
                thenFor.add(asignacionAux);
                SiEntonces nodoIfImpar = new SiEntonces(condicionFor, new Bloque(thenFor));

                ArrayList<Sentencia> thenFor2 = new ArrayList<>();
                thenFor2.add(elementoTemp);
                thenFor2.add(whileInterno);
                thenFor2.add(nodoIfImpar);

                SiEntonces nodoIf = new SiEntonces(cantidadContada, new Bloque(thenFor2));
                else3.add(nodoIf);
            }

            Menor condicionUltimo = new Menor(new Identificador(nombreAux, Tipo.INTEGER), new Identificador(il, Tipo.INTEGER));
            ArrayList<Sentencia> thenUltimo = new ArrayList<>();
            StringLiteral str4= new StringLiteral("No existen suficientes elementos impares para el calculo");
            str4.setIdVar(".cantidadimpares");
            
            Display displayUltimo = new Display(str4, str4.getValor().length());
            Asignacion sumaUltimo = new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER), new Entero(0));
            thenUltimo.add(displayUltimo);
            thenUltimo.add(sumaUltimo);
            SiEntonces ifUltimo = new SiEntonces(condicionUltimo, new Bloque(thenUltimo));
            else3.add(ifUltimo);

            SiEntonces if3 = new SiEntonces(condicionPivotSize, new Bloque(then3), new Bloque(else3));
            else2.add(if3);
            
            SiEntonces if2 = new SiEntonces(condicionPivotNegativo, new Bloque(then2), new Bloque(else2));
            else1.add(if2);

            SiEntonces if1 = new SiEntonces(condicionListaVacia, new Bloque(then1), new Bloque(else1));
            ArrayList<Sentencia> lista1 = new ArrayList<>();
            lista1.add(if1);

            Object valueId = ht.get(il);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + il);
            }
            if(valueId != Tipo.INTEGER.toString()){
                throw new Exception("El identificador no es una variable de tipo entero.");
            }
            RESULT = new SumaImpar(new Identificador(il, Tipo.INTEGER), lista1, nombreAux, nombreSuma, new Asignacion(new Identificador(nombreAux, Tipo.INTEGER),new Entero(1)), new Asignacion(new Identificador(nombreSuma, Tipo.INTEGER),new Entero(0)));
        
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion_especial ::= SUMAIMPAR PARENTESISA INTEGER_LITERAL PUNTOCOMA CORCHETESA CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		
            ArrayList<Sentencia> sentenciaDisplay = new ArrayList<>();
            StringLiteral str = new StringLiteral("La lista esta vacia");
            str.setIdVar(".listavacia");
            
            Display displayListaVacia = new Display(str, str.getValor().length());
            sentenciaDisplay.add(displayListaVacia);
            RESULT = new SumaImpar(new Entero(Integer.parseInt(il)), sentenciaDisplay);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion_especial ::= SUMAIMPAR PARENTESISA IDENTIFICADOR PUNTOCOMA CORCHETESA CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		
            Object valueId = ht.get(il);            
            if(valueId == null) {
                throw new Exception("No se encuentra el id en tabla de simbolos : " + il);
            }
            if(valueId != Tipo.INTEGER.toString()){
                throw new Exception("El identificador no es una variable de tipo entero.");
            }		
            ArrayList<Sentencia> sentenciaDisplay = new ArrayList<>();
            StringLiteral str = new StringLiteral("La lista esta vacia");
            str.setIdVar(".listavacia");
            
            Display displayListaVacia = new Display(str, str.getValor().length());
            sentenciaDisplay.add(displayListaVacia);
            RESULT = new SumaImpar(new Identificador(il, Tipo.INTEGER), sentenciaDisplay);        
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_expresiones ::= lista_expresiones COMA expresion_sr 
            {
              ArrayList<Expresion> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            le.add(esr);
            RESULT = le;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_expresiones ::= expresion_sr 
            {
              ArrayList<Expresion> RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<Expresion> expresiones = new ArrayList<>();
            expresiones.add(esr);
            RESULT = expresiones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_while ::= WHILE PARENTESISA expresion_or PARENTESISC DO bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Sentencia> bs = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Mientras(c,new Bloque(bs));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_display ::= display 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia d = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // display ::= DISPLAY PARENTESISA expresion_or PARENTESISC 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Display(eo);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("display",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // display ::= DISPLAY PARENTESISA STRING_LITERAL PARENTESISC 
            {
              Sentencia RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            StringLiteral str = new StringLiteral(sl);
            variablesString.add(str.generarCodigo());
            RESULT = new Display(str, str.getValor().length());
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("display",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // input ::= INPUT_INT PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input(Tipo.INTEGER);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // input ::= INPUT_FLOAT PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input(Tipo.FLOAT);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // input ::= INPUT_BOOL PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input(Tipo.BOOLEAN);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Sentencia> bs = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntonces(eo,new Bloque(bs));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias ELSE bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int bs1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		ArrayList<Sentencia> bs1 = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Sentencia> bs2 = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntonces(eo,new Bloque(bs1),new Bloque(bs2));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
