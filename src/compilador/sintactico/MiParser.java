
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.expresiones.*;
import compilador.ast.expresiones.binarias.*;
import compilador.ast.expresiones.factor.*;
import compilador.ast.expresiones.unarias.*;
import compilador.ast.sentencias.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\026\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\036\003\000\002" +
    "\036\005\000\002\031\005\000\002\032\004\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\022\005\000\002\022\005\000" +
    "\002\006\005\000\002\006\003\000\002\011\005\000\002" +
    "\011\003\000\002\012\004\000\002\012\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\013" +
    "\004\000\002\013\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\021\012\000\002\020\005\000\002\020\003\000\002\002" +
    "\011\000\002\023\003\000\002\004\006\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\016\005\000\002\017\005\000\002\003\011\000\002" +
    "\003\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\051\011\053\006\001\002\000\006\002" +
    "\ufffe\053\006\001\002\000\004\002\000\001\002\000\012" +
    "\026\050\042\036\045\043\050\041\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\035\001\002\000\010\030\012" +
    "\031\016\032\015\001\002\000\004\025\032\001\002\000" +
    "\004\052\031\001\002\000\012\030\012\031\016\032\015" +
    "\052\ufffa\001\002\000\004\025\025\001\002\000\004\025" +
    "\017\001\002\000\004\026\021\001\002\000\006\023\022" +
    "\024\023\001\002\000\006\023\ufff6\024\ufff6\001\002\000" +
    "\004\026\024\001\002\000\012\030\ufff9\031\ufff9\032\ufff9" +
    "\052\ufff9\001\002\000\006\023\ufff5\024\ufff5\001\002\000" +
    "\004\026\021\001\002\000\006\023\022\024\027\001\002" +
    "\000\012\030\ufff7\031\ufff7\032\ufff7\052\ufff7\001\002\000" +
    "\004\052\ufffb\001\002\000\006\002\ufffc\053\ufffc\001\002" +
    "\000\004\026\021\001\002\000\006\023\022\024\034\001" +
    "\002\000\012\030\ufff8\031\ufff8\032\ufff8\052\ufff8\001\002" +
    "\000\004\002\001\001\002\000\004\017\176\001\002\000" +
    "\020\026\ufff1\042\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1" +
    "\054\ufff1\001\002\000\020\026\ufff2\042\ufff2\044\ufff2\045" +
    "\ufff2\047\ufff2\050\ufff2\054\ufff2\001\002\000\004\017\173" +
    "\001\002\000\020\026\uffef\042\uffef\044\uffef\045\uffef\047" +
    "\uffef\050\uffef\054\uffef\001\002\000\004\017\162\001\002" +
    "\000\020\026\uffee\042\uffee\044\uffee\045\uffee\047\uffee\050" +
    "\uffee\054\uffee\001\002\000\014\026\050\042\036\045\043" +
    "\050\041\054\160\001\002\000\020\026\uffca\042\uffca\044" +
    "\uffca\045\uffca\047\uffca\050\uffca\054\uffca\001\002\000\020" +
    "\026\ufff0\042\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054" +
    "\ufff0\001\002\000\004\010\051\001\002\000\032\005\103" +
    "\017\100\026\074\027\061\033\064\034\060\035\077\036" +
    "\102\041\055\055\056\056\075\057\076\001\002\000\020" +
    "\026\uffc7\042\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\054" +
    "\uffc7\001\002\000\020\026\uffc6\042\uffc6\044\uffc6\045\uffc6" +
    "\047\uffc6\050\uffc6\054\uffc6\001\002\000\022\026\uffed\040" +
    "\111\042\uffed\044\uffed\045\uffed\047\uffed\050\uffed\054\uffed" +
    "\001\002\000\024\005\103\017\100\026\074\027\061\033" +
    "\064\041\055\055\056\056\075\057\076\001\002\000\056" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\022\uffd3\023\uffd3" +
    "\026\uffd3\037\uffd3\040\uffd3\042\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\054\uffd3\001\002\000\056\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\022\uffd6\023\uffd6\026\uffd6\037\uffd6" +
    "\040\uffd6\042\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\054" +
    "\uffd6\001\002\000\004\017\155\001\002\000\004\017\143" +
    "\001\002\000\020\026\uffc8\042\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\054\uffc8\001\002\000\026\020\uffea\026\uffea" +
    "\037\113\040\uffea\042\uffea\044\uffea\045\uffea\047\uffea\050" +
    "\uffea\054\uffea\001\002\000\056\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\022\uffd0\023\uffd0\026\uffd0\037\uffd0\040\uffd0" +
    "\042\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0\001" +
    "\002\000\046\004\126\005\123\011\124\012\125\013\130" +
    "\014\132\015\127\016\131\020\uffdf\026\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf" +
    "\001\002\000\020\026\uffec\042\uffec\044\uffec\045\uffec\047" +
    "\uffec\050\uffec\054\uffec\001\002\000\056\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9\037\uffd9" +
    "\040\uffd9\042\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054" +
    "\uffd9\001\002\000\056\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\026\uffd7\037\uffd7\040\uffd7\042\uffd7" +
    "\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7\001\002\000" +
    "\026\020\uffe8\026\uffe8\037\uffe8\040\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\047\uffe8\050\uffe8\054\uffe8\001\002\000\056\004" +
    "\uffdc\005\uffdc\006\117\007\120\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\020\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\037\uffdc\040\uffdc\042\uffdc\044\uffdc\045\uffdc\047\uffdc" +
    "\050\uffdc\054\uffdc\001\002\000\026\020\uffe6\026\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6" +
    "\054\uffe6\001\002\000\056\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\020\uffcf\022\uffcf\023\uffcf\026\uffcf\037\uffcf\040\uffcf\042" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\054\uffcf\001\002" +
    "\000\056\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\026\uffd2\037\uffd2\040\uffd2\042\uffd2\044\uffd2\045" +
    "\uffd2\047\uffd2\050\uffd2\054\uffd2\001\002\000\056\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\037\uffd1\040\uffd1\042\uffd1\044\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\054\uffd1\001\002\000\004\017\115\001\002\000\024" +
    "\005\103\017\100\026\074\027\061\033\064\041\055\055" +
    "\056\056\075\057\076\001\002\000\056\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\022\uffd5\023\uffd5\026\uffd5\037\uffd5" +
    "\040\uffd5\042\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054" +
    "\uffd5\001\002\000\004\017\105\001\002\000\022\005\103" +
    "\017\100\026\074\027\061\033\064\055\056\056\075\057" +
    "\076\001\002\000\056\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\022\uffd8\023\uffd8\026\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\054\uffd8\001\002\000" +
    "\004\020\106\001\002\000\020\026\uffc3\042\uffc3\044\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\054\uffc3\001\002\000\006\020" +
    "\110\040\111\001\002\000\056\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\026\uffd4\037\uffd4\040\uffd4" +
    "\042\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\054\uffd4\001" +
    "\002\000\024\005\103\017\100\026\074\027\061\033\064" +
    "\041\055\055\056\056\075\057\076\001\002\000\026\020" +
    "\uffeb\026\uffeb\037\113\040\uffeb\042\uffeb\044\uffeb\045\uffeb" +
    "\047\uffeb\050\uffeb\054\uffeb\001\002\000\024\005\103\017" +
    "\100\026\074\027\061\033\064\041\055\055\056\056\075" +
    "\057\076\001\002\000\026\020\uffe9\026\uffe9\037\uffe9\040" +
    "\uffe9\042\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9" +
    "\001\002\000\004\020\116\001\002\000\020\026\uffc4\042" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\054\uffc4\001\002" +
    "\000\022\005\103\017\100\026\074\027\061\033\064\055" +
    "\056\056\075\057\076\001\002\000\022\005\103\017\100" +
    "\026\074\027\061\033\064\055\056\056\075\057\076\001" +
    "\002\000\056\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\022" +
    "\uffda\023\uffda\026\uffda\037\uffda\040\uffda\042\uffda\044\uffda" +
    "\045\uffda\047\uffda\050\uffda\054\uffda\001\002\000\056\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb\026" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\044\uffdb\045\uffdb\047\uffdb" +
    "\050\uffdb\054\uffdb\001\002\000\022\005\103\017\100\026" +
    "\074\027\061\033\064\055\056\056\075\057\076\001\002" +
    "\000\022\005\103\017\100\026\074\027\061\033\064\055" +
    "\056\056\075\057\076\001\002\000\022\005\103\017\100" +
    "\026\074\027\061\033\064\055\056\056\075\057\076\001" +
    "\002\000\022\005\103\017\100\026\074\027\061\033\064" +
    "\055\056\056\075\057\076\001\002\000\022\005\103\017" +
    "\100\026\074\027\061\033\064\055\056\056\075\057\076" +
    "\001\002\000\022\005\103\017\100\026\074\027\061\033" +
    "\064\055\056\056\075\057\076\001\002\000\022\005\103" +
    "\017\100\026\074\027\061\033\064\055\056\056\075\057" +
    "\076\001\002\000\022\005\103\017\100\026\074\027\061" +
    "\033\064\055\056\056\075\057\076\001\002\000\032\004" +
    "\126\005\123\020\uffe4\026\uffe4\037\uffe4\040\uffe4\042\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\001\002\000" +
    "\032\004\126\005\123\020\uffe2\026\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\001" +
    "\002\000\032\004\126\005\123\020\uffe5\026\uffe5\037\uffe5" +
    "\040\uffe5\042\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054" +
    "\uffe5\001\002\000\032\004\126\005\123\020\uffe3\026\uffe3" +
    "\037\uffe3\040\uffe3\042\uffe3\044\uffe3\045\uffe3\047\uffe3\050" +
    "\uffe3\054\uffe3\001\002\000\056\004\uffde\005\uffde\006\117" +
    "\007\120\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\020\uffde\022\uffde\023\uffde\026\uffde\037\uffde\040\uffde" +
    "\042\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde\001" +
    "\002\000\032\004\126\005\123\020\uffe0\026\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054" +
    "\uffe0\001\002\000\032\004\126\005\123\020\uffe1\026\uffe1" +
    "\037\uffe1\040\uffe1\042\uffe1\044\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\054\uffe1\001\002\000\056\004\uffdd\005\uffdd\006\117" +
    "\007\120\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\026\uffdd\037\uffdd\040\uffdd" +
    "\042\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054\uffdd\001" +
    "\002\000\004\056\144\001\002\000\004\024\145\001\002" +
    "\000\004\021\146\001\002\000\022\005\103\017\100\026" +
    "\074\027\061\033\064\055\056\056\075\057\076\001\002" +
    "\000\012\004\126\005\123\022\uffcc\023\uffcc\001\002\000" +
    "\006\022\152\023\151\001\002\000\022\005\103\017\100" +
    "\026\074\027\061\033\064\055\056\056\075\057\076\001" +
    "\002\000\004\020\153\001\002\000\056\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\020\uffce\022\uffce\023\uffce\026\uffce\037\uffce" +
    "\040\uffce\042\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054" +
    "\uffce\001\002\000\012\004\126\005\123\022\uffcd\023\uffcd" +
    "\001\002\000\004\020\156\001\002\000\020\026\uffc5\042" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054\uffc5\001\002" +
    "\000\026\020\uffe7\026\uffe7\037\uffe7\040\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\001\002\000\004" +
    "\002\ufff4\001\002\000\020\026\ufff3\042\ufff3\044\ufff3\045" +
    "\ufff3\047\ufff3\050\ufff3\054\ufff3\001\002\000\024\005\103" +
    "\017\100\026\074\027\061\033\064\041\055\055\056\056" +
    "\075\057\076\001\002\000\006\020\164\040\111\001\002" +
    "\000\004\046\165\001\002\000\012\026\050\042\036\045" +
    "\043\050\041\001\002\000\016\026\050\042\036\044\170" +
    "\045\043\047\167\050\041\001\002\000\012\026\050\042" +
    "\036\045\043\050\041\001\002\000\020\026\uffc2\042\uffc2" +
    "\044\uffc2\045\uffc2\047\uffc2\050\uffc2\054\uffc2\001\002\000" +
    "\014\026\050\042\036\044\172\045\043\050\041\001\002" +
    "\000\020\026\uffc1\042\uffc1\044\uffc1\045\uffc1\047\uffc1\050" +
    "\uffc1\054\uffc1\001\002\000\024\005\103\017\100\026\074" +
    "\027\061\033\064\041\055\055\056\056\075\057\076\001" +
    "\002\000\006\020\175\040\111\001\002\000\020\026\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\054\uffc9\001" +
    "\002\000\024\005\103\017\100\026\074\027\061\033\064" +
    "\041\055\055\056\056\075\057\076\001\002\000\006\020" +
    "\200\040\111\001\002\000\004\043\201\001\002\000\012" +
    "\026\050\042\036\045\043\050\041\001\002\000\014\026" +
    "\050\042\036\044\203\045\043\050\041\001\002\000\020" +
    "\026\uffcb\042\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054" +
    "\uffcb\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\012\024\007\025\004\026\003\031\006\001" +
    "\001\000\004\031\203\001\001\000\002\001\001\000\020" +
    "\002\036\003\046\004\045\022\041\023\043\032\044\033" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\012\030\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\027\030\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\036\003\046" +
    "\004\045\022\041\023\043\033\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\072" +
    "\006\053\007\064\010\071\011\062\012\070\013\066\014" +
    "\065\015\061\016\051\017\052\021\100\034\056\035\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\072\007\064\010\071\012\156\013\066" +
    "\021\100\034\056\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\072\006\106\007\064\010\071\011" +
    "\062\012\070\013\066\021\100\034\056\035\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\103\021" +
    "\100\034\056\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\072\007\064\010\071\011\111\012\070" +
    "\013\066\021\100\034\056\035\067\001\001\000\002\001" +
    "\001\000\022\005\072\007\064\010\071\012\113\013\066" +
    "\021\100\034\056\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\121\021\100" +
    "\034\056\035\067\001\001\000\012\013\120\021\100\034" +
    "\056\035\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\141\013\066\021\100\034\056\035\067\001" +
    "\001\000\016\007\140\010\071\013\066\021\100\034\056" +
    "\035\067\001\001\000\016\007\137\010\071\013\066\021" +
    "\100\034\056\035\067\001\001\000\014\010\136\013\066" +
    "\021\100\034\056\035\067\001\001\000\016\007\135\010" +
    "\071\013\066\021\100\034\056\035\067\001\001\000\016" +
    "\007\134\010\071\013\066\021\100\034\056\035\067\001" +
    "\001\000\016\007\133\010\071\013\066\021\100\034\056" +
    "\035\067\001\001\000\016\007\132\010\071\013\066\021" +
    "\100\034\056\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\146\010\071\013\066\020\147\021\100\034\056" +
    "\035\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\153\010\071\013\066\021\100\034\056\035\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\072\006" +
    "\162\007\064\010\071\011\062\012\070\013\066\021\100" +
    "\034\056\035\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\036\003\046\004\045\022\041\023\043" +
    "\032\165\033\037\001\001\000\016\002\036\003\046\004" +
    "\045\022\041\023\043\033\160\001\001\000\020\002\036" +
    "\003\046\004\045\022\041\023\043\032\170\033\037\001" +
    "\001\000\002\001\001\000\016\002\036\003\046\004\045" +
    "\022\041\023\043\033\160\001\001\000\002\001\001\000" +
    "\026\005\072\006\173\007\064\010\071\011\062\012\070" +
    "\013\066\021\100\034\056\035\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\072\006\176\007\064" +
    "\010\071\011\062\012\070\013\066\021\100\034\056\035" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\036\003\046\004\045\022\041\023\043\032\201\033" +
    "\037\001\001\000\016\002\036\003\046\004\045\022\041" +
    "\023\043\033\160\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Hashtable ht = new Hashtable();
    public void tabla_simbolos(Hashtable ht){
            ht.forEach((k, v) -> {  
            System.out.println("Tabla de simbolos: " + k.toString() + " " + v.toString());
        });
            
    }
    
    public void syntax_error(Symbol s){
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(" Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }
    public Impresion impresion;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= impresion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Impresion start_val = (Impresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // impresion ::= programa 
            {
              Impresion RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ProgramaCompleto prog = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        Impresion impresion = new Impresion(prog);
        RESULT = impresion;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("impresion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_declaraciones bloque_programa 
            {
              ProgramaCompleto RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Bloque bd = (Bloque)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa bp = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bd,bp);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= bloque_declaraciones 
            {
              ProgramaCompleto RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Bloque bd = (Bloque)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= bloque_programa 
            {
              ProgramaCompleto RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa bp = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new ProgramaCompleto(bp);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_declaraciones ::= DECLARE_SECTION declaraciones ENDDECLARE_SECTION 
            {
              Bloque RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<ArrayList<Declaracion>> d = (ArrayList<ArrayList<Declaracion>>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Nodo> declaracionesFinales = new ArrayList<>();
            for(ArrayList<Declaracion> declaracion : d){
                for(Declaracion dec : declaracion){
                    declaracionesFinales.add(dec);
                }
            }
            RESULT = new Bloque(declaracionesFinales);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion declaraciones 
            {
              ArrayList<ArrayList<Declaracion>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Declaracion> dec = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ArrayList<ArrayList<Declaracion>> decs = (ArrayList<ArrayList<Declaracion>>)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            decs.add(dec);
            RESULT = decs;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion 
            {
              ArrayList<ArrayList<Declaracion>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ArrayList<Declaracion> dec = (ArrayList<Declaracion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<ArrayList<Declaracion>> declaraciones = new ArrayList<>();
            declaraciones.add(dec);
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaraciones",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= FLOAT DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"FLOAT");
                declaraciones.add(new Declaracion(Tipo.FLOAT, new Identificador(i)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= INTEGER DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"INTEGER");
                declaraciones.add(new Declaracion(Tipo.INTEGER, new Identificador(i)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= BOOLEAN DOS_PUNTOS tipos_datos_id PUNTOCOMA 
            {
              ArrayList<Declaracion> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            ArrayList<Declaracion> declaraciones = new ArrayList<>();
            for(String i : tdi){
                ht.put(i,"BOOLEAN");
                declaraciones.add(new Declaracion(Tipo.BOOLEAN, new Identificador(i)));
            }
            RESULT = declaraciones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos_datos_id ::= IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            List<String> ident = new ArrayList<String>();
            ident.add(id);
            RESULT = ident;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos_datos_id ::= tipos_datos_id COMA IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int tdileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tdiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		List<String> tdi = (List<String>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            tdi.add(id);
            RESULT = tdi;

        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipos_datos_id",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_programa ::= PROGRAM_SECTION bloque_sentencias ENDPROGRAM_SECTION 
            {
              Programa RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Nodo> bs = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Programa(bs);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_programa",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_sentencias ::= bloque_sentencias sentencia 
            {
              ArrayList<Nodo> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Nodo> bs = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            bs.add(s);
            RESULT =bs;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_sentencias ::= sentencia 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<Nodo> sentencias = new ArrayList<>();
            sentencias.add(s);
            RESULT = sentencias;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sw;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia si = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = si;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_asignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_display 
            {
              Sentencia RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sd = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = sd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_asignacion ::= IDENTIFICADOR IGUAL expresion_or 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Asignacion(new Identificador(id),eo) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_asignacion ::= IDENTIFICADOR IGUAL input 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion fe = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Asignacion(new Identificador(id),fe) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_or ::= expresion_or OR expresion_and 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =new Conjuncion(eo,ea) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_or ::= expresion_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ea;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_or",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_and ::= expresion_and AND expresion_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Disyuncion(ea,en);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_and ::= expresion_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = en;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_and",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_not ::= NOT expresion_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =new NegacionLogica(en);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_not",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparacion ::= expresion_sr MAYOR expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Mayor(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion_sr MAYOR_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new MayorIgual(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion_sr MENOR expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Menor(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparacion ::= expresion_sr MENOR_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new MenorIgual(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion_sr IGUAL_IGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Igualdad(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= expresion_sr DESIGUAL expresion_sr 
            {
              Expresion RESULT =null;
		int esr1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esr1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esr2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esr2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Desigualdad(esr1,esr2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion_sr 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = esr;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_sr ::= expresion_sr SUMA expresion_md 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Suma(esr,emd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_sr ::= expresion_sr RESTA expresion_md 
            {
              Expresion RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Resta(esr,emd);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_sr ::= expresion_md 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = emd;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_sr",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_md ::= expresion_md MULTIPLICACION menos_unario 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Multiplicacion(emd,mu);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_md ::= expresion_md DIVISION menos_unario 
            {
              Expresion RESULT =null;
		int emdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int emdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion emd = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Division(emd,mu) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_md ::= menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = mu;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_md",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // menos_unario ::= RESTA menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT =  new NegacionAritmetica(mu) ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // menos_unario ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = f ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= constante 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Constante c = (Constante)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= funcion_especial 
            {
              Expresion RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion fe = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = fe;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= PARENTESISA expresion_or PARENTESISC 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = eo ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constante ::= BOOLEAN_LITERAL 
            {
              Constante RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Booleano(bl);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constante ::= INTEGER_LITERAL 
            {
              Constante RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Entero(il);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constante ::= FLOAT_LITERAL 
            {
              Constante RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Flotante(fl);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constante ::= STRING_LITERAL 
            {
              Constante RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new StringLiteral(sl);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constante ::= IDENTIFICADOR 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = new Identificador(id);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcion_especial ::= SUMAIMPAR PARENTESISA INTEGER_LITERAL PUNTOCOMA CORCHETESA lista_expresiones CORCHETESC PARENTESISC 
            {
              Expresion RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            RESULT = new SumaImpar(new Entero(il),le);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_expresiones ::= lista_expresiones COMA expresion_sr 
            {
              ArrayList<Expresion> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		ArrayList<Expresion> le = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            le.add(esr);
            RESULT = le;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_expresiones ::= expresion_sr 
            {
              ArrayList<Expresion> RESULT =null;
		int esrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int esrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion esr = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            ArrayList<Expresion> expresiones = new ArrayList<>();
            expresiones.add(esr);
            RESULT = expresiones;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_while ::= WHILE PARENTESISA expresion_or PARENTESISC DO bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Nodo> bs = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Mientras(c,new Bloque(bs));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_display ::= display 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia d = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // display ::= DISPLAY PARENTESISA expresion_or PARENTESISC 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new Display(eo);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("display",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // input ::= input_int 
            {
              Expresion RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ii = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ii;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // input ::= input_float 
            {
              Expresion RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ifl = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ifl;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // input ::= input_bool 
            {
              Expresion RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion ib = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            RESULT = ib;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // input_int ::= INPUT_INT PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input();
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_int",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // input_float ::= INPUT_FLOAT PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input();
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_float",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // input_bool ::= INPUT_BOOL PARENTESISA PARENTESISC 
            {
              Expresion RESULT =null;
		
            RESULT = new Input();
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("input_bool",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Nodo> bs = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntonces(eo,new Bloque(bs));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_if ::= IF PARENTESISA expresion_or PARENTESISC THEN bloque_sentencias ELSE bloque_sentencias END 
            {
              Sentencia RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int bs1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		ArrayList<Nodo> bs1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ArrayList<Nodo> bs2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            RESULT = new SiEntonces(eo,new Bloque(bs1),new Bloque(bs2));
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
