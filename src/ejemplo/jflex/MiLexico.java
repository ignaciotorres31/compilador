// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.sym;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\4\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\40\1\46\1\47\1\50\1\51\1\40"+
    "\1\52\1\40\1\53\1\40\1\54\1\55\1\56\1\0"+
    "\1\57\1\0\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\2\40\1\71\1\72\1\73\1\74"+
    "\1\75\1\40\1\76\1\77\1\100\1\101\1\40\1\102"+
    "\1\40\1\103\1\40\12\0\1\3\44\0\1\40\12\0"+
    "\1\40\4\0\1\40\5\0\27\40\1\0\37\40\1\0"+
    "\u01ca\40\4\0\14\40\16\0\5\40\7\0\1\40\1\0"+
    "\1\40\21\0\165\40\1\0\2\40\2\0\4\40\1\0"+
    "\1\40\6\0\1\40\1\0\3\40\1\0\1\40\1\0"+
    "\24\40\1\0\123\40\1\0\213\40\1\0\255\40\1\0"+
    "\46\40\2\0\1\40\6\0\51\40\10\0\55\40\1\0"+
    "\1\40\1\0\2\40\1\0\2\40\1\0\1\40\10\0"+
    "\33\40\4\0\4\40\35\0\13\40\5\0\100\40\12\21"+
    "\4\0\146\40\1\0\10\40\2\0\12\40\1\0\6\40"+
    "\12\21\3\40\2\0\1\40\20\0\73\40\2\0\145\40"+
    "\16\0\12\21\54\40\4\0\1\40\2\0\1\40\2\0"+
    "\56\40\22\0\34\40\4\0\13\40\65\0\25\40\1\0"+
    "\10\40\25\0\17\40\1\0\201\40\2\0\12\21\1\0"+
    "\23\40\1\0\10\40\2\0\2\40\2\0\26\40\1\0"+
    "\7\40\1\0\1\40\3\0\4\40\2\0\11\40\2\0"+
    "\2\40\2\0\4\40\10\0\1\40\4\0\2\40\1\0"+
    "\5\40\2\0\12\21\2\40\12\0\1\40\1\0\1\40"+
    "\2\0\3\40\1\0\6\40\4\0\2\40\2\0\26\40"+
    "\1\0\7\40\1\0\2\40\1\0\2\40\1\0\2\40"+
    "\2\0\1\40\1\0\5\40\4\0\2\40\2\0\3\40"+
    "\3\0\1\40\7\0\4\40\1\0\1\40\7\0\12\21"+
    "\6\40\13\0\3\40\1\0\11\40\1\0\3\40\1\0"+
    "\26\40\1\0\7\40\1\0\2\40\1\0\5\40\2\0"+
    "\12\40\1\0\3\40\1\0\3\40\2\0\1\40\17\0"+
    "\4\40\2\0\12\21\11\0\7\40\1\0\3\40\1\0"+
    "\10\40\2\0\2\40\2\0\26\40\1\0\7\40\1\0"+
    "\2\40\1\0\5\40\2\0\11\40\2\0\2\40\2\0"+
    "\3\40\10\0\2\40\4\0\2\40\1\0\5\40\2\0"+
    "\12\21\1\0\1\40\20\0\2\40\1\0\6\40\3\0"+
    "\3\40\1\0\4\40\3\0\2\40\1\0\1\40\1\0"+
    "\2\40\3\0\2\40\3\0\3\40\3\0\14\40\4\0"+
    "\5\40\3\0\3\40\1\0\4\40\2\0\1\40\6\0"+
    "\1\40\16\0\12\21\20\0\15\40\1\0\3\40\1\0"+
    "\27\40\1\0\20\40\3\0\10\40\1\0\3\40\1\0"+
    "\4\40\7\0\2\40\1\0\3\40\5\0\4\40\2\0"+
    "\12\21\20\0\4\40\1\0\10\40\1\0\3\40\1\0"+
    "\27\40\1\0\12\40\1\0\5\40\2\0\11\40\1\0"+
    "\3\40\1\0\4\40\7\0\2\40\7\0\1\40\1\0"+
    "\4\40\2\0\12\21\1\0\2\40\15\0\4\40\1\0"+
    "\10\40\1\0\3\40\1\0\63\40\1\0\3\40\1\0"+
    "\5\40\5\0\4\40\7\0\5\40\2\0\12\21\12\0"+
    "\6\40\2\0\2\40\1\0\22\40\3\0\30\40\1\0"+
    "\11\40\1\0\1\40\2\0\7\40\3\0\1\40\4\0"+
    "\6\40\1\0\1\40\1\0\10\40\6\0\12\21\2\0"+
    "\2\40\15\0\72\40\5\0\17\40\1\0\12\21\47\0"+
    "\2\40\1\0\1\40\1\0\5\40\1\0\30\40\1\0"+
    "\1\40\1\0\27\40\2\0\5\40\1\0\1\40\1\0"+
    "\6\40\2\0\12\21\2\0\4\40\40\0\1\40\27\0"+
    "\2\40\6\0\12\21\13\0\1\40\1\0\1\40\1\0"+
    "\1\40\4\0\12\40\1\0\44\40\4\0\24\40\1\0"+
    "\22\40\1\0\44\40\11\0\1\40\71\0\100\40\12\21"+
    "\6\0\100\40\12\21\4\40\2\0\46\40\1\0\1\40"+
    "\5\0\1\40\2\0\53\40\1\0\115\40\1\0\4\40"+
    "\2\0\7\40\1\0\1\40\1\0\4\40\2\0\51\40"+
    "\1\0\4\40\2\0\41\40\1\0\4\40\2\0\7\40"+
    "\1\0\1\40\1\0\4\40\2\0\17\40\1\0\71\40"+
    "\1\0\4\40\2\0\103\40\2\0\3\40\40\0\20\40"+
    "\20\0\126\40\2\0\6\40\3\0\u016c\40\2\0\21\40"+
    "\1\0\32\40\5\0\113\40\3\0\13\40\7\0\15\40"+
    "\1\0\7\40\13\0\25\40\13\0\24\40\14\0\15\40"+
    "\1\0\3\40\1\0\2\40\14\0\124\40\3\0\1\40"+
    "\4\0\2\40\2\0\12\21\41\0\3\40\2\0\12\21"+
    "\6\0\131\40\7\0\53\40\5\0\106\40\12\0\37\40"+
    "\1\0\14\40\4\0\14\40\12\0\12\21\36\40\2\0"+
    "\5\40\13\0\54\40\4\0\32\40\6\0\12\21\46\0"+
    "\34\40\4\0\77\40\1\0\35\40\2\0\1\40\12\21"+
    "\6\0\12\21\15\0\1\40\10\0\17\40\101\0\114\40"+
    "\4\0\12\21\21\0\11\40\14\0\60\40\12\21\72\40"+
    "\14\0\70\40\10\0\12\21\3\0\3\40\12\21\44\40"+
    "\2\0\11\40\7\0\53\40\2\0\3\40\20\0\3\40"+
    "\1\0\47\40\5\0\372\40\1\0\33\40\2\0\6\40"+
    "\2\0\46\40\2\0\6\40\2\0\10\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\37\40\2\0\65\40"+
    "\1\0\7\40\1\0\1\40\3\0\3\40\1\0\7\40"+
    "\3\0\4\40\2\0\6\40\4\0\15\40\5\0\3\40"+
    "\1\0\7\40\53\0\2\3\25\0\2\40\23\0\1\40"+
    "\34\0\1\40\15\0\1\40\20\0\15\40\63\0\41\40"+
    "\21\0\1\40\4\0\1\40\2\0\12\40\1\0\1\40"+
    "\3\0\5\40\6\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\4\40\1\0\13\40\2\0\4\40\5\0\5\40"+
    "\4\0\1\40\21\0\51\40\u022d\0\64\40\26\0\57\40"+
    "\1\0\57\40\1\0\205\40\6\0\11\40\14\0\46\40"+
    "\1\0\1\40\5\0\1\40\2\0\70\40\7\0\1\40"+
    "\17\0\30\40\11\0\7\40\1\0\7\40\1\0\7\40"+
    "\1\0\7\40\1\0\7\40\1\0\7\40\1\0\7\40"+
    "\1\0\7\40\1\0\40\40\57\0\1\40\325\0\3\40"+
    "\31\0\17\40\1\0\5\40\2\0\5\40\4\0\126\40"+
    "\2\0\2\40\2\0\3\40\1\0\132\40\1\0\4\40"+
    "\5\0\53\40\1\0\136\40\21\0\33\40\65\0\306\40"+
    "\112\0\360\40\20\0\215\40\103\0\56\40\2\0\15\40"+
    "\3\0\20\40\12\21\2\40\24\0\63\40\1\0\12\40"+
    "\1\0\163\40\45\0\11\40\2\0\147\40\2\0\65\40"+
    "\2\0\5\40\60\0\61\40\30\0\64\40\14\0\106\40"+
    "\12\0\12\21\6\0\30\40\3\0\1\40\1\0\3\40"+
    "\12\21\44\40\2\0\44\40\14\0\35\40\3\0\101\40"+
    "\16\0\1\40\12\21\6\0\20\40\12\21\5\40\1\0"+
    "\67\40\11\0\16\40\2\0\12\21\6\0\27\40\3\0"+
    "\111\40\30\0\3\40\2\0\20\40\2\0\5\40\12\0"+
    "\6\40\2\0\6\40\2\0\6\40\11\0\7\40\1\0"+
    "\7\40\1\0\53\40\1\0\14\40\10\0\173\40\1\0"+
    "\2\40\2\0\12\21\6\0\244\40\14\0\27\40\4\0"+
    "\61\40\4\0\u0100\3\156\40\2\0\152\40\46\0\7\40"+
    "\14\0\5\40\5\0\14\40\1\0\15\40\1\0\5\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\154\40"+
    "\41\0\153\40\22\0\100\40\2\0\66\40\50\0\14\40"+
    "\4\0\20\40\20\0\20\40\3\0\2\40\30\0\3\40"+
    "\40\0\5\40\1\0\207\40\23\0\12\21\7\0\32\40"+
    "\4\0\1\40\1\0\32\40\13\0\131\40\3\0\6\40"+
    "\2\0\6\40\2\0\6\40\2\0\3\40\43\0\14\40"+
    "\1\0\32\40\1\0\23\40\1\0\2\40\1\0\17\40"+
    "\2\0\16\40\42\0\173\40\105\0\65\40\210\0\1\40"+
    "\202\0\35\40\3\0\61\40\17\0\1\40\37\0\40\40"+
    "\15\0\36\40\5\0\53\40\5\0\36\40\2\0\44\40"+
    "\4\0\10\40\1\0\5\40\52\0\236\40\2\0\12\21"+
    "\6\0\44\40\4\0\44\40\4\0\50\40\10\0\64\40"+
    "\234\0\67\40\11\0\26\40\12\0\10\40\230\0\6\40"+
    "\2\0\1\40\1\0\54\40\1\0\2\40\3\0\1\40"+
    "\2\0\27\40\12\0\27\40\11\0\37\40\101\0\23\40"+
    "\1\0\2\40\12\0\26\40\12\0\32\40\106\0\70\40"+
    "\6\0\2\40\100\0\4\40\1\0\2\40\5\0\10\40"+
    "\1\0\3\40\1\0\35\40\2\0\3\40\4\0\1\40"+
    "\40\0\35\40\3\0\35\40\43\0\10\40\1\0\36\40"+
    "\31\0\66\40\12\0\26\40\12\0\23\40\15\0\22\40"+
    "\156\0\111\40\67\0\63\40\15\0\63\40\15\0\50\40"+
    "\10\0\12\21\306\0\35\40\12\0\1\40\10\0\41\40"+
    "\217\0\27\40\11\0\107\40\37\0\12\21\17\0\74\40"+
    "\25\0\31\40\7\0\12\21\6\0\65\40\1\0\12\21"+
    "\4\0\3\40\11\0\44\40\2\0\1\40\11\0\105\40"+
    "\4\0\4\40\3\0\12\21\1\40\1\0\1\40\43\0"+
    "\22\40\1\0\45\40\6\0\1\40\101\0\7\40\1\0"+
    "\1\40\1\0\4\40\1\0\17\40\1\0\12\40\7\0"+
    "\73\40\5\0\12\21\6\0\4\40\1\0\10\40\2\0"+
    "\2\40\2\0\26\40\1\0\7\40\1\0\2\40\1\0"+
    "\5\40\1\0\12\40\2\0\2\40\2\0\3\40\2\0"+
    "\1\40\6\0\1\40\5\0\7\40\2\0\7\40\3\0"+
    "\5\40\213\0\113\40\5\0\12\21\4\0\2\40\40\0"+
    "\106\40\1\0\1\40\10\0\12\21\246\0\66\40\2\0"+
    "\11\40\27\0\6\40\42\0\101\40\3\0\1\40\13\0"+
    "\12\21\46\0\71\40\7\0\12\21\66\0\33\40\2\0"+
    "\17\40\4\0\12\21\306\0\73\40\145\0\100\40\12\21"+
    "\25\0\1\40\240\0\10\40\2\0\56\40\2\0\10\40"+
    "\1\0\2\40\33\0\77\40\10\0\1\40\10\0\112\40"+
    "\3\0\1\40\42\0\71\40\7\0\11\40\1\0\55\40"+
    "\1\0\11\40\17\0\12\21\30\0\36\40\2\0\26\40"+
    "\1\0\16\40\111\0\7\40\1\0\2\40\1\0\54\40"+
    "\3\0\1\40\1\0\2\40\1\0\11\40\10\0\12\21"+
    "\6\0\6\40\1\0\2\40\1\0\45\40\1\0\2\40"+
    "\1\0\6\40\7\0\12\21\u0136\0\27\40\11\0\232\40"+
    "\146\0\157\40\21\0\304\40\274\0\57\40\321\0\107\40"+
    "\271\0\71\40\7\0\37\40\1\0\12\21\146\0\36\40"+
    "\2\0\5\40\13\0\67\40\11\0\4\40\14\0\12\21"+
    "\11\0\25\40\5\0\23\40\260\0\100\40\200\0\113\40"+
    "\4\0\71\40\7\0\21\40\100\0\2\40\1\0\1\40"+
    "\34\0\370\40\10\0\363\40\15\0\37\40\61\0\3\40"+
    "\21\0\4\40\10\0\u018c\40\4\0\153\40\5\0\15\40"+
    "\3\0\11\40\7\0\12\40\3\0\2\40\306\0\5\40"+
    "\3\0\6\40\10\0\10\40\2\0\7\40\36\0\4\40"+
    "\224\0\3\40\273\0\125\40\1\0\107\40\1\0\2\40"+
    "\2\0\1\40\2\0\2\40\2\0\4\40\1\0\14\40"+
    "\1\0\1\40\1\0\7\40\1\0\101\40\1\0\4\40"+
    "\2\0\10\40\1\0\7\40\1\0\34\40\1\0\4\40"+
    "\1\0\5\40\1\0\1\40\3\0\7\40\1\0\u0154\40"+
    "\2\0\31\40\1\0\31\40\1\0\37\40\1\0\31\40"+
    "\1\0\37\40\1\0\31\40\1\0\37\40\1\0\31\40"+
    "\1\0\37\40\1\0\31\40\1\0\10\40\2\0\62\21"+
    "\67\40\4\0\62\40\10\0\1\40\16\0\1\40\26\0"+
    "\5\40\1\0\17\40\120\0\7\40\1\0\21\40\2\0"+
    "\7\40\1\0\2\40\1\0\5\40\325\0\55\40\3\0"+
    "\16\40\2\0\12\21\4\0\1\40\u0171\0\60\40\12\21"+
    "\6\0\305\40\13\0\7\40\51\0\114\40\4\0\12\21"+
    "\246\0\4\40\1\0\33\40\1\0\2\40\1\0\1\40"+
    "\2\0\1\40\1\0\12\40\1\0\4\40\1\0\1\40"+
    "\1\0\1\40\6\0\1\40\4\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\3\40\1\0\2\40\1\0\1\40"+
    "\2\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\0\1\40\2\0\4\40"+
    "\1\0\7\40\1\0\4\40\1\0\4\40\1\0\1\40"+
    "\1\0\12\40\1\0\21\40\5\0\3\40\1\0\5\40"+
    "\1\0\21\40\164\0\32\40\6\0\32\40\6\0\32\40"+
    "\166\0\327\40\51\0\65\40\13\0\336\40\2\0\u0182\40"+
    "\16\0\u0131\40\37\0\36\40\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\12\21\1\22\1\23\14\21\1\24"+
    "\1\25\1\26\1\27\2\24\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\4\21\1\40\5\21"+
    "\1\41\16\21\1\42\5\21\1\43\1\44\1\45\1\46"+
    "\1\47\5\21\2\50\10\21\1\51\6\21\1\52\11\21"+
    "\1\53\10\21\1\54\10\21\1\55\7\21\1\56\4\21"+
    "\1\57\30\21\1\60\1\21\1\61\2\21\1\62\12\21"+
    "\1\0\2\21\1\0\1\21\1\0\5\21\1\0\1\21"+
    "\1\0\2\21\1\0\1\63\1\0\4\21\1\64\2\0"+
    "\2\21\2\0\2\21\1\65\1\21\10\0\1\66\31\0"+
    "\1\67\2\0\1\70\12\0\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\314\0\u0198"+
    "\0\u01dc\0\314\0\u0220\0\314\0\314\0\314\0\u0264\0\314"+
    "\0\u02a8\0\u02ec\0\314\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440"+
    "\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660"+
    "\0\314\0\314\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\314\0\314"+
    "\0\u09d4\0\314\0\u0a18\0\u0a5c\0\314\0\314\0\314\0\314"+
    "\0\u0264\0\314\0\314\0\314\0\314\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u03fc\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u03fc"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u03fc\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\314\0\314\0\314\0\314"+
    "\0\314\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u03fc"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u03fc\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u03fc"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u03fc\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u03fc\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u03fc\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u03fc\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u03fc\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u03fc\0\u2750\0\u03fc\0\u2794\0\u27d8\0\u03fc\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u03fc\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058"+
    "\0\u03fc\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u3278\0\u03fc\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u03fc\0\u3520\0\u3564\0\u35a8\0\u35ec"+
    "\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c"+
    "\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\314\0\u3bc4\0\u3c08"+
    "\0\314\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\27\1\31\1\32\1\33\2\27\1\34\5\27\1\35"+
    "\1\27\1\36\1\37\1\27\1\40\1\27\1\41\1\0"+
    "\1\42\1\0\1\43\1\44\1\27\1\45\1\46\1\47"+
    "\2\27\1\50\2\27\1\51\1\52\1\53\1\27\1\54"+
    "\1\55\1\27\1\56\1\27\7\57\1\60\45\57\1\61"+
    "\36\57\1\62\1\63\1\57\1\64\70\57\106\0\1\4"+
    "\126\0\1\65\56\0\2\10\1\66\3\0\76\10\13\0"+
    "\1\67\102\0\1\70\112\0\1\71\101\0\1\71\1\0"+
    "\1\21\107\0\1\72\103\0\1\73\103\0\1\74\103\0"+
    "\1\75\77\0\1\27\5\0\25\27\3\0\25\27\21\0"+
    "\1\27\5\0\15\27\1\76\7\27\3\0\15\27\1\77"+
    "\7\27\21\0\1\27\5\0\4\27\1\100\3\27\1\101"+
    "\4\27\1\102\7\27\3\0\25\27\21\0\1\27\5\0"+
    "\12\27\1\103\1\27\1\104\10\27\3\0\14\27\1\105"+
    "\10\27\21\0\1\27\5\0\12\27\1\106\12\27\3\0"+
    "\12\27\1\107\12\27\21\0\1\27\5\0\5\27\1\110"+
    "\6\27\1\111\10\27\3\0\14\27\1\112\10\27\21\0"+
    "\1\27\5\0\17\27\1\113\5\27\3\0\25\27\21\0"+
    "\1\27\5\0\22\27\1\114\2\27\3\0\25\27\21\0"+
    "\1\27\5\0\7\27\1\115\15\27\3\0\25\27\21\0"+
    "\1\27\5\0\7\27\1\116\15\27\3\0\25\27\21\0"+
    "\1\27\5\0\25\27\3\0\14\27\1\117\10\27\21\0"+
    "\1\27\5\0\25\27\3\0\15\27\1\77\7\27\21\0"+
    "\1\27\5\0\25\27\3\0\5\27\1\120\3\27\1\121"+
    "\3\27\1\102\7\27\21\0\1\27\5\0\25\27\3\0"+
    "\12\27\1\122\1\27\1\123\10\27\21\0\1\27\5\0"+
    "\25\27\3\0\1\27\1\124\10\27\1\107\12\27\21\0"+
    "\1\27\5\0\25\27\3\0\6\27\1\110\5\27\1\125"+
    "\10\27\21\0\1\27\5\0\25\27\3\0\15\27\1\126"+
    "\7\27\21\0\1\27\5\0\25\27\3\0\17\27\1\127"+
    "\5\27\21\0\1\27\5\0\25\27\3\0\17\27\1\130"+
    "\5\27\21\0\1\27\5\0\25\27\3\0\22\27\1\131"+
    "\2\27\21\0\1\27\5\0\25\27\3\0\10\27\1\132"+
    "\6\27\1\133\5\27\21\0\1\27\5\0\25\27\3\0"+
    "\10\27\1\134\14\27\7\0\1\135\63\0\1\136\4\0"+
    "\1\137\16\0\1\140\102\0\1\141\112\0\1\27\5\0"+
    "\15\27\1\142\7\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\15\27\1\143\7\27\21\0\1\27\5\0"+
    "\2\27\1\144\22\27\3\0\25\27\21\0\1\27\5\0"+
    "\20\27\1\145\4\27\3\0\25\27\21\0\1\27\5\0"+
    "\20\27\1\146\4\27\3\0\25\27\21\0\1\27\5\0"+
    "\3\27\1\147\21\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\4\27\1\150\20\27\21\0\1\27\5\0"+
    "\15\27\1\151\7\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\15\27\1\152\7\27\21\0\1\27\5\0"+
    "\21\27\1\153\3\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\21\27\1\154\3\27\21\0\1\27\5\0"+
    "\15\27\1\155\7\27\3\0\25\27\21\0\1\27\5\0"+
    "\13\27\1\156\11\27\3\0\25\27\21\0\1\27\5\0"+
    "\4\27\1\157\20\27\3\0\25\27\21\0\1\27\5\0"+
    "\10\27\1\160\14\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\4\27\1\161\20\27\21\0\1\27\5\0"+
    "\25\27\3\0\3\27\1\162\21\27\21\0\1\27\5\0"+
    "\25\27\3\0\20\27\1\163\4\27\21\0\1\27\5\0"+
    "\25\27\3\0\20\27\1\164\4\27\21\0\1\27\5\0"+
    "\25\27\3\0\4\27\1\165\20\27\21\0\1\27\5\0"+
    "\25\27\3\0\12\27\1\166\12\27\21\0\1\27\5\0"+
    "\25\27\3\0\16\27\1\167\2\27\1\154\3\27\21\0"+
    "\1\27\5\0\25\27\3\0\21\27\1\170\3\27\21\0"+
    "\1\27\5\0\25\27\3\0\15\27\1\171\7\27\21\0"+
    "\1\27\5\0\25\27\3\0\13\27\1\172\11\27\21\0"+
    "\1\27\5\0\25\27\3\0\5\27\1\173\17\27\21\0"+
    "\1\27\5\0\25\27\3\0\22\27\1\174\2\27\21\0"+
    "\1\27\5\0\25\27\3\0\11\27\1\175\13\27\21\0"+
    "\1\27\5\0\12\27\1\176\12\27\3\0\25\27\21\0"+
    "\1\27\5\0\25\27\3\0\12\27\1\177\12\27\21\0"+
    "\1\27\5\0\12\27\1\200\12\27\3\0\25\27\21\0"+
    "\1\27\5\0\16\27\1\201\6\27\3\0\25\27\21\0"+
    "\1\27\5\0\4\27\1\202\20\27\3\0\25\27\21\0"+
    "\1\27\5\0\3\27\1\203\12\27\1\204\6\27\3\0"+
    "\25\27\21\0\1\27\5\0\1\205\24\27\3\0\25\27"+
    "\21\0\1\27\5\0\25\27\3\0\1\27\1\206\23\27"+
    "\21\0\1\27\5\0\4\27\1\207\20\27\3\0\25\27"+
    "\21\0\1\27\5\0\25\27\3\0\5\27\1\210\17\27"+
    "\21\0\1\27\5\0\6\27\1\211\16\27\3\0\25\27"+
    "\21\0\1\27\5\0\1\212\24\27\3\0\25\27\21\0"+
    "\1\27\5\0\14\27\1\213\10\27\3\0\25\27\21\0"+
    "\1\27\5\0\12\27\1\214\12\27\3\0\25\27\21\0"+
    "\1\27\5\0\25\27\3\0\12\27\1\215\12\27\21\0"+
    "\1\27\5\0\25\27\3\0\16\27\1\216\6\27\21\0"+
    "\1\27\5\0\25\27\3\0\5\27\1\202\17\27\21\0"+
    "\1\27\5\0\25\27\3\0\4\27\1\217\11\27\1\220"+
    "\6\27\21\0\1\27\5\0\25\27\3\0\20\27\1\174"+
    "\4\27\21\0\1\27\5\0\25\27\3\0\22\27\1\221"+
    "\2\27\21\0\1\27\5\0\25\27\3\0\7\27\1\222"+
    "\15\27\21\0\1\27\5\0\25\27\3\0\1\27\1\223"+
    "\23\27\21\0\1\27\5\0\25\27\3\0\14\27\1\213"+
    "\10\27\21\0\1\27\5\0\25\27\3\0\5\27\1\224"+
    "\17\27\21\0\1\27\5\0\25\27\3\0\12\27\1\225"+
    "\12\27\21\0\1\27\5\0\4\27\1\226\20\27\3\0"+
    "\25\27\21\0\1\27\5\0\25\27\3\0\5\27\1\227"+
    "\17\27\21\0\1\27\5\0\1\230\24\27\3\0\25\27"+
    "\21\0\1\27\5\0\12\27\1\231\12\27\3\0\25\27"+
    "\21\0\1\27\5\0\4\27\1\232\20\27\3\0\25\27"+
    "\21\0\1\27\5\0\17\27\1\233\5\27\3\0\25\27"+
    "\21\0\1\27\5\0\21\27\1\234\3\27\3\0\25\27"+
    "\21\0\1\27\5\0\25\27\3\0\21\27\1\234\3\27"+
    "\21\0\1\27\5\0\6\27\1\235\16\27\3\0\25\27"+
    "\21\0\1\27\5\0\25\27\3\0\7\27\1\236\15\27"+
    "\21\0\1\27\5\0\17\27\1\237\5\27\3\0\25\27"+
    "\21\0\1\27\5\0\10\27\1\240\14\27\3\0\25\27"+
    "\21\0\1\27\5\0\4\27\1\241\20\27\3\0\25\27"+
    "\21\0\1\27\5\0\25\27\3\0\1\27\1\242\23\27"+
    "\21\0\1\27\5\0\25\27\3\0\12\27\1\243\12\27"+
    "\21\0\1\27\5\0\25\27\3\0\5\27\1\244\17\27"+
    "\21\0\1\27\5\0\25\27\3\0\17\27\1\245\5\27"+
    "\21\0\1\27\5\0\25\27\3\0\21\27\1\246\3\27"+
    "\21\0\1\27\5\0\25\27\3\0\17\27\1\247\5\27"+
    "\21\0\1\27\5\0\25\27\3\0\11\27\1\250\13\27"+
    "\21\0\1\27\5\0\25\27\3\0\5\27\1\241\17\27"+
    "\21\0\1\27\5\0\1\251\24\27\3\0\25\27\21\0"+
    "\1\27\5\0\25\27\3\0\1\27\1\252\23\27\21\0"+
    "\1\27\5\0\17\27\1\253\5\27\3\0\25\27\21\0"+
    "\1\27\5\0\1\254\24\27\3\0\25\27\21\0\1\27"+
    "\5\0\2\27\1\255\22\27\3\0\25\27\21\0\1\27"+
    "\5\0\15\27\1\256\7\27\3\0\25\27\21\0\1\27"+
    "\5\0\4\27\1\257\20\27\3\0\25\27\21\0\1\27"+
    "\5\0\25\27\3\0\5\27\1\260\17\27\21\0\1\27"+
    "\5\0\1\261\24\27\3\0\25\27\21\0\1\27\5\0"+
    "\13\27\1\262\11\27\3\0\25\27\21\0\1\27\5\0"+
    "\25\27\3\0\17\27\1\263\5\27\21\0\1\27\5\0"+
    "\25\27\3\0\1\27\1\264\23\27\21\0\1\27\5\0"+
    "\25\27\3\0\3\27\1\265\21\27\21\0\1\27\5\0"+
    "\25\27\3\0\15\27\1\266\7\27\21\0\1\27\5\0"+
    "\25\27\3\0\1\267\24\27\21\0\1\27\5\0\25\27"+
    "\3\0\1\27\1\270\23\27\21\0\1\27\5\0\25\27"+
    "\3\0\13\27\1\271\11\27\21\0\1\27\5\0\14\27"+
    "\1\272\10\27\3\0\25\27\21\0\1\27\5\0\25\27"+
    "\3\0\14\27\1\272\10\27\21\0\1\27\5\0\4\27"+
    "\1\273\20\27\3\0\25\27\21\0\1\27\5\0\24\27"+
    "\1\274\3\0\25\27\21\0\1\27\5\0\12\27\1\275"+
    "\12\27\3\0\25\27\21\0\1\27\5\0\6\27\1\276"+
    "\16\27\3\0\25\27\21\0\1\27\5\0\17\27\1\277"+
    "\5\27\3\0\25\27\21\0\1\27\5\0\25\27\3\0"+
    "\17\27\1\277\5\27\21\0\1\27\5\0\13\27\1\300"+
    "\11\27\3\0\25\27\21\0\1\27\5\0\16\27\1\301"+
    "\6\27\3\0\25\27\21\0\1\27\5\0\25\27\3\0"+
    "\5\27\1\302\17\27\21\0\1\27\5\0\25\27\3\0"+
    "\24\27\1\274\21\0\1\27\5\0\25\27\3\0\12\27"+
    "\1\303\12\27\21\0\1\27\5\0\25\27\3\0\7\27"+
    "\1\304\15\27\21\0\1\27\5\0\25\27\3\0\2\27"+
    "\1\305\3\27\1\306\2\27\1\307\13\27\21\0\1\27"+
    "\5\0\25\27\3\0\13\27\1\310\11\27\21\0\1\27"+
    "\5\0\25\27\3\0\16\27\1\311\6\27\17\0\1\312"+
    "\1\0\1\27\5\0\25\27\3\0\25\27\21\0\1\27"+
    "\5\0\1\313\24\27\3\0\25\27\21\0\1\27\5\0"+
    "\17\27\1\314\5\27\3\0\25\27\17\0\1\315\1\0"+
    "\1\27\5\0\25\27\3\0\25\27\21\0\1\27\5\0"+
    "\1\316\24\27\3\0\25\27\17\0\1\317\1\0\1\27"+
    "\5\0\25\27\3\0\25\27\21\0\1\27\5\0\25\27"+
    "\3\0\1\27\1\320\23\27\21\0\1\27\5\0\25\27"+
    "\3\0\17\27\1\321\5\27\21\0\1\27\5\0\25\27"+
    "\3\0\15\27\1\322\7\27\21\0\1\27\5\0\25\27"+
    "\3\0\12\27\1\323\12\27\21\0\1\27\5\0\25\27"+
    "\3\0\14\27\1\324\10\27\17\0\1\325\1\0\1\27"+
    "\5\0\25\27\3\0\25\27\21\0\1\27\5\0\25\27"+
    "\3\0\1\27\1\326\23\27\47\0\1\327\55\0\1\27"+
    "\5\0\17\27\1\330\5\27\3\0\25\27\21\0\1\27"+
    "\5\0\1\331\24\27\3\0\25\27\47\0\1\332\55\0"+
    "\1\27\5\0\17\27\1\333\5\27\3\0\25\27\77\0"+
    "\1\334\25\0\1\27\5\0\25\27\3\0\17\27\1\335"+
    "\5\27\21\0\1\27\5\0\25\27\3\0\1\27\1\336"+
    "\23\27\21\0\1\27\5\0\25\27\3\0\15\27\1\337"+
    "\7\27\21\0\1\27\5\0\25\27\3\0\15\27\1\340"+
    "\7\27\21\0\1\27\5\0\25\27\3\0\21\27\1\341"+
    "\3\27\77\0\1\342\25\0\1\27\5\0\25\27\3\0"+
    "\17\27\1\333\5\27\33\0\1\343\71\0\1\27\5\0"+
    "\4\27\1\344\20\27\3\0\25\27\21\0\1\27\5\0"+
    "\13\27\1\345\11\27\3\0\25\27\33\0\1\346\134\0"+
    "\1\347\40\0\1\27\5\0\25\27\3\0\5\27\1\350"+
    "\17\27\21\0\1\27\5\0\25\27\3\0\13\27\1\351"+
    "\11\27\21\0\1\27\5\0\25\27\3\0\12\27\1\352"+
    "\12\27\21\0\1\27\5\0\25\27\3\0\1\27\1\353"+
    "\23\27\64\0\1\354\50\0\1\355\71\0\1\356\1\0"+
    "\1\27\5\0\25\27\3\0\25\27\17\0\1\357\1\0"+
    "\1\27\5\0\25\27\3\0\25\27\31\0\1\360\134\0"+
    "\1\361\40\0\1\362\1\0\1\27\5\0\25\27\3\0"+
    "\25\27\17\0\1\363\1\0\1\27\5\0\25\27\3\0"+
    "\25\27\21\0\1\27\5\0\25\27\3\0\21\27\1\364"+
    "\3\27\62\0\1\365\71\0\1\366\102\0\1\367\103\0"+
    "\1\370\104\0\1\371\133\0\1\372\102\0\1\373\103\0"+
    "\1\374\104\0\1\375\42\0\1\376\77\0\1\377\103\0"+
    "\1\u0100\107\0\1\u0101\134\0\1\u0102\77\0\1\u0103\103\0"+
    "\1\u0104\107\0\1\u0105\57\0\1\u0106\70\0\1\u0107\103\0"+
    "\1\u0108\116\0\1\u0109\133\0\1\u010a\71\0\1\u010b\103\0"+
    "\1\u010c\115\0\1\u010d\52\0\1\u010e\110\0\1\u010f\103\0"+
    "\1\u0110\76\0\1\u0111\133\0\1\u010e\110\0\1\u0112\103\0"+
    "\1\u0113\76\0\1\u0111\47\0\1\u0114\103\0\1\u0115\134\0"+
    "\1\u0116\103\0\1\u0117\57\0\1\u0118\103\0\1\u0119\133\0"+
    "\1\u011a\103\0\1\u011b\52\0\1\u011c\103\0\1\u011d\133\0"+
    "\1\u011c\103\0\1\u011d\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16116];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\0\1\11\2\1\1\11\1\1"+
    "\3\11\1\0\1\11\2\1\1\11\15\1\2\11\14\1"+
    "\2\11\1\1\1\11\2\1\4\11\1\1\4\11\37\1"+
    "\5\11\150\1\1\0\2\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\2\1\2\0\4\1\10\0\1\1\31\0\1\11"+
    "\2\0\1\11\12\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comentario_multilinea = 0;
    int cotaInt = 1000000;
    float cotaFloat = 1000000.0f;
    int cotaString = 100;

    StringBuffer string = new StringBuffer();

    public ArrayList<MiToken> tablaDeSimbolos = new ArrayList<>();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public MiToken next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMENTARIO: {
              throw new Error("Comentario no balanceado");
            }  // fall though
            case 286: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 59: break;
          case 2:
            { string.setLength(0); 
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 60: break;
          case 3:
            { return token("COMENTARIO_SOLA_LINEA", yytext());
            }
            // fall through
          case 61: break;
          case 4:
            { return token("PARENTESISA", yytext());
            }
            // fall through
          case 62: break;
          case 5:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 63: break;
          case 6:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 64: break;
          case 7:
            { return token("SUMA", yytext());
            }
            // fall through
          case 65: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 66: break;
          case 9:
            { return token("RESTA", yytext());
            }
            // fall through
          case 67: break;
          case 10:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 68: break;
          case 11:
            { if( Integer.valueOf(yytext()) < cotaInt ){
                                     return token("INTEGER_LITERAL", yytext());}
                                    else{
                                     throw new Error("Supera el entero determinado");}
            }
            // fall through
          case 69: break;
          case 12:
            { return token("DOS_PUNTOS", yytext());
            }
            // fall through
          case 70: break;
          case 13:
            { return token("PUNTOCOMA", yytext());
            }
            // fall through
          case 71: break;
          case 14:
            { return token("MENOR", yytext());
            }
            // fall through
          case 72: break;
          case 15:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 73: break;
          case 16:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 74: break;
          case 17:
            { if( yytext().length() < cotaString ){
                                     return token("IDENTIFIER", yytext()); }
                                    else{
                                     throw new Error("Supera la cantidad de caracteres permitidos");}
            }
            // fall through
          case 75: break;
          case 18:
            { return token("CORCHETESA", yytext());
            }
            // fall through
          case 76: break;
          case 19:
            { return token("CORCHETESC", yytext());
            }
            // fall through
          case 77: break;
          case 20:
            { string.append( yytext() );
            }
            // fall through
          case 78: break;
          case 21:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 79: break;
          case 22:
            { string.append('\\');
            }
            // fall through
          case 80: break;
          case 23:
            { string.append('#');
            }
            // fall through
          case 81: break;
          case 24:
            { return token("DESIGUAL", yytext());
            }
            // fall through
          case 82: break;
          case 25:
            { yybegin(COMENTARIO);
                                   comentario_multilinea += 1;
            }
            // fall through
          case 83: break;
          case 26:
            { throw new Error("Comentario no balanceado");
            }
            // fall through
          case 84: break;
          case 27:
            { if( Float.valueOf(yytext()) < cotaFloat ){
                                     return token("FLOAT_LITERAL", yytext());}
                                    else{
                                     throw new Error("Supera el float determinado");}
            }
            // fall through
          case 85: break;
          case 28:
            { return token("ASIGNACION", yytext());
            }
            // fall through
          case 86: break;
          case 29:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 87: break;
          case 30:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 88: break;
          case 31:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 89: break;
          case 32:
            { return token("DO", yytext());
            }
            // fall through
          case 90: break;
          case 33:
            { return token("IF", yytext());
            }
            // fall through
          case 91: break;
          case 34:
            { return token("OR", yytext());
            }
            // fall through
          case 92: break;
          case 35:
            { string.append('\"');
            }
            // fall through
          case 93: break;
          case 36:
            { string.append('\n');
            }
            // fall through
          case 94: break;
          case 37:
            { string.append('\t');
            }
            // fall through
          case 95: break;
          case 38:
            { comentario_multilinea ++;
            }
            // fall through
          case 96: break;
          case 39:
            { comentario_multilinea --;
                                   if(comentario_multilinea == 0){
                                      yybegin(YYINITIAL);}
            }
            // fall through
          case 97: break;
          case 40:
            { return token("END", yytext());
            }
            // fall through
          case 98: break;
          case 41:
            { return token("AND", yytext());
            }
            // fall through
          case 99: break;
          case 42:
            { return token("NOT", yytext());
            }
            // fall through
          case 100: break;
          case 43:
            { return token("ELSE", yytext());
            }
            // fall through
          case 101: break;
          case 44:
            { return token("THEN", yytext());
            }
            // fall through
          case 102: break;
          case 45:
            { return token("BOOLEAN_LITERAL", yytext());
            }
            // fall through
          case 103: break;
          case 46:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 104: break;
          case 47:
            { return token("WHILE", yytext());
            }
            // fall through
          case 105: break;
          case 48:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 106: break;
          case 49:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 107: break;
          case 50:
            { return token("INTEGER",yytext());
            }
            // fall through
          case 108: break;
          case 51:
            { return token("SUMAIMPAR", yytext());
            }
            // fall through
          case 109: break;
          case 52:
            { return token("INPUT_INT", yytext());
            }
            // fall through
          case 110: break;
          case 53:
            { return token("INPUT_BOOL", yytext());
            }
            // fall through
          case 111: break;
          case 54:
            { return token("INPUT_FLOAT", yytext());
            }
            // fall through
          case 112: break;
          case 55:
            { return token("DECLARE_SECTION", yytext());
            }
            // fall through
          case 113: break;
          case 56:
            { return token("PROGRAM_SECTION", yytext());
            }
            // fall through
          case 114: break;
          case 57:
            { return token("ENDDECLARE_SECTION", yytext());
            }
            // fall through
          case 115: break;
          case 58:
            { return token("ENDPROGRAM_SECTION", yytext());
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
