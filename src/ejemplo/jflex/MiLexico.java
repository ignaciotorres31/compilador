// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\36\1\44\1\45\1\46\1\47\1\36"+
    "\1\50\1\36\1\51\1\36\1\52\1\53\1\54\1\0"+
    "\1\36\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\2\36\1\66\1\67\1\70\1\71"+
    "\1\72\1\36\1\73\1\74\1\75\1\76\1\36\1\77"+
    "\1\36\1\100\1\36\1\101\1\0\1\102\54\0\1\36"+
    "\12\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36"+
    "\1\0\1\36\21\0\165\36\1\0\2\36\2\0\4\36"+
    "\1\0\1\36\6\0\1\36\1\0\3\36\1\0\1\36"+
    "\1\0\24\36\1\0\123\36\1\0\213\36\1\0\255\36"+
    "\1\0\46\36\2\0\1\36\6\0\51\36\10\0\55\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\1\36"+
    "\10\0\33\36\4\0\4\36\35\0\13\36\5\0\100\36"+
    "\12\17\4\0\146\36\1\0\10\36\2\0\12\36\1\0"+
    "\6\36\12\17\3\36\2\0\1\36\20\0\73\36\2\0"+
    "\145\36\16\0\12\17\54\36\4\0\1\36\2\0\1\36"+
    "\2\0\56\36\22\0\34\36\4\0\13\36\65\0\25\36"+
    "\1\0\10\36\25\0\17\36\1\0\201\36\2\0\12\17"+
    "\1\0\23\36\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\1\36\3\0\4\36\2\0\11\36"+
    "\2\0\2\36\2\0\4\36\10\0\1\36\4\0\2\36"+
    "\1\0\5\36\2\0\12\17\2\36\12\0\1\36\1\0"+
    "\1\36\2\0\3\36\1\0\6\36\4\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\2\36\1\0"+
    "\2\36\2\0\1\36\1\0\5\36\4\0\2\36\2\0"+
    "\3\36\3\0\1\36\7\0\4\36\1\0\1\36\7\0"+
    "\12\17\6\36\13\0\3\36\1\0\11\36\1\0\3\36"+
    "\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36"+
    "\2\0\12\36\1\0\3\36\1\0\3\36\2\0\1\36"+
    "\17\0\4\36\2\0\12\17\11\0\7\36\1\0\3\36"+
    "\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\2\36\1\0\5\36\2\0\11\36\2\0\2\36"+
    "\2\0\3\36\10\0\2\36\4\0\2\36\1\0\5\36"+
    "\2\0\12\17\1\0\1\36\20\0\2\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36"+
    "\1\0\2\36\3\0\2\36\3\0\3\36\3\0\14\36"+
    "\4\0\5\36\3\0\3\36\1\0\4\36\2\0\1\36"+
    "\6\0\1\36\16\0\12\17\20\0\15\36\1\0\3\36"+
    "\1\0\27\36\1\0\20\36\3\0\10\36\1\0\3\36"+
    "\1\0\4\36\7\0\2\36\1\0\3\36\5\0\4\36"+
    "\2\0\12\17\20\0\4\36\1\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\12\36\1\0\5\36\2\0\11\36"+
    "\1\0\3\36\1\0\4\36\7\0\2\36\7\0\1\36"+
    "\1\0\4\36\2\0\12\17\1\0\2\36\15\0\4\36"+
    "\1\0\10\36\1\0\3\36\1\0\63\36\1\0\3\36"+
    "\1\0\5\36\5\0\4\36\7\0\5\36\2\0\12\17"+
    "\12\0\6\36\2\0\2\36\1\0\22\36\3\0\30\36"+
    "\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\36"+
    "\4\0\6\36\1\0\1\36\1\0\10\36\6\0\12\17"+
    "\2\0\2\36\15\0\72\36\5\0\17\36\1\0\12\17"+
    "\47\0\2\36\1\0\1\36\1\0\5\36\1\0\30\36"+
    "\1\0\1\36\1\0\27\36\2\0\5\36\1\0\1\36"+
    "\1\0\6\36\2\0\12\17\2\0\4\36\40\0\1\36"+
    "\27\0\2\36\6\0\12\17\13\0\1\36\1\0\1\36"+
    "\1\0\1\36\4\0\12\36\1\0\44\36\4\0\24\36"+
    "\1\0\22\36\1\0\44\36\11\0\1\36\71\0\100\36"+
    "\12\17\6\0\100\36\12\17\4\36\2\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\53\36\1\0\115\36\1\0"+
    "\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0"+
    "\51\36\1\0\4\36\2\0\41\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\17\36\1\0"+
    "\71\36\1\0\4\36\2\0\103\36\2\0\3\36\40\0"+
    "\20\36\20\0\126\36\2\0\6\36\3\0\u016c\36\2\0"+
    "\21\36\1\0\32\36\5\0\113\36\3\0\13\36\7\0"+
    "\15\36\1\0\7\36\13\0\25\36\13\0\24\36\14\0"+
    "\15\36\1\0\3\36\1\0\2\36\14\0\124\36\3\0"+
    "\1\36\4\0\2\36\2\0\12\17\41\0\3\36\2\0"+
    "\12\17\6\0\131\36\7\0\53\36\5\0\106\36\12\0"+
    "\37\36\1\0\14\36\4\0\14\36\12\0\12\17\36\36"+
    "\2\0\5\36\13\0\54\36\4\0\32\36\6\0\12\17"+
    "\46\0\34\36\4\0\77\36\1\0\35\36\2\0\1\36"+
    "\12\17\6\0\12\17\15\0\1\36\10\0\17\36\101\0"+
    "\114\36\4\0\12\17\21\0\11\36\14\0\60\36\12\17"+
    "\72\36\14\0\70\36\10\0\12\17\3\0\3\36\12\17"+
    "\44\36\2\0\11\36\7\0\53\36\2\0\3\36\20\0"+
    "\3\36\1\0\47\36\5\0\372\36\1\0\33\36\2\0"+
    "\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0"+
    "\65\36\1\0\7\36\1\0\1\36\3\0\3\36\1\0"+
    "\7\36\3\0\4\36\2\0\6\36\4\0\15\36\5\0"+
    "\3\36\1\0\7\36\102\0\2\36\23\0\1\36\34\0"+
    "\1\36\15\0\1\36\20\0\15\36\63\0\41\36\21\0"+
    "\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0"+
    "\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0"+
    "\1\36\21\0\51\36\u022d\0\64\36\26\0\57\36\1\0"+
    "\57\36\1\0\205\36\6\0\11\36\14\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\70\36\7\0\1\36\17\0"+
    "\30\36\11\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\40\36\57\0\1\36\325\0\3\36\31\0"+
    "\17\36\1\0\5\36\2\0\5\36\4\0\126\36\2\0"+
    "\2\36\2\0\3\36\1\0\132\36\1\0\4\36\5\0"+
    "\53\36\1\0\136\36\21\0\33\36\65\0\306\36\112\0"+
    "\360\36\20\0\215\36\103\0\56\36\2\0\15\36\3\0"+
    "\20\36\12\17\2\36\24\0\63\36\1\0\12\36\1\0"+
    "\163\36\45\0\11\36\2\0\147\36\2\0\65\36\2\0"+
    "\5\36\60\0\61\36\30\0\64\36\14\0\106\36\12\0"+
    "\12\17\6\0\30\36\3\0\1\36\1\0\3\36\12\17"+
    "\44\36\2\0\44\36\14\0\35\36\3\0\101\36\16\0"+
    "\1\36\12\17\6\0\20\36\12\17\5\36\1\0\67\36"+
    "\11\0\16\36\2\0\12\17\6\0\27\36\3\0\111\36"+
    "\30\0\3\36\2\0\20\36\2\0\5\36\12\0\6\36"+
    "\2\0\6\36\2\0\6\36\11\0\7\36\1\0\7\36"+
    "\1\0\53\36\1\0\14\36\10\0\173\36\1\0\2\36"+
    "\2\0\12\17\6\0\244\36\14\0\27\36\4\0\61\36"+
    "\4\0\156\36\2\0\152\36\46\0\7\36\14\0\5\36"+
    "\5\0\14\36\1\0\15\36\1\0\5\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\154\36\41\0\153\36"+
    "\22\0\100\36\2\0\66\36\50\0\14\36\4\0\20\36"+
    "\20\0\20\36\3\0\2\36\30\0\3\36\40\0\5\36"+
    "\1\0\207\36\23\0\12\17\7\0\32\36\4\0\1\36"+
    "\1\0\32\36\13\0\131\36\3\0\6\36\2\0\6\36"+
    "\2\0\6\36\2\0\3\36\43\0\14\36\1\0\32\36"+
    "\1\0\23\36\1\0\2\36\1\0\17\36\2\0\16\36"+
    "\42\0\173\36\105\0\65\36\210\0\1\36\202\0\35\36"+
    "\3\0\61\36\17\0\1\36\37\0\40\36\15\0\36\36"+
    "\5\0\53\36\5\0\36\36\2\0\44\36\4\0\10\36"+
    "\1\0\5\36\52\0\236\36\2\0\12\17\6\0\44\36"+
    "\4\0\44\36\4\0\50\36\10\0\64\36\234\0\67\36"+
    "\11\0\26\36\12\0\10\36\230\0\6\36\2\0\1\36"+
    "\1\0\54\36\1\0\2\36\3\0\1\36\2\0\27\36"+
    "\12\0\27\36\11\0\37\36\101\0\23\36\1\0\2\36"+
    "\12\0\26\36\12\0\32\36\106\0\70\36\6\0\2\36"+
    "\100\0\4\36\1\0\2\36\5\0\10\36\1\0\3\36"+
    "\1\0\35\36\2\0\3\36\4\0\1\36\40\0\35\36"+
    "\3\0\35\36\43\0\10\36\1\0\36\36\31\0\66\36"+
    "\12\0\26\36\12\0\23\36\15\0\22\36\156\0\111\36"+
    "\67\0\63\36\15\0\63\36\15\0\50\36\10\0\12\17"+
    "\306\0\35\36\12\0\1\36\10\0\41\36\217\0\27\36"+
    "\11\0\107\36\37\0\12\17\17\0\74\36\25\0\31\36"+
    "\7\0\12\17\6\0\65\36\1\0\12\17\4\0\3\36"+
    "\11\0\44\36\2\0\1\36\11\0\105\36\4\0\4\36"+
    "\3\0\12\17\1\36\1\0\1\36\43\0\22\36\1\0"+
    "\45\36\6\0\1\36\101\0\7\36\1\0\1\36\1\0"+
    "\4\36\1\0\17\36\1\0\12\36\7\0\73\36\5\0"+
    "\12\17\6\0\4\36\1\0\10\36\2\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\5\36\1\0"+
    "\12\36\2\0\2\36\2\0\3\36\2\0\1\36\6\0"+
    "\1\36\5\0\7\36\2\0\7\36\3\0\5\36\213\0"+
    "\113\36\5\0\12\17\4\0\2\36\40\0\106\36\1\0"+
    "\1\36\10\0\12\17\246\0\66\36\2\0\11\36\27\0"+
    "\6\36\42\0\101\36\3\0\1\36\13\0\12\17\46\0"+
    "\71\36\7\0\12\17\66\0\33\36\2\0\17\36\4\0"+
    "\12\17\306\0\73\36\145\0\100\36\12\17\25\0\1\36"+
    "\240\0\10\36\2\0\56\36\2\0\10\36\1\0\2\36"+
    "\33\0\77\36\10\0\1\36\10\0\112\36\3\0\1\36"+
    "\42\0\71\36\7\0\11\36\1\0\55\36\1\0\11\36"+
    "\17\0\12\17\30\0\36\36\2\0\26\36\1\0\16\36"+
    "\111\0\7\36\1\0\2\36\1\0\54\36\3\0\1\36"+
    "\1\0\2\36\1\0\11\36\10\0\12\17\6\0\6\36"+
    "\1\0\2\36\1\0\45\36\1\0\2\36\1\0\6\36"+
    "\7\0\12\17\u0136\0\27\36\11\0\232\36\146\0\157\36"+
    "\21\0\304\36\274\0\57\36\321\0\107\36\271\0\71\36"+
    "\7\0\37\36\1\0\12\17\146\0\36\36\2\0\5\36"+
    "\13\0\67\36\11\0\4\36\14\0\12\17\11\0\25\36"+
    "\5\0\23\36\260\0\100\36\200\0\113\36\4\0\71\36"+
    "\7\0\21\36\100\0\2\36\1\0\1\36\34\0\370\36"+
    "\10\0\363\36\15\0\37\36\61\0\3\36\21\0\4\36"+
    "\10\0\u018c\36\4\0\153\36\5\0\15\36\3\0\11\36"+
    "\7\0\12\36\3\0\2\36\306\0\5\36\3\0\6\36"+
    "\10\0\10\36\2\0\7\36\36\0\4\36\224\0\3\36"+
    "\273\0\125\36\1\0\107\36\1\0\2\36\2\0\1\36"+
    "\2\0\2\36\2\0\4\36\1\0\14\36\1\0\1\36"+
    "\1\0\7\36\1\0\101\36\1\0\4\36\2\0\10\36"+
    "\1\0\7\36\1\0\34\36\1\0\4\36\1\0\5\36"+
    "\1\0\1\36\3\0\7\36\1\0\u0154\36\2\0\31\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\10\36\2\0\62\17\67\36\4\0"+
    "\62\36\10\0\1\36\16\0\1\36\26\0\5\36\1\0"+
    "\17\36\120\0\7\36\1\0\21\36\2\0\7\36\1\0"+
    "\2\36\1\0\5\36\325\0\55\36\3\0\16\36\2\0"+
    "\12\17\4\0\1\36\u0171\0\60\36\12\17\6\0\305\36"+
    "\13\0\7\36\51\0\114\36\4\0\12\17\246\0\4\36"+
    "\1\0\33\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\12\36\1\0\4\36\1\0\1\36\1\0\1\36"+
    "\6\0\1\36\4\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\3\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\0\1\36\2\0\4\36\1\0\7\36"+
    "\1\0\4\36\1\0\4\36\1\0\1\36\1\0\12\36"+
    "\1\0\21\36\5\0\3\36\1\0\5\36\1\0\21\36"+
    "\164\0\32\36\6\0\32\36\6\0\32\36\166\0\327\36"+
    "\51\0\65\36\13\0\336\36\2\0\u0182\36\16\0\u0131\36"+
    "\37\0\36\36\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\11\0\1\22\1\23\14\0\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\26\1\1\1\2"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\4\0"+
    "\1\41\4\0\1\42\14\0\1\43\5\0\1\44\1\45"+
    "\1\46\1\47\1\50\1\1\4\0\2\51\10\0\1\52"+
    "\4\0\1\53\5\0\1\1\14\0\1\54\7\0\1\55"+
    "\1\0\1\1\6\0\1\56\4\0\1\57\6\0\1\1"+
    "\20\0\1\1\1\60\1\0\1\61\2\0\1\62\7\0"+
    "\1\1\12\0\1\1\4\0\1\63\4\0\1\1\10\0"+
    "\1\1\10\0\1\1\10\0\1\1\10\0\1\1\10\0"+
    "\1\1\1\64\2\0\1\65\2\0\1\1\4\0\1\1"+
    "\4\0\1\1\1\66\1\67\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\311\0\u010c\0\u014f\0\311"+
    "\0\u0192\0\311\0\u01d5\0\311\0\311\0\311\0\u0218\0\311"+
    "\0\u025b\0\311\0\311\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\311"+
    "\0\311\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\311\0\311\0\u08e6"+
    "\0\u08e6\0\u0929\0\u08e6\0\u096c\0\u09af\0\u09f2\0\u09f2\0\u09f2"+
    "\0\u08e6\0\u08e6\0\u0a35\0\u09f2\0\u09f2\0\u09f2\0\u0a78\0\u0abb"+
    "\0\u0afe\0\u0b41\0\u08e6\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u08e6"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u08e6\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u08e6\0\u08e6\0\u08e6\0\u08e6\0\u08e6\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u08e6\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u08e6\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u08e6\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a"+
    "\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u08e6\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u08e6\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u08e6"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u08e6\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u08e6\0\u25b0\0\u08e6"+
    "\0\u25f3\0\u2636\0\u08e6\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u08e6\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u08e6\0\u3994\0\u39d7"+
    "\0\u08e6\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u08e6\0\u08e6"+
    "\0\u3d81\0\u08e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\0\1\27\1\0\1\30"+
    "\1\31\1\32\2\0\1\33\5\0\1\34\1\0\1\35"+
    "\1\36\1\0\1\37\1\0\1\40\1\4\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\1\46\2\0\1\47\2\0"+
    "\1\50\1\51\1\52\1\0\1\53\1\54\1\0\1\55"+
    "\1\0\1\56\1\57\5\60\1\61\45\60\1\62\35\60"+
    "\1\63\1\64\1\60\1\65\71\60\11\66\1\0\5\66"+
    "\1\0\5\66\25\0\3\66\24\0\4\66\1\67\6\66"+
    "\1\0\5\66\1\0\5\66\25\0\3\66\24\0\13\66"+
    "\1\0\5\66\1\0\3\66\1\70\1\66\25\0\3\66"+
    "\24\0\13\66\1\71\5\66\1\0\5\66\25\0\3\66"+
    "\24\0\2\66\10\0\1\72\72\0\11\66\1\0\5\66"+
    "\1\73\5\66\25\0\3\66\24\0\2\66\15\0\1\73"+
    "\1\0\1\21\63\0\11\66\1\0\5\66\1\0\3\66"+
    "\1\74\1\66\25\0\3\66\24\0\13\66\1\0\5\66"+
    "\1\0\3\66\1\75\1\66\25\0\3\66\24\0\13\66"+
    "\1\0\5\66\1\0\3\66\1\76\1\66\25\0\3\66"+
    "\24\0\2\66\42\0\1\77\26\0\1\100\42\0\1\101"+
    "\3\0\1\102\4\0\1\103\101\0\1\104\26\0\1\105"+
    "\51\0\1\106\26\0\1\107\46\0\1\110\6\0\1\111"+
    "\26\0\1\112\56\0\1\113\105\0\1\114\67\0\1\115"+
    "\102\0\1\116\136\0\1\117\103\0\1\100\72\0\1\120"+
    "\3\0\1\121\3\0\1\103\101\0\1\122\67\0\1\123"+
    "\10\0\1\107\76\0\1\110\5\0\1\112\103\0\1\124"+
    "\104\0\1\125\102\0\1\126\105\0\1\127\70\0\1\130"+
    "\6\0\1\131\73\0\1\132\126\0\1\133\62\0\1\134"+
    "\4\0\1\135\16\0\1\136\101\0\1\137\72\0\11\140"+
    "\1\0\5\140\1\0\5\140\25\0\3\140\24\0\2\140"+
    "\17\0\1\73\125\0\1\141\131\0\1\142\40\0\1\143"+
    "\120\0\1\144\65\0\1\145\132\0\1\146\64\0\1\147"+
    "\131\0\1\150\57\0\1\151\131\0\1\152\47\0\1\153"+
    "\100\0\1\154\73\0\1\155\106\0\1\156\125\0\1\157"+
    "\101\0\1\160\117\0\1\161\66\0\1\162\110\0\1\163"+
    "\111\0\1\164\76\0\1\165\100\0\1\166\74\0\1\167"+
    "\117\0\1\170\71\0\1\171\15\0\11\172\1\0\5\172"+
    "\1\0\5\172\25\0\3\172\24\0\2\172\37\0\1\173"+
    "\131\0\1\174\53\0\1\175\106\0\1\176\67\0\1\177"+
    "\12\0\1\200\64\0\1\201\132\0\1\202\56\0\1\203"+
    "\132\0\1\204\54\0\1\205\74\0\1\206\116\0\1\207"+
    "\100\0\1\210\131\0\1\211\106\0\1\212\70\0\1\213"+
    "\11\0\1\214\104\0\1\170\71\0\1\215\74\0\1\216"+
    "\115\0\1\207\73\0\1\217\107\0\1\220\14\0\11\221"+
    "\1\0\5\221\1\0\5\221\25\0\3\221\24\0\2\221"+
    "\31\0\1\222\132\0\1\223\46\0\1\224\114\0\1\225"+
    "\74\0\1\226\115\0\1\227\104\0\1\230\131\0\1\230"+
    "\40\0\1\231\132\0\1\232\63\0\1\233\73\0\1\234"+
    "\76\0\1\235\126\0\1\236\113\0\1\237\75\0\1\240"+
    "\114\0\1\241\102\0\1\242\74\0\1\243\76\0\1\235"+
    "\21\0\11\244\1\0\5\244\1\0\5\244\25\0\3\244"+
    "\24\0\2\244\25\0\1\245\132\0\1\246\71\0\1\247"+
    "\63\0\1\250\104\0\1\251\115\0\1\252\71\0\1\253"+
    "\132\0\1\254\46\0\1\255\115\0\1\256\135\0\1\257"+
    "\64\0\1\260\104\0\1\261\114\0\1\262\66\0\1\263"+
    "\114\0\1\264\13\0\11\265\1\0\5\265\1\0\5\265"+
    "\25\0\3\265\24\0\2\265\41\0\1\266\131\0\1\266"+
    "\43\0\1\267\122\0\1\270\70\0\1\271\76\0\1\272"+
    "\113\0\1\273\131\0\1\273\47\0\1\274\105\0\1\275"+
    "\120\0\1\276\121\0\1\270\70\0\1\277\77\0\1\300"+
    "\106\0\1\301\105\0\1\302\10\0\11\303\1\0\5\303"+
    "\1\0\5\303\25\0\3\303\24\0\2\303\15\0\1\304"+
    "\112\0\1\305\121\0\1\306\53\0\1\307\112\0\1\310"+
    "\72\0\1\311\142\0\1\312\120\0\1\313\24\0\1\314"+
    "\142\0\1\315\25\0\11\316\1\0\5\316\1\0\5\316"+
    "\25\0\3\316\24\0\2\316\45\0\1\317\101\0\1\320"+
    "\63\0\1\321\122\0\1\322\101\0\1\323\132\0\1\324"+
    "\101\0\1\325\64\0\1\326\121\0\1\327\101\0\1\323"+
    "\7\0\11\330\1\0\5\330\1\0\5\330\25\0\3\330"+
    "\24\0\2\330\31\0\1\331\102\0\1\332\111\0\1\333"+
    "\73\0\1\334\132\0\1\335\102\0\1\336\110\0\1\337"+
    "\74\0\1\340\21\0\11\341\1\0\5\341\1\0\5\341"+
    "\25\0\3\341\24\0\2\341\27\0\1\342\70\0\1\343"+
    "\102\0\1\344\114\0\1\345\132\0\1\346\40\0\1\347"+
    "\102\0\1\350\144\0\1\351\23\0\11\352\1\0\5\352"+
    "\1\0\5\352\25\0\3\352\24\0\2\352\46\0\1\353"+
    "\101\0\1\354\102\0\1\355\103\0\1\356\131\0\1\357"+
    "\101\0\1\360\102\0\1\361\103\0\1\362\5\0\11\363"+
    "\1\0\5\363\1\0\5\363\25\0\3\363\24\0\2\363"+
    "\35\0\1\364\76\0\1\365\102\0\1\366\106\0\1\367"+
    "\132\0\1\370\76\0\1\371\102\0\1\372\106\0\1\373"+
    "\15\0\11\374\1\0\5\374\1\0\5\374\25\0\3\374"+
    "\24\0\2\374\42\0\1\375\67\0\1\376\102\0\1\377"+
    "\115\0\1\u0100\131\0\1\u0101\70\0\1\u0102\102\0\1\u0103"+
    "\114\0\1\u0104\11\0\11\u0105\1\0\5\u0105\1\0\5\u0105"+
    "\25\0\3\u0105\24\0\2\u0105\41\0\1\u0106\107\0\1\u0107"+
    "\102\0\1\u0108\75\0\1\u0109\131\0\1\u0106\107\0\1\u010a"+
    "\102\0\1\u010b\75\0\1\u0109\12\0\11\u010c\1\0\5\u010c"+
    "\1\0\5\u010c\25\0\3\u010c\24\0\2\u010c\35\0\1\u010d"+
    "\102\0\1\u010e\132\0\1\u010f\102\0\1\u0110\15\0\11\u0111"+
    "\1\0\5\u0111\1\0\5\u0111\25\0\3\u0111\24\0\2\u0111"+
    "\42\0\1\u0112\102\0\1\u0113\131\0\1\u0114\102\0\1\u0115"+
    "\11\0\11\u0116\1\0\5\u0116\1\0\5\u0116\25\0\3\u0116"+
    "\24\0\2\u0116\41\0\1\u0117\102\0\1\u0118\131\0\1\u0117"+
    "\102\0\1\u0118\12\0\11\u0119\1\0\5\u0119\1\0\5\u0119"+
    "\25\0\3\u0119\24\0\2\u0119\11\u011a\1\0\5\u011a\1\0"+
    "\5\u011a\25\0\3\u011a\24\0\2\u011a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\23\1\11\0\2\1\14\0\2\1\2\11\1\1"+
    "\1\11\5\1\2\11\4\1\4\0\1\11\4\0\1\11"+
    "\14\0\1\11\5\0\5\11\1\1\4\0\1\1\1\11"+
    "\10\0\1\11\4\0\1\11\5\0\1\1\14\0\1\11"+
    "\7\0\1\11\1\0\1\1\6\0\1\11\4\0\1\11"+
    "\6\0\1\1\20\0\1\1\1\11\1\0\1\11\2\0"+
    "\1\11\7\0\1\1\12\0\1\1\4\0\1\11\4\0"+
    "\1\1\10\0\1\1\10\0\1\1\10\0\1\1\10\0"+
    "\1\1\10\0\1\1\1\11\2\0\1\11\2\0\1\1"+
    "\4\0\1\1\4\0\1\1\2\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comentario_multilinea = 0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMENTARIO: {
              throw new Error("Comentario no balanceado");
            }  // fall though
            case 283: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 56: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 57: break;
          case 3:
            { string.setLength(0); 
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 58: break;
          case 4:
            { return token("PARENTESISA", yytext());
            }
            // fall through
          case 59: break;
          case 5:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 60: break;
          case 6:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 61: break;
          case 7:
            { return token("SUMA", yytext());
            }
            // fall through
          case 62: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 63: break;
          case 9:
            { return token("RESTA", yytext());
            }
            // fall through
          case 64: break;
          case 10:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 65: break;
          case 11:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 66: break;
          case 12:
            { return token("INTEGER_LITERAL", yytext());
            }
            // fall through
          case 67: break;
          case 13:
            { return token("DOS_PUNTOS", yytext());
            }
            // fall through
          case 68: break;
          case 14:
            { return token("EOL", yytext());
            }
            // fall through
          case 69: break;
          case 15:
            { return token("MENOR", yytext());
            }
            // fall through
          case 70: break;
          case 16:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 71: break;
          case 17:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 72: break;
          case 18:
            { return token("CORCHETESA", yytext());
            }
            // fall through
          case 73: break;
          case 19:
            { return token("CORCHETESC", yytext());
            }
            // fall through
          case 74: break;
          case 20:
            { return token("LLAVESA", yytext());
            }
            // fall through
          case 75: break;
          case 21:
            { return token("LLAVESC", yytext());
            }
            // fall through
          case 76: break;
          case 22:
            { string.append( yytext() );
            }
            // fall through
          case 77: break;
          case 23:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 78: break;
          case 24:
            { string.append('\\');
            }
            // fall through
          case 79: break;
          case 25:
            { string.append('#');
            }
            // fall through
          case 80: break;
          case 26:
            { return token("DESIGUAL", yytext());
            }
            // fall through
          case 81: break;
          case 27:
            { yybegin(COMENTARIO);
                                   comentario_multilinea += 1;
            }
            // fall through
          case 82: break;
          case 28:
            { throw new Error("Comentario no balanceado");
            }
            // fall through
          case 83: break;
          case 29:
            { return token("FLOAT_LITERAL", yytext());
            }
            // fall through
          case 84: break;
          case 30:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 85: break;
          case 31:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 86: break;
          case 32:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 87: break;
          case 33:
            { return token("DO", yytext());
            }
            // fall through
          case 88: break;
          case 34:
            { return token("IF", yytext());
            }
            // fall through
          case 89: break;
          case 35:
            { return token("OR", yytext());
            }
            // fall through
          case 90: break;
          case 36:
            { string.append('\"');
            }
            // fall through
          case 91: break;
          case 37:
            { string.append('\n');
            }
            // fall through
          case 92: break;
          case 38:
            { string.append('\t');
            }
            // fall through
          case 93: break;
          case 39:
            { comentario_multilinea ++;
            }
            // fall through
          case 94: break;
          case 40:
            { comentario_multilinea --;
                                   if(comentario_multilinea == 0){
                                      yybegin(YYINITIAL);}
            }
            // fall through
          case 95: break;
          case 41:
            { return token("END", yytext());
            }
            // fall through
          case 96: break;
          case 42:
            { return token("AND", yytext());
            }
            // fall through
          case 97: break;
          case 43:
            { return token("NOT", yytext());
            }
            // fall through
          case 98: break;
          case 44:
            { return token("THEN", yytext());
            }
            // fall through
          case 99: break;
          case 45:
            { return token("BOOLEAN_LITERAL", yytext());
            }
            // fall through
          case 100: break;
          case 46:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 101: break;
          case 47:
            { return token("WHILE", yytext());
            }
            // fall through
          case 102: break;
          case 48:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 103: break;
          case 49:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 104: break;
          case 50:
            { return token("INTEGER",yytext());
            }
            // fall through
          case 105: break;
          case 51:
            { return token("SUMAIMPAR", yytext());
            }
            // fall through
          case 106: break;
          case 52:
            { return token("DECLARE.SECTION", yytext());
            }
            // fall through
          case 107: break;
          case 53:
            { return token("PROGRAM.SECTION", yytext());
            }
            // fall through
          case 108: break;
          case 54:
            { return token("ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 109: break;
          case 55:
            { return token("ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
