// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\211\u0100\1\u0600\1\u0100\1\u0e00\1\u0f00\1\u1000\1\u1100\123\u0100"+
    "\1\u0900\4\u0100\1\u1200\10\u0100\1\u1300\2\u0100\1\u1400\1\u1500"+
    "\1\u1100\1\u0100\1\u0500\1\u0100\1\u1600\1\u1300\1\u0800\3\u0100"+
    "\1\u1000\1\u1700\114\u0100\1\u1800\1\u1000\153\u0100\1\u1900\11\u0100"+
    "\1\u1a00\1\u1100\6\u0100\1\u1000\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\36\1\44\1\45\1\46\1\47\1\36"+
    "\1\50\1\36\1\51\1\36\1\52\1\53\1\54\1\0"+
    "\1\55\1\0\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\2\36\1\67\1\70\1\71\1\72"+
    "\1\73\1\36\1\74\1\75\1\76\1\77\1\36\1\100"+
    "\1\36\1\101\1\36\1\102\1\0\1\103\u01e2\0\12\104"+
    "\206\0\12\104\306\0\12\104\234\0\12\104\166\0\12\104"+
    "\140\0\12\104\166\0\12\104\106\0\12\104\u0116\0\12\104"+
    "\106\0\12\104\u0146\0\12\104\46\0\12\104\u012c\0\12\104"+
    "\200\0\12\104\246\0\12\104\6\0\12\104\266\0\12\104"+
    "\126\0\12\104\206\0\12\104\6\0\12\104\u0176\0\12\104"+
    "\46\0\12\104\306\0\12\104\26\0\12\104\126\0\12\104"+
    "\u0196\0\12\104\246\0\12\104\206\0\12\104\u012c\0\12\104"+
    "\200\0\12\104\74\0\12\104\220\0\12\104\166\0\12\104"+
    "\146\0\12\104\206\0\12\104\106\0\12\104\266\0\12\104"+
    "\u0164\0\62\104\100\0\12\104\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\12\21\1\22\1\23\14\21\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\26\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\4\21\1\41\4\21\1\42"+
    "\14\21\1\43\5\21\1\44\1\45\1\46\1\47\1\50"+
    "\4\21\2\51\10\21\1\52\4\21\1\53\21\21\1\54"+
    "\7\21\1\55\7\21\1\56\4\21\1\57\26\21\1\60"+
    "\1\21\1\61\2\21\1\62\7\21\1\0\2\21\1\0"+
    "\1\21\1\0\2\21\1\0\1\21\1\0\2\21\1\0"+
    "\1\63\1\0\2\21\2\0\2\21\2\0\2\21\41\0"+
    "\1\64\2\0\1\65\12\0\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\317\0\u019e"+
    "\0\317\0\u01e3\0\317\0\317\0\317\0\u0228\0\317\0\u026d"+
    "\0\317\0\317\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\317"+
    "\0\317\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\317\0\317\0\317"+
    "\0\317\0\u096f\0\317\0\u09b4\0\u09f9\0\317\0\317\0\317"+
    "\0\u0228\0\317\0\317\0\317\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d"+
    "\0\u0381\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0381\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0381\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\317\0\317\0\317\0\317\0\317\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u0381\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\u0381\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u0381\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u0381\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u0381\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u0381\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u0381"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u0381\0\u24ed"+
    "\0\u0381\0\u2532\0\u2577\0\u0381\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u0381\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\317\0\u3741"+
    "\0\u3786\0\317\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\317\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\26\1\30"+
    "\1\31\1\32\2\26\1\33\5\26\1\34\1\26\1\35"+
    "\1\36\1\26\1\37\1\26\1\40\1\0\1\41\1\0"+
    "\1\42\1\43\1\26\1\44\1\45\1\46\2\26\1\47"+
    "\2\26\1\50\1\51\1\52\1\26\1\53\1\54\1\26"+
    "\1\55\1\26\1\56\1\57\1\20\5\60\1\61\45\60"+
    "\1\62\37\60\1\63\1\64\1\60\1\65\73\60\107\0"+
    "\1\4\125\0\1\66\72\0\1\67\103\0\1\70\113\0"+
    "\1\71\64\0\1\71\15\0\1\71\1\0\1\20\64\0"+
    "\1\20\23\0\1\72\104\0\1\73\104\0\1\74\100\0"+
    "\1\26\5\0\25\26\3\0\25\26\22\0\1\26\5\0"+
    "\15\26\1\75\7\26\3\0\15\26\1\76\7\26\22\0"+
    "\1\26\5\0\4\26\1\77\3\26\1\100\4\26\1\101"+
    "\7\26\3\0\25\26\22\0\1\26\5\0\14\26\1\102"+
    "\10\26\3\0\14\26\1\103\10\26\22\0\1\26\5\0"+
    "\12\26\1\104\12\26\3\0\12\26\1\105\12\26\22\0"+
    "\1\26\5\0\5\26\1\106\6\26\1\107\10\26\3\0"+
    "\14\26\1\110\10\26\22\0\1\26\5\0\17\26\1\111"+
    "\5\26\3\0\25\26\22\0\1\26\5\0\22\26\1\112"+
    "\2\26\3\0\25\26\22\0\1\26\5\0\7\26\1\113"+
    "\15\26\3\0\25\26\22\0\1\26\5\0\7\26\1\114"+
    "\15\26\3\0\25\26\22\0\1\26\5\0\25\26\3\0"+
    "\14\26\1\115\10\26\22\0\1\26\5\0\25\26\3\0"+
    "\15\26\1\76\7\26\22\0\1\26\5\0\25\26\3\0"+
    "\5\26\1\116\3\26\1\117\3\26\1\101\7\26\22\0"+
    "\1\26\5\0\25\26\3\0\14\26\1\120\10\26\22\0"+
    "\1\26\5\0\25\26\3\0\1\26\1\121\10\26\1\105"+
    "\12\26\22\0\1\26\5\0\25\26\3\0\6\26\1\106"+
    "\5\26\1\110\10\26\22\0\1\26\5\0\25\26\3\0"+
    "\15\26\1\122\7\26\22\0\1\26\5\0\25\26\3\0"+
    "\17\26\1\123\5\26\22\0\1\26\5\0\25\26\3\0"+
    "\17\26\1\124\5\26\22\0\1\26\5\0\25\26\3\0"+
    "\22\26\1\125\2\26\22\0\1\26\5\0\25\26\3\0"+
    "\10\26\1\126\6\26\1\127\5\26\22\0\1\26\5\0"+
    "\25\26\3\0\10\26\1\130\14\26\10\0\1\131\63\0"+
    "\1\132\4\0\1\133\17\0\1\134\103\0\1\135\113\0"+
    "\1\26\5\0\15\26\1\136\7\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\15\26\1\137\7\26\22\0"+
    "\1\26\5\0\2\26\1\140\22\26\3\0\25\26\22\0"+
    "\1\26\5\0\20\26\1\141\4\26\3\0\25\26\22\0"+
    "\1\26\5\0\3\26\1\142\21\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\4\26\1\143\20\26\22\0"+
    "\1\26\5\0\15\26\1\144\7\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\15\26\1\145\7\26\22\0"+
    "\1\26\5\0\21\26\1\146\3\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\21\26\1\147\3\26\22\0"+
    "\1\26\5\0\15\26\1\150\7\26\3\0\25\26\22\0"+
    "\1\26\5\0\13\26\1\151\11\26\3\0\25\26\22\0"+
    "\1\26\5\0\4\26\1\152\20\26\3\0\25\26\22\0"+
    "\1\26\5\0\10\26\1\153\14\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\4\26\1\154\20\26\22\0"+
    "\1\26\5\0\25\26\3\0\3\26\1\155\21\26\22\0"+
    "\1\26\5\0\25\26\3\0\20\26\1\156\4\26\22\0"+
    "\1\26\5\0\25\26\3\0\4\26\1\157\20\26\22\0"+
    "\1\26\5\0\25\26\3\0\12\26\1\160\12\26\22\0"+
    "\1\26\5\0\25\26\3\0\21\26\1\161\3\26\22\0"+
    "\1\26\5\0\25\26\3\0\15\26\1\162\7\26\22\0"+
    "\1\26\5\0\25\26\3\0\13\26\1\163\11\26\22\0"+
    "\1\26\5\0\25\26\3\0\5\26\1\164\17\26\22\0"+
    "\1\26\5\0\25\26\3\0\22\26\1\165\2\26\22\0"+
    "\1\26\5\0\25\26\3\0\11\26\1\166\13\26\22\0"+
    "\1\26\5\0\12\26\1\167\12\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\12\26\1\170\12\26\22\0"+
    "\1\26\5\0\12\26\1\171\12\26\3\0\25\26\22\0"+
    "\1\26\5\0\16\26\1\172\6\26\3\0\25\26\22\0"+
    "\1\26\5\0\3\26\1\173\12\26\1\174\6\26\3\0"+
    "\25\26\22\0\1\26\5\0\1\175\24\26\3\0\25\26"+
    "\22\0\1\26\5\0\25\26\3\0\1\26\1\176\23\26"+
    "\22\0\1\26\5\0\4\26\1\177\20\26\3\0\25\26"+
    "\22\0\1\26\5\0\25\26\3\0\5\26\1\200\17\26"+
    "\22\0\1\26\5\0\6\26\1\201\16\26\3\0\25\26"+
    "\22\0\1\26\5\0\1\202\24\26\3\0\25\26\22\0"+
    "\1\26\5\0\14\26\1\203\10\26\3\0\25\26\22\0"+
    "\1\26\5\0\12\26\1\204\12\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\12\26\1\205\12\26\22\0"+
    "\1\26\5\0\25\26\3\0\16\26\1\206\6\26\22\0"+
    "\1\26\5\0\25\26\3\0\4\26\1\207\11\26\1\210"+
    "\6\26\22\0\1\26\5\0\25\26\3\0\20\26\1\165"+
    "\4\26\22\0\1\26\5\0\25\26\3\0\7\26\1\211"+
    "\15\26\22\0\1\26\5\0\25\26\3\0\1\26\1\212"+
    "\23\26\22\0\1\26\5\0\25\26\3\0\14\26\1\203"+
    "\10\26\22\0\1\26\5\0\25\26\3\0\5\26\1\213"+
    "\17\26\22\0\1\26\5\0\25\26\3\0\12\26\1\214"+
    "\12\26\22\0\1\26\5\0\4\26\1\215\20\26\3\0"+
    "\25\26\22\0\1\26\5\0\25\26\3\0\5\26\1\216"+
    "\17\26\22\0\1\26\5\0\1\217\24\26\3\0\25\26"+
    "\22\0\1\26\5\0\12\26\1\220\12\26\3\0\25\26"+
    "\22\0\1\26\5\0\4\26\1\221\20\26\3\0\25\26"+
    "\22\0\1\26\5\0\17\26\1\222\5\26\3\0\25\26"+
    "\22\0\1\26\5\0\21\26\1\223\3\26\3\0\25\26"+
    "\22\0\1\26\5\0\25\26\3\0\21\26\1\223\3\26"+
    "\22\0\1\26\5\0\6\26\1\224\16\26\3\0\25\26"+
    "\22\0\1\26\5\0\25\26\3\0\7\26\1\225\15\26"+
    "\22\0\1\26\5\0\17\26\1\226\5\26\3\0\25\26"+
    "\22\0\1\26\5\0\10\26\1\227\14\26\3\0\25\26"+
    "\22\0\1\26\5\0\4\26\1\230\20\26\3\0\25\26"+
    "\22\0\1\26\5\0\25\26\3\0\1\26\1\231\23\26"+
    "\22\0\1\26\5\0\25\26\3\0\12\26\1\232\12\26"+
    "\22\0\1\26\5\0\25\26\3\0\5\26\1\233\17\26"+
    "\22\0\1\26\5\0\25\26\3\0\17\26\1\234\5\26"+
    "\22\0\1\26\5\0\25\26\3\0\17\26\1\235\5\26"+
    "\22\0\1\26\5\0\25\26\3\0\11\26\1\236\13\26"+
    "\22\0\1\26\5\0\25\26\3\0\5\26\1\230\17\26"+
    "\22\0\1\26\5\0\1\237\24\26\3\0\25\26\22\0"+
    "\1\26\5\0\25\26\3\0\1\26\1\240\23\26\22\0"+
    "\1\26\5\0\17\26\1\241\5\26\3\0\25\26\22\0"+
    "\1\26\5\0\1\242\24\26\3\0\25\26\22\0\1\26"+
    "\5\0\2\26\1\243\22\26\3\0\25\26\22\0\1\26"+
    "\5\0\15\26\1\244\7\26\3\0\25\26\22\0\1\26"+
    "\5\0\4\26\1\245\20\26\3\0\25\26\22\0\1\26"+
    "\5\0\25\26\3\0\5\26\1\246\17\26\22\0\1\26"+
    "\5\0\1\247\24\26\3\0\25\26\22\0\1\26\5\0"+
    "\13\26\1\250\11\26\3\0\25\26\22\0\1\26\5\0"+
    "\25\26\3\0\17\26\1\251\5\26\22\0\1\26\5\0"+
    "\25\26\3\0\1\26\1\252\23\26\22\0\1\26\5\0"+
    "\25\26\3\0\3\26\1\253\21\26\22\0\1\26\5\0"+
    "\25\26\3\0\15\26\1\254\7\26\22\0\1\26\5\0"+
    "\25\26\3\0\1\26\1\255\23\26\22\0\1\26\5\0"+
    "\25\26\3\0\13\26\1\256\11\26\22\0\1\26\5\0"+
    "\14\26\1\257\10\26\3\0\25\26\22\0\1\26\5\0"+
    "\25\26\3\0\14\26\1\257\10\26\22\0\1\26\5\0"+
    "\4\26\1\260\20\26\3\0\25\26\22\0\1\26\5\0"+
    "\24\26\1\261\3\0\25\26\22\0\1\26\5\0\12\26"+
    "\1\262\12\26\3\0\25\26\22\0\1\26\5\0\6\26"+
    "\1\263\16\26\3\0\25\26\22\0\1\26\5\0\17\26"+
    "\1\264\5\26\3\0\25\26\22\0\1\26\5\0\25\26"+
    "\3\0\17\26\1\264\5\26\22\0\1\26\5\0\13\26"+
    "\1\265\11\26\3\0\25\26\22\0\1\26\5\0\16\26"+
    "\1\266\6\26\3\0\25\26\22\0\1\26\5\0\25\26"+
    "\3\0\5\26\1\267\17\26\22\0\1\26\5\0\25\26"+
    "\3\0\24\26\1\261\22\0\1\26\5\0\25\26\3\0"+
    "\12\26\1\270\12\26\22\0\1\26\5\0\25\26\3\0"+
    "\7\26\1\271\15\26\22\0\1\26\5\0\25\26\3\0"+
    "\13\26\1\272\11\26\22\0\1\26\5\0\25\26\3\0"+
    "\16\26\1\273\6\26\20\0\1\274\1\0\1\26\5\0"+
    "\25\26\3\0\25\26\22\0\1\26\5\0\1\275\24\26"+
    "\3\0\25\26\22\0\1\26\5\0\17\26\1\276\5\26"+
    "\3\0\25\26\20\0\1\277\1\0\1\26\5\0\25\26"+
    "\3\0\25\26\22\0\1\26\5\0\1\300\24\26\3\0"+
    "\25\26\20\0\1\301\1\0\1\26\5\0\25\26\3\0"+
    "\25\26\22\0\1\26\5\0\25\26\3\0\1\26\1\302"+
    "\23\26\22\0\1\26\5\0\25\26\3\0\17\26\1\303"+
    "\5\26\20\0\1\304\1\0\1\26\5\0\25\26\3\0"+
    "\25\26\22\0\1\26\5\0\25\26\3\0\1\26\1\305"+
    "\23\26\50\0\1\306\56\0\1\26\5\0\17\26\1\307"+
    "\5\26\3\0\25\26\22\0\1\26\5\0\1\310\24\26"+
    "\3\0\25\26\50\0\1\311\56\0\1\26\5\0\17\26"+
    "\1\312\5\26\3\0\25\26\100\0\1\313\26\0\1\26"+
    "\5\0\25\26\3\0\17\26\1\314\5\26\22\0\1\26"+
    "\5\0\25\26\3\0\1\26\1\315\23\26\100\0\1\316"+
    "\26\0\1\26\5\0\25\26\3\0\17\26\1\312\5\26"+
    "\34\0\1\317\72\0\1\26\5\0\4\26\1\320\20\26"+
    "\3\0\25\26\22\0\1\26\5\0\13\26\1\321\11\26"+
    "\3\0\25\26\34\0\1\322\135\0\1\323\41\0\1\26"+
    "\5\0\25\26\3\0\5\26\1\324\17\26\22\0\1\26"+
    "\5\0\25\26\3\0\13\26\1\325\11\26\65\0\1\326"+
    "\51\0\1\327\72\0\1\330\1\0\1\26\5\0\25\26"+
    "\3\0\25\26\20\0\1\331\1\0\1\26\5\0\25\26"+
    "\3\0\25\26\32\0\1\332\135\0\1\333\41\0\1\334"+
    "\1\0\1\26\5\0\25\26\3\0\25\26\20\0\1\335"+
    "\1\0\1\26\5\0\25\26\3\0\25\26\63\0\1\336"+
    "\72\0\1\337\103\0\1\340\104\0\1\341\105\0\1\342"+
    "\134\0\1\343\103\0\1\344\104\0\1\345\105\0\1\346"+
    "\43\0\1\347\100\0\1\350\104\0\1\351\110\0\1\352"+
    "\135\0\1\353\100\0\1\354\104\0\1\355\110\0\1\356"+
    "\60\0\1\357\71\0\1\360\104\0\1\361\117\0\1\362"+
    "\134\0\1\363\72\0\1\364\104\0\1\365\116\0\1\366"+
    "\53\0\1\367\111\0\1\370\104\0\1\371\77\0\1\372"+
    "\134\0\1\367\111\0\1\373\104\0\1\374\77\0\1\372"+
    "\50\0\1\375\104\0\1\376\135\0\1\377\104\0\1\u0100"+
    "\60\0\1\u0101\104\0\1\u0102\134\0\1\u0103\104\0\1\u0104"+
    "\53\0\1\u0105\104\0\1\u0106\134\0\1\u0105\104\0\1\u0106"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14973];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\3\11\1\1\1\11\1\1\2\11\15\1\2\11\14\1"+
    "\4\11\1\1\1\11\2\1\3\11\1\1\3\11\34\1"+
    "\5\11\136\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\2\0\2\1\41\0\1\11\2\0\1\11"+
    "\12\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comentario_multilinea = 0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMENTARIO: {
              throw new Error("Comentario no balanceado");
            }  // fall though
            case 263: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 56: break;
          case 2:
            { string.setLength(0); 
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 57: break;
          case 3:
            { return token("PARENTESISA", yytext());
            }
            // fall through
          case 58: break;
          case 4:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 59: break;
          case 5:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 60: break;
          case 6:
            { return token("SUMA", yytext());
            }
            // fall through
          case 61: break;
          case 7:
            { return token("COMA", yytext());
            }
            // fall through
          case 62: break;
          case 8:
            { return token("RESTA", yytext());
            }
            // fall through
          case 63: break;
          case 9:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 64: break;
          case 10:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 65: break;
          case 11:
            { return token("INTEGER_LITERAL", yytext());
            }
            // fall through
          case 66: break;
          case 12:
            { return token("DOS_PUNTOS", yytext());
            }
            // fall through
          case 67: break;
          case 13:
            { return token("EOL", yytext());
            }
            // fall through
          case 68: break;
          case 14:
            { return token("MENOR", yytext());
            }
            // fall through
          case 69: break;
          case 15:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 70: break;
          case 16:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 71: break;
          case 17:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 72: break;
          case 18:
            { return token("CORCHETESA", yytext());
            }
            // fall through
          case 73: break;
          case 19:
            { return token("CORCHETESC", yytext());
            }
            // fall through
          case 74: break;
          case 20:
            { return token("LLAVESA", yytext());
            }
            // fall through
          case 75: break;
          case 21:
            { return token("LLAVESC", yytext());
            }
            // fall through
          case 76: break;
          case 22:
            { string.append( yytext() );
            }
            // fall through
          case 77: break;
          case 23:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 78: break;
          case 24:
            { string.append('\\');
            }
            // fall through
          case 79: break;
          case 25:
            { string.append('#');
            }
            // fall through
          case 80: break;
          case 26:
            { return token("DESIGUAL", yytext());
            }
            // fall through
          case 81: break;
          case 27:
            { yybegin(COMENTARIO);
                                   comentario_multilinea += 1;
            }
            // fall through
          case 82: break;
          case 28:
            { throw new Error("Comentario no balanceado");
            }
            // fall through
          case 83: break;
          case 29:
            { return token("FLOAT_LITERAL", yytext());
            }
            // fall through
          case 84: break;
          case 30:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 85: break;
          case 31:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 86: break;
          case 32:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 87: break;
          case 33:
            { return token("DO", yytext());
            }
            // fall through
          case 88: break;
          case 34:
            { return token("IF", yytext());
            }
            // fall through
          case 89: break;
          case 35:
            { return token("OR", yytext());
            }
            // fall through
          case 90: break;
          case 36:
            { string.append('\"');
            }
            // fall through
          case 91: break;
          case 37:
            { string.append('\n');
            }
            // fall through
          case 92: break;
          case 38:
            { string.append('\t');
            }
            // fall through
          case 93: break;
          case 39:
            { comentario_multilinea ++;
            }
            // fall through
          case 94: break;
          case 40:
            { comentario_multilinea --;
                                   if(comentario_multilinea == 0){
                                      yybegin(YYINITIAL);}
            }
            // fall through
          case 95: break;
          case 41:
            { return token("END", yytext());
            }
            // fall through
          case 96: break;
          case 42:
            { return token("AND", yytext());
            }
            // fall through
          case 97: break;
          case 43:
            { return token("NOT", yytext());
            }
            // fall through
          case 98: break;
          case 44:
            { return token("THEN", yytext());
            }
            // fall through
          case 99: break;
          case 45:
            { return token("BOOLEAN_LITERAL", yytext());
            }
            // fall through
          case 100: break;
          case 46:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 101: break;
          case 47:
            { return token("WHILE", yytext());
            }
            // fall through
          case 102: break;
          case 48:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 103: break;
          case 49:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 104: break;
          case 50:
            { return token("INTEGER",yytext());
            }
            // fall through
          case 105: break;
          case 51:
            { return token("SUMAIMPAR", yytext());
            }
            // fall through
          case 106: break;
          case 52:
            { return token("DECLARE.SECTION", yytext());
            }
            // fall through
          case 107: break;
          case 53:
            { return token("PROGRAM.SECTION", yytext());
            }
            // fall through
          case 108: break;
          case 54:
            { return token("ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 109: break;
          case 55:
            { return token("ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
