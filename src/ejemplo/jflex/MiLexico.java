// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\0\1\20\1\21"+
    "\1\22\1\23\2\0\32\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\24\1\43\1\44\1\45\1\46"+
    "\1\47\1\24\1\50\1\51\1\52\1\53\1\24\1\54"+
    "\1\24\1\55\1\24\1\56\1\0\1\57\54\0\1\24"+
    "\12\0\1\24\4\0\1\24\5\0\27\24\1\0\37\24"+
    "\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0\1\24"+
    "\1\0\1\24\21\0\165\24\1\0\2\24\2\0\4\24"+
    "\1\0\1\24\6\0\1\24\1\0\3\24\1\0\1\24"+
    "\1\0\24\24\1\0\123\24\1\0\213\24\1\0\255\24"+
    "\1\0\46\24\2\0\1\24\6\0\51\24\10\0\55\24"+
    "\1\0\1\24\1\0\2\24\1\0\2\24\1\0\1\24"+
    "\10\0\33\24\4\0\4\24\35\0\13\24\5\0\100\24"+
    "\12\17\4\0\146\24\1\0\10\24\2\0\12\24\1\0"+
    "\6\24\12\17\3\24\2\0\1\24\20\0\73\24\2\0"+
    "\145\24\16\0\12\17\54\24\4\0\1\24\2\0\1\24"+
    "\2\0\56\24\22\0\34\24\4\0\13\24\65\0\25\24"+
    "\1\0\10\24\25\0\17\24\1\0\201\24\2\0\12\17"+
    "\1\0\23\24\1\0\10\24\2\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\1\24\3\0\4\24\2\0\11\24"+
    "\2\0\2\24\2\0\4\24\10\0\1\24\4\0\2\24"+
    "\1\0\5\24\2\0\12\17\2\24\12\0\1\24\1\0"+
    "\1\24\2\0\3\24\1\0\6\24\4\0\2\24\2\0"+
    "\26\24\1\0\7\24\1\0\2\24\1\0\2\24\1\0"+
    "\2\24\2\0\1\24\1\0\5\24\4\0\2\24\2\0"+
    "\3\24\3\0\1\24\7\0\4\24\1\0\1\24\7\0"+
    "\12\17\6\24\13\0\3\24\1\0\11\24\1\0\3\24"+
    "\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24"+
    "\2\0\12\24\1\0\3\24\1\0\3\24\2\0\1\24"+
    "\17\0\4\24\2\0\12\17\11\0\7\24\1\0\3\24"+
    "\1\0\10\24\2\0\2\24\2\0\26\24\1\0\7\24"+
    "\1\0\2\24\1\0\5\24\2\0\11\24\2\0\2\24"+
    "\2\0\3\24\10\0\2\24\4\0\2\24\1\0\5\24"+
    "\2\0\12\17\1\0\1\24\20\0\2\24\1\0\6\24"+
    "\3\0\3\24\1\0\4\24\3\0\2\24\1\0\1\24"+
    "\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24"+
    "\4\0\5\24\3\0\3\24\1\0\4\24\2\0\1\24"+
    "\6\0\1\24\16\0\12\17\20\0\15\24\1\0\3\24"+
    "\1\0\27\24\1\0\20\24\3\0\10\24\1\0\3\24"+
    "\1\0\4\24\7\0\2\24\1\0\3\24\5\0\4\24"+
    "\2\0\12\17\20\0\4\24\1\0\10\24\1\0\3\24"+
    "\1\0\27\24\1\0\12\24\1\0\5\24\2\0\11\24"+
    "\1\0\3\24\1\0\4\24\7\0\2\24\7\0\1\24"+
    "\1\0\4\24\2\0\12\17\1\0\2\24\15\0\4\24"+
    "\1\0\10\24\1\0\3\24\1\0\63\24\1\0\3\24"+
    "\1\0\5\24\5\0\4\24\7\0\5\24\2\0\12\17"+
    "\12\0\6\24\2\0\2\24\1\0\22\24\3\0\30\24"+
    "\1\0\11\24\1\0\1\24\2\0\7\24\3\0\1\24"+
    "\4\0\6\24\1\0\1\24\1\0\10\24\6\0\12\17"+
    "\2\0\2\24\15\0\72\24\5\0\17\24\1\0\12\17"+
    "\47\0\2\24\1\0\1\24\1\0\5\24\1\0\30\24"+
    "\1\0\1\24\1\0\27\24\2\0\5\24\1\0\1\24"+
    "\1\0\6\24\2\0\12\17\2\0\4\24\40\0\1\24"+
    "\27\0\2\24\6\0\12\17\13\0\1\24\1\0\1\24"+
    "\1\0\1\24\4\0\12\24\1\0\44\24\4\0\24\24"+
    "\1\0\22\24\1\0\44\24\11\0\1\24\71\0\100\24"+
    "\12\17\6\0\100\24\12\17\4\24\2\0\46\24\1\0"+
    "\1\24\5\0\1\24\2\0\53\24\1\0\115\24\1\0"+
    "\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0"+
    "\51\24\1\0\4\24\2\0\41\24\1\0\4\24\2\0"+
    "\7\24\1\0\1\24\1\0\4\24\2\0\17\24\1\0"+
    "\71\24\1\0\4\24\2\0\103\24\2\0\3\24\40\0"+
    "\20\24\20\0\126\24\2\0\6\24\3\0\u016c\24\2\0"+
    "\21\24\1\0\32\24\5\0\113\24\3\0\13\24\7\0"+
    "\15\24\1\0\7\24\13\0\25\24\13\0\24\24\14\0"+
    "\15\24\1\0\3\24\1\0\2\24\14\0\124\24\3\0"+
    "\1\24\4\0\2\24\2\0\12\17\41\0\3\24\2\0"+
    "\12\17\6\0\131\24\7\0\53\24\5\0\106\24\12\0"+
    "\37\24\1\0\14\24\4\0\14\24\12\0\12\17\36\24"+
    "\2\0\5\24\13\0\54\24\4\0\32\24\6\0\12\17"+
    "\46\0\34\24\4\0\77\24\1\0\35\24\2\0\1\24"+
    "\12\17\6\0\12\17\15\0\1\24\10\0\17\24\101\0"+
    "\114\24\4\0\12\17\21\0\11\24\14\0\60\24\12\17"+
    "\72\24\14\0\70\24\10\0\12\17\3\0\3\24\12\17"+
    "\44\24\2\0\11\24\7\0\53\24\2\0\3\24\20\0"+
    "\3\24\1\0\47\24\5\0\372\24\1\0\33\24\2\0"+
    "\6\24\2\0\46\24\2\0\6\24\2\0\10\24\1\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\37\24\2\0"+
    "\65\24\1\0\7\24\1\0\1\24\3\0\3\24\1\0"+
    "\7\24\3\0\4\24\2\0\6\24\4\0\15\24\5\0"+
    "\3\24\1\0\7\24\102\0\2\24\23\0\1\24\34\0"+
    "\1\24\15\0\1\24\20\0\15\24\63\0\41\24\21\0"+
    "\1\24\4\0\1\24\2\0\12\24\1\0\1\24\3\0"+
    "\5\24\6\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\4\24\1\0\13\24\2\0\4\24\5\0\5\24\4\0"+
    "\1\24\21\0\51\24\u022d\0\64\24\26\0\57\24\1\0"+
    "\57\24\1\0\205\24\6\0\11\24\14\0\46\24\1\0"+
    "\1\24\5\0\1\24\2\0\70\24\7\0\1\24\17\0"+
    "\30\24\11\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\40\24\57\0\1\24\325\0\3\24\31\0"+
    "\17\24\1\0\5\24\2\0\5\24\4\0\126\24\2\0"+
    "\2\24\2\0\3\24\1\0\132\24\1\0\4\24\5\0"+
    "\53\24\1\0\136\24\21\0\33\24\65\0\306\24\112\0"+
    "\360\24\20\0\215\24\103\0\56\24\2\0\15\24\3\0"+
    "\20\24\12\17\2\24\24\0\63\24\1\0\12\24\1\0"+
    "\163\24\45\0\11\24\2\0\147\24\2\0\65\24\2\0"+
    "\5\24\60\0\61\24\30\0\64\24\14\0\106\24\12\0"+
    "\12\17\6\0\30\24\3\0\1\24\1\0\3\24\12\17"+
    "\44\24\2\0\44\24\14\0\35\24\3\0\101\24\16\0"+
    "\1\24\12\17\6\0\20\24\12\17\5\24\1\0\67\24"+
    "\11\0\16\24\2\0\12\17\6\0\27\24\3\0\111\24"+
    "\30\0\3\24\2\0\20\24\2\0\5\24\12\0\6\24"+
    "\2\0\6\24\2\0\6\24\11\0\7\24\1\0\7\24"+
    "\1\0\53\24\1\0\14\24\10\0\173\24\1\0\2\24"+
    "\2\0\12\17\6\0\244\24\14\0\27\24\4\0\61\24"+
    "\4\0\156\24\2\0\152\24\46\0\7\24\14\0\5\24"+
    "\5\0\14\24\1\0\15\24\1\0\5\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\154\24\41\0\153\24"+
    "\22\0\100\24\2\0\66\24\50\0\14\24\4\0\20\24"+
    "\20\0\20\24\3\0\2\24\30\0\3\24\40\0\5\24"+
    "\1\0\207\24\23\0\12\17\7\0\32\24\4\0\1\24"+
    "\1\0\32\24\13\0\131\24\3\0\6\24\2\0\6\24"+
    "\2\0\6\24\2\0\3\24\43\0\14\24\1\0\32\24"+
    "\1\0\23\24\1\0\2\24\1\0\17\24\2\0\16\24"+
    "\42\0\173\24\105\0\65\24\210\0\1\24\202\0\35\24"+
    "\3\0\61\24\17\0\1\24\37\0\40\24\15\0\36\24"+
    "\5\0\53\24\5\0\36\24\2\0\44\24\4\0\10\24"+
    "\1\0\5\24\52\0\236\24\2\0\12\17\6\0\44\24"+
    "\4\0\44\24\4\0\50\24\10\0\64\24\234\0\67\24"+
    "\11\0\26\24\12\0\10\24\230\0\6\24\2\0\1\24"+
    "\1\0\54\24\1\0\2\24\3\0\1\24\2\0\27\24"+
    "\12\0\27\24\11\0\37\24\101\0\23\24\1\0\2\24"+
    "\12\0\26\24\12\0\32\24\106\0\70\24\6\0\2\24"+
    "\100\0\4\24\1\0\2\24\5\0\10\24\1\0\3\24"+
    "\1\0\35\24\2\0\3\24\4\0\1\24\40\0\35\24"+
    "\3\0\35\24\43\0\10\24\1\0\36\24\31\0\66\24"+
    "\12\0\26\24\12\0\23\24\15\0\22\24\156\0\111\24"+
    "\67\0\63\24\15\0\63\24\15\0\50\24\10\0\12\17"+
    "\306\0\35\24\12\0\1\24\10\0\41\24\217\0\27\24"+
    "\11\0\107\24\37\0\12\17\17\0\74\24\25\0\31\24"+
    "\7\0\12\17\6\0\65\24\1\0\12\17\4\0\3\24"+
    "\11\0\44\24\2\0\1\24\11\0\105\24\4\0\4\24"+
    "\3\0\12\17\1\24\1\0\1\24\43\0\22\24\1\0"+
    "\45\24\6\0\1\24\101\0\7\24\1\0\1\24\1\0"+
    "\4\24\1\0\17\24\1\0\12\24\7\0\73\24\5\0"+
    "\12\17\6\0\4\24\1\0\10\24\2\0\2\24\2\0"+
    "\26\24\1\0\7\24\1\0\2\24\1\0\5\24\1\0"+
    "\12\24\2\0\2\24\2\0\3\24\2\0\1\24\6\0"+
    "\1\24\5\0\7\24\2\0\7\24\3\0\5\24\213\0"+
    "\113\24\5\0\12\17\4\0\2\24\40\0\106\24\1\0"+
    "\1\24\10\0\12\17\246\0\66\24\2\0\11\24\27\0"+
    "\6\24\42\0\101\24\3\0\1\24\13\0\12\17\46\0"+
    "\71\24\7\0\12\17\66\0\33\24\2\0\17\24\4\0"+
    "\12\17\306\0\73\24\145\0\100\24\12\17\25\0\1\24"+
    "\240\0\10\24\2\0\56\24\2\0\10\24\1\0\2\24"+
    "\33\0\77\24\10\0\1\24\10\0\112\24\3\0\1\24"+
    "\42\0\71\24\7\0\11\24\1\0\55\24\1\0\11\24"+
    "\17\0\12\17\30\0\36\24\2\0\26\24\1\0\16\24"+
    "\111\0\7\24\1\0\2\24\1\0\54\24\3\0\1\24"+
    "\1\0\2\24\1\0\11\24\10\0\12\17\6\0\6\24"+
    "\1\0\2\24\1\0\45\24\1\0\2\24\1\0\6\24"+
    "\7\0\12\17\u0136\0\27\24\11\0\232\24\146\0\157\24"+
    "\21\0\304\24\274\0\57\24\321\0\107\24\271\0\71\24"+
    "\7\0\37\24\1\0\12\17\146\0\36\24\2\0\5\24"+
    "\13\0\67\24\11\0\4\24\14\0\12\17\11\0\25\24"+
    "\5\0\23\24\260\0\100\24\200\0\113\24\4\0\71\24"+
    "\7\0\21\24\100\0\2\24\1\0\1\24\34\0\370\24"+
    "\10\0\363\24\15\0\37\24\61\0\3\24\21\0\4\24"+
    "\10\0\u018c\24\4\0\153\24\5\0\15\24\3\0\11\24"+
    "\7\0\12\24\3\0\2\24\306\0\5\24\3\0\6\24"+
    "\10\0\10\24\2\0\7\24\36\0\4\24\224\0\3\24"+
    "\273\0\125\24\1\0\107\24\1\0\2\24\2\0\1\24"+
    "\2\0\2\24\2\0\4\24\1\0\14\24\1\0\1\24"+
    "\1\0\7\24\1\0\101\24\1\0\4\24\2\0\10\24"+
    "\1\0\7\24\1\0\34\24\1\0\4\24\1\0\5\24"+
    "\1\0\1\24\3\0\7\24\1\0\u0154\24\2\0\31\24"+
    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24"+
    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24"+
    "\1\0\31\24\1\0\10\24\2\0\62\17\67\24\4\0"+
    "\62\24\10\0\1\24\16\0\1\24\26\0\5\24\1\0"+
    "\17\24\120\0\7\24\1\0\21\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\325\0\55\24\3\0\16\24\2\0"+
    "\12\17\4\0\1\24\u0171\0\60\24\12\17\6\0\305\24"+
    "\13\0\7\24\51\0\114\24\4\0\12\17\246\0\4\24"+
    "\1\0\33\24\1\0\2\24\1\0\1\24\2\0\1\24"+
    "\1\0\12\24\1\0\4\24\1\0\1\24\1\0\1\24"+
    "\6\0\1\24\4\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\3\24\1\0\2\24\1\0\1\24\2\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\1\24\2\0\4\24\1\0\7\24"+
    "\1\0\4\24\1\0\4\24\1\0\1\24\1\0\12\24"+
    "\1\0\21\24\5\0\3\24\1\0\5\24\1\0\21\24"+
    "\164\0\32\24\6\0\32\24\6\0\32\24\166\0\327\24"+
    "\51\0\65\24\13\0\336\24\2\0\u0182\24\16\0\u0131\24"+
    "\37\0\36\24\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\14\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\24\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\4\0\1\40\1\0\1\41\1\0"+
    "\1\42\4\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\3\0\1\52\1\53\13\0\1\54\10\0\1\55"+
    "\7\0\1\56\1\0\1\57\15\0\1\60\24\0\1\61"+
    "\2\0\1\62\4\0\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\220\0\u0120"+
    "\0\220\0\u0150\0\220\0\220\0\220\0\u0180\0\220\0\u01b0"+
    "\0\220\0\u01e0\0\u0210\0\u0240\0\220\0\220\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\220\0\220\0\220\0\220\0\u04b0\0\220"+
    "\0\u04e0\0\u0510\0\220\0\220\0\220\0\u0180\0\220\0\220"+
    "\0\220\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\220\0\u0630"+
    "\0\220\0\u0660\0\220\0\u0690\0\u06c0\0\u06f0\0\u0720\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\220\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\220\0\u0a20"+
    "\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\220"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\220"+
    "\0\u0cf0\0\220\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\220"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\220\0\u1350\0\u1380\0\220"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\220\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\0\1\25\1\0\1\26\1\27"+
    "\1\0\1\30\1\31\1\0\1\32\1\33\3\0\1\34"+
    "\2\0\1\35\1\36\1\37\1\0\1\40\1\41\1\0"+
    "\1\42\1\0\1\43\1\44\5\45\1\46\20\45\1\47"+
    "\37\45\1\50\1\51\1\45\1\52\46\45\62\0\1\4"+
    "\77\0\1\53\46\0\1\54\56\0\1\55\66\0\1\56"+
    "\55\0\1\56\1\0\1\20\62\0\1\57\57\0\1\60"+
    "\57\0\1\61\35\0\24\62\1\0\5\62\24\0\2\62"+
    "\45\0\1\63\60\0\1\64\47\0\1\65\3\0\1\66"+
    "\3\0\1\67\56\0\1\70\51\0\1\71\66\0\1\72"+
    "\61\0\1\73\57\0\1\74\62\0\1\75\45\0\1\76"+
    "\57\0\1\77\23\0\1\100\20\0\1\101\16\0\1\102"+
    "\4\0\1\103\16\0\1\104\56\0\1\105\47\0\17\62"+
    "\1\0\4\62\1\0\4\62\25\0\2\62\35\0\1\106"+
    "\70\0\1\107\45\0\1\110\74\0\1\111\43\0\1\112"+
    "\74\0\1\113\53\0\1\114\55\0\1\115\51\0\1\116"+
    "\63\0\1\117\60\0\1\120\57\0\1\121\63\0\1\122"+
    "\45\0\1\123\11\0\1\124\50\0\1\125\51\0\1\126"+
    "\72\0\1\127\55\0\1\130\52\0\1\131\53\0\1\132"+
    "\70\0\1\133\52\0\1\134\71\0\1\135\57\0\1\136"+
    "\51\0\1\137\53\0\1\140\53\0\1\141\75\0\1\142"+
    "\41\0\1\143\61\0\1\144\71\0\1\145\43\0\1\146"+
    "\71\0\1\147\60\0\1\150\50\0\1\151\76\0\1\152"+
    "\45\0\1\153\54\0\1\154\63\0\1\155\62\0\1\156"+
    "\25\0\1\157\74\0\1\160\75\0\1\161\24\0\1\162"+
    "\74\0\1\163\76\0\1\164\56\0\1\165\41\0\1\166"+
    "\76\0\1\167\56\0\1\170\45\0\1\171\57\0\1\172"+
    "\65\0\1\173\51\0\1\174\55\0\1\175\40\0\1\176"+
    "\57\0\1\177\76\0\1\200\75\0\1\201\56\0\1\202"+
    "\57\0\1\203\60\0\1\204\47\0\1\205\53\0\1\206"+
    "\57\0\1\207\63\0\1\210\63\0\1\211\45\0\1\212"+
    "\57\0\1\213\71\0\1\214\56\0\1\215\64\0\1\216"+
    "\57\0\1\217\52\0\1\220\54\0\1\221\57\0\1\222"+
    "\63\0\1\223\57\0\1\224\56\0\1\225\57\0\1\226"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\3\11\1\1\1\11\1\1\1\11\3\1\2\11\14\0"+
    "\4\11\1\1\1\11\2\1\3\11\1\1\3\11\1\1"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\4\0\7\11"+
    "\3\0\1\1\1\11\13\0\1\11\10\0\1\11\7\0"+
    "\1\11\1\0\1\11\15\0\1\11\24\0\1\11\2\0"+
    "\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comentario_multilinea = 0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMENTARIO: {
              throw new Error("Comentario no balanceado");
            }  // fall though
            case 151: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 53: break;
          case 2:
            { string.setLength(0); 
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 54: break;
          case 3:
            { return token("PARENTESISA", yytext());
            }
            // fall through
          case 55: break;
          case 4:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 56: break;
          case 5:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 57: break;
          case 6:
            { return token("SUMA", yytext());
            }
            // fall through
          case 58: break;
          case 7:
            { return token("COMA", yytext());
            }
            // fall through
          case 59: break;
          case 8:
            { return token("RESTA", yytext());
            }
            // fall through
          case 60: break;
          case 9:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 61: break;
          case 10:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 62: break;
          case 11:
            { return token("INT", yytext());
            }
            // fall through
          case 63: break;
          case 12:
            { return token("EOL", yytext());
            }
            // fall through
          case 64: break;
          case 13:
            { return token("MENOR", yytext());
            }
            // fall through
          case 65: break;
          case 14:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 66: break;
          case 15:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 67: break;
          case 16:
            { return token("CORCHETESA", yytext());
            }
            // fall through
          case 68: break;
          case 17:
            { return token("CORCHETESC", yytext());
            }
            // fall through
          case 69: break;
          case 18:
            { return token("LLAVESA", yytext());
            }
            // fall through
          case 70: break;
          case 19:
            { return token("LLAVESC", yytext());
            }
            // fall through
          case 71: break;
          case 20:
            { string.append( yytext() );
            }
            // fall through
          case 72: break;
          case 21:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 73: break;
          case 22:
            { string.append('\\');
            }
            // fall through
          case 74: break;
          case 23:
            { string.append('#');
            }
            // fall through
          case 75: break;
          case 24:
            { return token("DESIGUAL", yytext());
            }
            // fall through
          case 76: break;
          case 25:
            { yybegin(COMENTARIO);
                                   comentario_multilinea += 1;
            }
            // fall through
          case 77: break;
          case 26:
            { throw new Error("Comentario no balanceado");
            }
            // fall through
          case 78: break;
          case 27:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 79: break;
          case 28:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 80: break;
          case 29:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 81: break;
          case 30:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 82: break;
          case 31:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 83: break;
          case 32:
            { return token("DO", yytext());
            }
            // fall through
          case 84: break;
          case 33:
            { return token("IF", yytext());
            }
            // fall through
          case 85: break;
          case 34:
            { return token("OR", yytext());
            }
            // fall through
          case 86: break;
          case 35:
            { string.append('\"');
            }
            // fall through
          case 87: break;
          case 36:
            { string.append('\\'+'\\');
            }
            // fall through
          case 88: break;
          case 37:
            { string.append('\n');
            }
            // fall through
          case 89: break;
          case 38:
            { string.append('\t');
            }
            // fall through
          case 90: break;
          case 39:
            { comentario_multilinea ++;
            }
            // fall through
          case 91: break;
          case 40:
            { comentario_multilinea --;
                                   if(comentario_multilinea == 0){
                                      yybegin(YYINITIAL);}
            }
            // fall through
          case 92: break;
          case 41:
            { return token("AND", yytext());
            }
            // fall through
          case 93: break;
          case 42:
            { return token("END", yytext());
            }
            // fall through
          case 94: break;
          case 43:
            { return token("NOT", yytext());
            }
            // fall through
          case 95: break;
          case 44:
            { return token("THEN", yytext());
            }
            // fall through
          case 96: break;
          case 45:
            { return token("WHILE", yytext());
            }
            // fall through
          case 97: break;
          case 46:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 98: break;
          case 47:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 99: break;
          case 48:
            { return token("SUMAIMPAR", yytext());
            }
            // fall through
          case 100: break;
          case 49:
            { return token("DECLARE.SECTION", yytext());
            }
            // fall through
          case 101: break;
          case 50:
            { return token("PROGRAM.SECTION", yytext());
            }
            // fall through
          case 102: break;
          case 51:
            { return token("ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 103: break;
          case 52:
            { return token("ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
