// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\211\u0100\1\u0600\1\u0100\1\u0e00\1\u0f00\1\u1000\1\u1100\123\u0100"+
    "\1\u0900\4\u0100\1\u1200\10\u0100\1\u1300\2\u0100\1\u1400\1\u1500"+
    "\1\u1100\1\u0100\1\u0500\1\u0100\1\u1600\1\u1300\1\u0800\3\u0100"+
    "\1\u1000\1\u1700\114\u0100\1\u1800\1\u1000\153\u0100\1\u1900\11\u0100"+
    "\1\u1a00\1\u1100\6\u0100\1\u1000\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\0\1\43\1\44\1\45\1\46\1\0"+
    "\1\47\1\0\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\1\0\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\2\0\1\67\1\70\1\71\1\72"+
    "\1\73\1\0\1\74\1\75\1\76\1\77\1\0\1\100"+
    "\1\0\1\101\1\0\1\102\1\0\1\103\u01e2\0\12\17"+
    "\206\0\12\17\306\0\12\17\234\0\12\17\166\0\12\17"+
    "\140\0\12\17\166\0\12\17\106\0\12\17\u0116\0\12\17"+
    "\106\0\12\17\u0146\0\12\17\46\0\12\17\u012c\0\12\17"+
    "\200\0\12\17\246\0\12\17\6\0\12\17\266\0\12\17"+
    "\126\0\12\17\206\0\12\17\6\0\12\17\u0176\0\12\17"+
    "\46\0\12\17\306\0\12\17\26\0\12\17\126\0\12\17"+
    "\u0196\0\12\17\246\0\12\17\206\0\12\17\u012c\0\12\17"+
    "\200\0\12\17\74\0\12\17\220\0\12\17\166\0\12\17"+
    "\146\0\12\17\206\0\12\17\106\0\12\17\266\0\12\17"+
    "\u0164\0\62\17\100\0\12\17\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\11\0\1\21\1\22\15\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\25\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\4\0\1\40\4\0\1\41"+
    "\15\0\1\42\5\0\1\43\1\44\1\45\1\46\1\47"+
    "\4\0\2\50\11\0\1\51\4\0\1\52\21\0\1\53"+
    "\10\0\1\54\7\0\1\55\4\0\1\56\30\0\1\57"+
    "\1\0\1\60\2\0\1\61\27\0\1\62\55\0\1\63"+
    "\4\0\1\64\2\0\1\65\15\0\1\66\1\67\12\0"+
    "\1\63\15\0\1\63\15\0\1\63\15\0\1\63\15\0"+
    "\1\63\15\0\1\63\15\0\1\63\15\0\1\63\15\0"+
    "\1\63\15\0\1\63\15\0\1\63\15\0\1\63\15\0"+
    "\1\63\15\0\1\63\15\0\1\63\15\0\1\63\15\0"+
    "\1\63\15\0\1\63\15\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\314\0\u0198"+
    "\0\314\0\u01dc\0\314\0\314\0\314\0\u0220\0\314\0\u0264"+
    "\0\314\0\314\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\314\0\314"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\314\0\314\0\314"+
    "\0\314\0\u094c\0\314\0\u0990\0\u09d4\0\314\0\314\0\314"+
    "\0\u0220\0\314\0\314\0\314\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\314\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\314\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\314\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\314\0\314\0\314\0\314\0\314\0\u1100\0\u1144"+
    "\0\u1188\0\u11cc\0\u1210\0\314\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\314\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\314\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8"+
    "\0\u193c\0\u1980\0\u19c4\0\u1a08\0\314\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\314\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\314\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\314\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\314\0\u25b8\0\314\0\u25fc\0\u2640"+
    "\0\314\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\314\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058"+
    "\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278"+
    "\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8"+
    "\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u39a4\0\314\0\u39e8\0\u3a2c\0\314\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\314\0\314\0\u3de4\0\u3e28"+
    "\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048"+
    "\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268"+
    "\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488"+
    "\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8"+
    "\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8"+
    "\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8"+
    "\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368"+
    "\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588"+
    "\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8"+
    "\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8"+
    "\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08"+
    "\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028"+
    "\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u6204\0\u6248"+
    "\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468"+
    "\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u6644\0\u6688"+
    "\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864\0\u68a8"+
    "\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8"+
    "\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8"+
    "\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4\0\u6f08"+
    "\0\u6f4c\0\u6f90\0\u6fd4\0\u7018\0\u705c\0\u70a0\0\u70e4\0\u7128"+
    "\0\u716c\0\u71b0\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u7304\0\u7348"+
    "\0\u738c\0\u73d0\0\u7414\0\u7458\0\u749c\0\u74e0\0\u7524\0\u7568"+
    "\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788"+
    "\0\u77cc\0\u7810\0\u7854\0\u7898\0\u78dc\0\u7920\0\u7964\0\u79a8"+
    "\0\u79ec\0\u7a30\0\u7a74\0\u7ab8\0\u7afc\0\u7b40\0\u7b84\0\u7bc8"+
    "\0\u7c0c\0\u7c50\0\u7c94\0\u7cd8\0\u7d1c\0\u7d60\0\u7da4\0\u7de8"+
    "\0\u7e2c\0\u7e70\0\u7eb4\0\u7ef8\0\u7f3c\0\u7f80\0\u7fc4\0\u8008"+
    "\0\u804c\0\u8090\0\u80d4\0\u8118\0\u815c\0\u81a0\0\u81e4\0\u8228"+
    "\0\u826c\0\u82b0\0\u82f4\0\u8338\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\0\1\26\1\0\1\27"+
    "\1\30\1\31\2\0\1\32\4\0\1\33\1\0\1\34"+
    "\1\35\1\0\1\36\1\0\1\37\1\0\1\40\1\41"+
    "\1\0\1\42\1\43\1\0\1\44\1\45\1\46\2\0"+
    "\1\47\2\0\1\50\1\51\1\52\1\0\1\53\1\54"+
    "\1\0\1\55\1\0\1\56\1\57\5\60\1\61\44\60"+
    "\1\62\37\60\1\63\1\64\1\60\1\65\72\60\106\0"+
    "\1\4\124\0\1\66\71\0\1\67\102\0\1\70\112\0"+
    "\1\71\101\0\1\71\1\0\1\20\107\0\1\72\103\0"+
    "\1\73\103\0\1\74\121\0\1\75\30\0\1\76\42\0"+
    "\1\77\3\0\1\100\3\0\1\101\102\0\1\102\30\0"+
    "\1\103\50\0\1\104\30\0\1\105\46\0\1\106\5\0"+
    "\1\107\30\0\1\110\55\0\1\111\106\0\1\112\71\0"+
    "\1\113\103\0\1\114\120\0\1\115\123\0\1\116\104\0"+
    "\1\76\73\0\1\117\3\0\1\120\3\0\1\101\102\0"+
    "\1\121\70\0\1\122\10\0\1\105\77\0\1\106\5\0"+
    "\1\110\104\0\1\123\105\0\1\124\103\0\1\125\106\0"+
    "\1\126\71\0\1\127\6\0\1\130\74\0\1\131\23\0"+
    "\1\132\63\0\1\133\4\0\1\134\16\0\1\135\102\0"+
    "\1\136\134\0\1\137\134\0\1\140\40\0\1\141\120\0"+
    "\1\142\67\0\1\143\134\0\1\144\63\0\1\145\134\0"+
    "\1\146\56\0\1\147\134\0\1\150\46\0\1\151\101\0"+
    "\1\152\75\0\1\153\107\0\1\154\122\0\1\155\110\0"+
    "\1\156\102\0\1\157\120\0\1\160\67\0\1\161\111\0"+
    "\1\162\112\0\1\163\77\0\1\164\101\0\1\165\75\0"+
    "\1\166\120\0\1\167\72\0\1\170\53\0\1\171\134\0"+
    "\1\172\52\0\1\173\107\0\1\174\71\0\1\175\11\0"+
    "\1\176\66\0\1\177\134\0\1\200\56\0\1\201\134\0"+
    "\1\202\54\0\1\203\75\0\1\204\116\0\1\205\101\0"+
    "\1\206\114\0\1\207\123\0\1\210\107\0\1\211\71\0"+
    "\1\212\11\0\1\213\105\0\1\167\72\0\1\214\75\0"+
    "\1\215\116\0\1\205\74\0\1\216\110\0\1\217\45\0"+
    "\1\220\134\0\1\221\46\0\1\222\114\0\1\223\76\0"+
    "\1\224\115\0\1\225\105\0\1\226\134\0\1\226\40\0"+
    "\1\227\134\0\1\230\62\0\1\231\75\0\1\232\77\0"+
    "\1\233\133\0\1\234\100\0\1\235\114\0\1\236\76\0"+
    "\1\237\115\0\1\240\103\0\1\241\75\0\1\242\77\0"+
    "\1\233\46\0\1\243\134\0\1\244\70\0\1\245\65\0"+
    "\1\246\105\0\1\247\115\0\1\250\73\0\1\251\134\0"+
    "\1\252\46\0\1\253\115\0\1\254\61\0\1\255\162\0"+
    "\1\256\65\0\1\257\105\0\1\260\115\0\1\261\67\0"+
    "\1\262\115\0\1\263\53\0\1\264\134\0\1\264\43\0"+
    "\1\265\122\0\1\266\71\0\1\267\100\0\1\270\113\0"+
    "\1\271\134\0\1\271\46\0\1\272\106\0\1\273\116\0"+
    "\1\274\110\0\1\275\122\0\1\266\71\0\1\276\100\0"+
    "\1\277\107\0\1\300\106\0\1\301\25\0\1\302\113\0"+
    "\1\303\121\0\1\304\55\0\1\305\113\0\1\306\131\0"+
    "\1\307\45\0\1\310\144\0\1\311\121\0\1\312\24\0"+
    "\1\313\144\0\1\314\71\0\1\315\102\0\1\316\65\0"+
    "\1\317\122\0\1\320\102\0\1\321\111\0\1\322\127\0"+
    "\1\323\102\0\1\324\65\0\1\325\122\0\1\326\102\0"+
    "\1\321\40\0\1\327\103\0\1\330\111\0\1\331\75\0"+
    "\1\332\126\0\1\333\111\0\1\334\103\0\1\335\111\0"+
    "\1\336\75\0\1\337\50\0\1\340\71\0\1\341\103\0"+
    "\1\342\115\0\1\343\123\0\1\344\114\0\1\345\40\0"+
    "\1\346\103\0\1\347\146\0\1\350\70\0\1\351\102\0"+
    "\1\352\103\0\1\353\104\0\1\354\53\0\1\355\164\0"+
    "\1\356\102\0\1\357\103\0\1\360\104\0\1\361\42\0"+
    "\1\362\77\0\1\363\103\0\1\364\107\0\1\365\121\0"+
    "\1\366\116\0\1\367\77\0\1\370\103\0\1\371\107\0"+
    "\1\372\56\0\1\373\71\0\1\374\103\0\1\375\115\0"+
    "\1\376\53\0\1\377\164\0\1\u0100\71\0\1\u0101\103\0"+
    "\1\u0102\115\0\1\u0103\51\0\1\u0104\110\0\1\u0105\103\0"+
    "\1\u0106\76\0\1\u0107\117\0\1\u0108\120\0\1\u0104\110\0"+
    "\1\u0109\103\0\1\u010a\76\0\1\u0107\47\0\1\u010b\103\0"+
    "\1\u010c\117\0\1\u010d\120\0\1\u010e\103\0\1\u010f\56\0"+
    "\1\u0110\103\0\1\u0111\116\0\1\u0112\121\0\1\u0113\103\0"+
    "\1\u0114\51\0\1\u0115\103\0\1\u0116\112\0\1\u0117\125\0"+
    "\1\u0115\103\0\1\u0116\73\0\1\u0118\37\0\1\u0119\143\0"+
    "\1\u011a\101\0\1\u011b\101\0\1\u011c\106\0\1\u011d\76\0"+
    "\1\u011e\51\0\1\u011f\141\0\1\u0120\41\0\1\u0121\146\0"+
    "\1\u0122\100\0\1\u0123\106\0\1\u0124\76\0\1\u0125\115\0"+
    "\1\u0126\37\0\1\u0127\143\0\1\u0128\101\0\1\u0129\101\0"+
    "\1\u012a\106\0\1\u012b\76\0\1\u012c\51\0\1\u012d\141\0"+
    "\1\u012e\41\0\1\u012f\146\0\1\u0130\100\0\1\u0131\106\0"+
    "\1\u0132\76\0\1\u0133\115\0\1\u0134\37\0\1\u0135\143\0"+
    "\1\u0136\101\0\1\u0137\101\0\1\u0138\106\0\1\u0139\76\0"+
    "\1\u013a\51\0\1\u013b\141\0\1\u013c\41\0\1\u013d\146\0"+
    "\1\u013e\100\0\1\u013f\106\0\1\u0140\76\0\1\u0141\115\0"+
    "\1\u0142\37\0\1\u0143\143\0\1\u0144\101\0\1\u0145\101\0"+
    "\1\u0146\106\0\1\u0147\76\0\1\u0148\51\0\1\u0149\141\0"+
    "\1\u014a\41\0\1\u014b\146\0\1\u014c\100\0\1\u014d\106\0"+
    "\1\u014e\76\0\1\u014f\115\0\1\u0150\37\0\1\u0151\143\0"+
    "\1\u0152\101\0\1\u0153\101\0\1\u0154\106\0\1\u0155\76\0"+
    "\1\u0156\51\0\1\u0157\141\0\1\u0158\41\0\1\u0159\146\0"+
    "\1\u015a\100\0\1\u015b\106\0\1\u015c\76\0\1\u015d\115\0"+
    "\1\u015e\37\0\1\u015f\143\0\1\u0160\101\0\1\u0161\101\0"+
    "\1\u0162\106\0\1\u0163\76\0\1\u0164\51\0\1\u0165\141\0"+
    "\1\u0166\41\0\1\u0167\146\0\1\u0168\100\0\1\u0169\106\0"+
    "\1\u016a\76\0\1\u016b\115\0\1\u016c\37\0\1\u016d\143\0"+
    "\1\u016e\101\0\1\u016f\101\0\1\u0170\106\0\1\u0171\76\0"+
    "\1\u0172\51\0\1\u0173\141\0\1\u0174\41\0\1\u0175\146\0"+
    "\1\u0176\100\0\1\u0177\106\0\1\u0178\76\0\1\u0179\115\0"+
    "\1\u017a\37\0\1\u017b\143\0\1\u017c\101\0\1\u017d\101\0"+
    "\1\u017e\106\0\1\u017f\76\0\1\u0180\51\0\1\u0181\141\0"+
    "\1\u0182\41\0\1\u0183\146\0\1\u0184\100\0\1\u0185\106\0"+
    "\1\u0186\76\0\1\u0187\115\0\1\u0188\37\0\1\u0189\143\0"+
    "\1\u018a\101\0\1\u018b\101\0\1\u018c\106\0\1\u018d\76\0"+
    "\1\u018e\51\0\1\u018f\141\0\1\u0190\41\0\1\u0191\146\0"+
    "\1\u0192\100\0\1\u0193\106\0\1\u0194\76\0\1\u0195\115\0"+
    "\1\u0196\37\0\1\u0197\143\0\1\u0198\101\0\1\u0199\101\0"+
    "\1\u019a\106\0\1\u019b\76\0\1\u019c\51\0\1\u019d\141\0"+
    "\1\u019e\41\0\1\u019f\146\0\1\u01a0\100\0\1\u01a1\106\0"+
    "\1\u01a2\76\0\1\u01a3\115\0\1\u01a4\37\0\1\u01a5\143\0"+
    "\1\u01a6\101\0\1\u01a7\101\0\1\u01a8\106\0\1\u01a9\76\0"+
    "\1\u01aa\51\0\1\u01ab\141\0\1\u01ac\41\0\1\u01ad\146\0"+
    "\1\u01ae\100\0\1\u01af\106\0\1\u01b0\76\0\1\u01b1\115\0"+
    "\1\u01b2\37\0\1\u01b3\143\0\1\u01b4\101\0\1\u01b5\101\0"+
    "\1\u01b6\106\0\1\u01b7\76\0\1\u01b8\51\0\1\u01b9\141\0"+
    "\1\u01ba\41\0\1\u01bb\146\0\1\u01bc\100\0\1\u01bd\106\0"+
    "\1\u01be\76\0\1\u01bf\115\0\1\u01c0\37\0\1\u01c1\143\0"+
    "\1\u01c2\101\0\1\u01c3\101\0\1\u01c4\106\0\1\u01c5\76\0"+
    "\1\u01c6\51\0\1\u01c7\141\0\1\u01c8\41\0\1\u01c9\146\0"+
    "\1\u01ca\100\0\1\u01cb\106\0\1\u01cc\76\0\1\u01cd\115\0"+
    "\1\u01ce\37\0\1\u01cf\143\0\1\u01d0\101\0\1\u01d1\101\0"+
    "\1\u01d2\106\0\1\u01d3\76\0\1\u01d4\51\0\1\u01d5\141\0"+
    "\1\u01d6\41\0\1\u01d7\146\0\1\u01d8\100\0\1\u01d9\106\0"+
    "\1\u01da\76\0\1\u01db\115\0\1\u01dc\37\0\1\u01dd\143\0"+
    "\1\u01de\101\0\1\u01df\101\0\1\u01e0\106\0\1\u01e1\76\0"+
    "\1\u01e2\51\0\1\u01e3\141\0\1\u01e4\41\0\1\u01e5\146\0"+
    "\1\u01e6\100\0\1\u01e7\106\0\1\u01e8\76\0\1\u01e9\115\0"+
    "\1\u01ea\37\0\1\u01eb\143\0\1\u01ec\101\0\1\u01ed\101\0"+
    "\1\u01ee\106\0\1\u01ef\76\0\1\u01f0\51\0\1\u01f1\141\0"+
    "\1\u01f2\41\0\1\u01f3\146\0\1\u01f4\100\0\1\u01f5\106\0"+
    "\1\u01f6\76\0\1\u01f7\115\0\1\u01f8\37\0\1\u01f9\143\0"+
    "\1\u01fa\101\0\1\u01fb\101\0\1\u01fc\106\0\1\u01fd\76\0"+
    "\1\u01fe\51\0\1\u01ff\141\0\1\u0200\41\0\1\u0201\146\0"+
    "\1\u0202\100\0\1\u0203\106\0\1\u0204\76\0\1\u0205\115\0"+
    "\1\u0206\37\0\1\u0207\143\0\1\u0208\101\0\1\u0209\101\0"+
    "\1\u020a\106\0\1\u020b\76\0\1\u020c\51\0\1\u020d\141\0"+
    "\1\u020e\41\0\1\u020f\146\0\1\u0210\100\0\1\u0211\106\0"+
    "\1\u0212\76\0\1\u0213\115\0\1\u0214\37\0\1\u0215\143\0"+
    "\1\u0216\101\0\1\u0217\101\0\1\u0218\106\0\1\u0219\76\0"+
    "\1\u021a\51\0\1\u021b\141\0\1\u021c\41\0\1\u021d\72\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\3\11\1\1\1\11\1\1\2\11\3\1\11\0\2\11"+
    "\15\0\4\11\1\1\1\11\2\1\3\11\1\1\3\11"+
    "\4\0\1\11\4\0\1\11\15\0\1\11\5\0\5\11"+
    "\4\0\1\1\1\11\11\0\1\11\4\0\1\11\21\0"+
    "\1\11\10\0\1\11\7\0\1\11\4\0\1\11\30\0"+
    "\1\11\1\0\1\11\2\0\1\11\27\0\1\11\55\0"+
    "\1\1\4\0\1\11\2\0\1\11\15\0\2\11\12\0"+
    "\1\1\15\0\1\1\15\0\1\1\15\0\1\1\15\0"+
    "\1\1\15\0\1\1\15\0\1\1\15\0\1\1\15\0"+
    "\1\1\15\0\1\1\15\0\1\1\15\0\1\1\15\0"+
    "\1\1\15\0\1\1\15\0\1\1\15\0\1\1\15\0"+
    "\1\1\15\0\1\1\15\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comentario_multilinea = 0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMENTARIO: {
              throw new Error("Comentario no balanceado");
            }  // fall though
            case 542: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 56: break;
          case 2:
            { string.setLength(0); 
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 57: break;
          case 3:
            { return token("PARENTESISA", yytext());
            }
            // fall through
          case 58: break;
          case 4:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 59: break;
          case 5:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 60: break;
          case 6:
            { return token("SUMA", yytext());
            }
            // fall through
          case 61: break;
          case 7:
            { return token("COMA", yytext());
            }
            // fall through
          case 62: break;
          case 8:
            { return token("RESTA", yytext());
            }
            // fall through
          case 63: break;
          case 9:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 64: break;
          case 10:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 65: break;
          case 11:
            { return token("INTEGER_LITERAL", yytext());
            }
            // fall through
          case 66: break;
          case 12:
            { return token("DOS_PUNTOS", yytext());
            }
            // fall through
          case 67: break;
          case 13:
            { return token("EOL", yytext());
            }
            // fall through
          case 68: break;
          case 14:
            { return token("MENOR", yytext());
            }
            // fall through
          case 69: break;
          case 15:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 70: break;
          case 16:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 71: break;
          case 17:
            { return token("CORCHETESA", yytext());
            }
            // fall through
          case 72: break;
          case 18:
            { return token("CORCHETESC", yytext());
            }
            // fall through
          case 73: break;
          case 19:
            { return token("LLAVESA", yytext());
            }
            // fall through
          case 74: break;
          case 20:
            { return token("LLAVESC", yytext());
            }
            // fall through
          case 75: break;
          case 21:
            { string.append( yytext() );
            }
            // fall through
          case 76: break;
          case 22:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 77: break;
          case 23:
            { string.append('\\');
            }
            // fall through
          case 78: break;
          case 24:
            { string.append('#');
            }
            // fall through
          case 79: break;
          case 25:
            { return token("DESIGUAL", yytext());
            }
            // fall through
          case 80: break;
          case 26:
            { yybegin(COMENTARIO);
                                   comentario_multilinea += 1;
            }
            // fall through
          case 81: break;
          case 27:
            { throw new Error("Comentario no balanceado");
            }
            // fall through
          case 82: break;
          case 28:
            { return token("FLOAT_LITERAL", yytext());
            }
            // fall through
          case 83: break;
          case 29:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 84: break;
          case 30:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 85: break;
          case 31:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 86: break;
          case 32:
            { return token("DO", yytext());
            }
            // fall through
          case 87: break;
          case 33:
            { return token("IF", yytext());
            }
            // fall through
          case 88: break;
          case 34:
            { return token("OR", yytext());
            }
            // fall through
          case 89: break;
          case 35:
            { string.append('\"');
            }
            // fall through
          case 90: break;
          case 36:
            { string.append('\n');
            }
            // fall through
          case 91: break;
          case 37:
            { string.append('\t');
            }
            // fall through
          case 92: break;
          case 38:
            { comentario_multilinea ++;
            }
            // fall through
          case 93: break;
          case 39:
            { comentario_multilinea --;
                                   if(comentario_multilinea == 0){
                                      yybegin(YYINITIAL);}
            }
            // fall through
          case 94: break;
          case 40:
            { return token("END", yytext());
            }
            // fall through
          case 95: break;
          case 41:
            { return token("AND", yytext());
            }
            // fall through
          case 96: break;
          case 42:
            { return token("NOT", yytext());
            }
            // fall through
          case 97: break;
          case 43:
            { return token("THEN", yytext());
            }
            // fall through
          case 98: break;
          case 44:
            { return token("BOOLEAN_LITERAL", yytext());
            }
            // fall through
          case 99: break;
          case 45:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 100: break;
          case 46:
            { return token("WHILE", yytext());
            }
            // fall through
          case 101: break;
          case 47:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 102: break;
          case 48:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 103: break;
          case 49:
            { return token("INTEGER",yytext());
            }
            // fall through
          case 104: break;
          case 50:
            { return token("SUMAIMPAR", yytext());
            }
            // fall through
          case 105: break;
          case 51:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 106: break;
          case 52:
            { return token("DECLARE.SECTION", yytext());
            }
            // fall through
          case 107: break;
          case 53:
            { return token("PROGRAM.SECTION", yytext());
            }
            // fall through
          case 108: break;
          case 54:
            { return token("ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 109: break;
          case 55:
            { return token("ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
