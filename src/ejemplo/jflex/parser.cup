package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;

class MiParser;

action code {:
    Hashtable table = new Hashtable();
:};

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

:};


terminal SUMA, RESTA, MULTIPLICACION, DIVISION, IGUAL, IGUAL_IGUAL, DESIGUAL, MAYOR, MAYOR_IGUAL, MENOR,
MENOR_IGUAL, PARENTESISA, PARENTESISC, LLAVESA, LLAVESC, CORCHETESA, CORCHETESC, PUNTO, COMA, PUNTOCOMA, DOS_PUNTOS,
ASIGNACION, SUMAIMPAR, INTEGER, FLOAT, BOOLEAN, INPUT_INT, INPUT_FLOAT, INPUT_BOOL, AND, OR, NOT, WHILE, DO, END,
IF, THEN, ELSE, DISPLAY, DECLARE_SECTION, ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION;

terminal String IDENTIFICADOR, BOOLEAN_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL;

nonterminal String programa, bloque_declaraciones, bloque_programa, declaraciones, tipos, tipos_datos_id,
bloque_sentencias, sentencia, sentencia_while, sentencia_if, sentencia_asignacion, sentencia_display, factor, 
expresion_or, expresion_and, expresion_not, comparacion, empresion_sr, empresion_md, menos_unario, funcion_especial,
numeros_dentro_corchete, condicion, lista_sentencias, input, display, input_int, input_float, input_bool;

start with programa;

programa ::= expr:e {:
            System.out.println("REGLA 0: expression -> expr");
            System.out.printf("REGLA 0: expression -> %s%n%n", e);
            RESULT = e;
        :};

expr ::= expr:e1 MAS expr:e2 {:
            System.out.println("REGLA 1.1: expr -> expr MAS expr");
            System.out.printf("REGLA 1.1: expr -> %s MAS %s%n%n", e1, e2);
            RESULT = e1+"+"+e2;
        :};

expr ::= expr:e1 MENOS expr:e2 {:
            System.out.println("REGLA 1.2: expr -> expr MENOS expr");
            System.out.printf("REGLA 1.2: expr -> %s MENOS %s%n%n", e1, e2);
            RESULT = e1+"-"+e2;
        :};

expr ::= expr:e1 MULT expr:e2 {:
            System.out.println("REGLA 1.3: expr -> expr MULT expr");
            System.out.printf("REGLA 1.3: expr -> %s MULT %s%n%n", e1, e2);
            RESULT = e1+"*"+e2;
        :};

expr ::= expr:e1 DIV expr:e2 {:
            System.out.println("REGLA 1.4: expr -> expr DIV expr");
            System.out.printf("REGLA 1.4: expr -> %s DIV %s%n%n", e1, e2);
            RESULT = e1+"*"+e2;
        :};

expr ::= PAR_ABRE expr:e PAR_CIERRA {:
            System.out.println("REGLA 1.5: expr -> ( expr )");
            System.out.printf("REGLA 1.5: expr -> ( %s )%n%n", e);
            RESULT = "("+e+")";
        :};

expr ::= IDENTIFICADOR:id {:
            System.out.println("REGLA 1.6: expr -> IDENTIFICADOR");
            System.out.printf("REGLA 1.6: expr -> %s%n%n", id);
            RESULT = id;
        :};

expr ::= ENTERO:ent {:
            System.out.println("REGLA 1.6: expr -> ENTERO");
            System.out.printf("REGLA 1.6: expr -> %s%n%n", ent);
            RESULT = ent;
        :};

expr ::= MENOS expr:e{:
            System.out.println("REGLA 1.7: expr -> MENOS expr");
            System.out.printf("REGLA 1.7: expr -> - %s%n%n", e);
            RESULT = "-"+e;
        :} %prec MENOS_UNARIO;
